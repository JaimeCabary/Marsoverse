<script>
  function isMobileDevice() {
  return /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
}
class SolanaWalletManager {
  constructor() {
    this.wallets = [
      {
        name: 'Phantom',
        icon: 'images/wallet/phantom.png',
        description: 'Popular Solana wallet',
        adapter: 'phantom',
        downloadUrl: 'https://phantom.app/'
      },
      {
        name: 'Solflare',
        icon: 'images/wallet/solflare.png',
        description: 'Full-featured Solana wallet',
        adapter: 'solflare',
        downloadUrl: 'https://solflare.com/'
      },
      {
        name: 'Backpack',
        icon: 'images/wallet/backpack.png',
        description: 'Web3 wallet for everyone',
        adapter: 'backpack',
        downloadUrl: 'https://backpack.app/'
      },
      {
        name: 'Glow',
        icon: 'images/wallet/glow.png',
        description: 'Solana validator wallet',
        adapter: 'glow',
        downloadUrl: 'https://glow.app/'
      },
      {
        name: 'Slope',
        icon: 'images/wallet/slope.png',
        description: 'Mobile-first Solana wallet',
        adapter: 'slope',
        downloadUrl: 'https://slope.finance/'
      },
      {
        name: 'Torus',
        icon: 'images/wallet/torusi.png',
        description: 'Social login wallet',
        adapter: 'torus',
        downloadUrl: 'https://tor.us/'
      }
    ];
    
    this.connectedWallet = null;
    this.connection = new solanaWeb3.Connection('https://api.mainnet-beta.solana.com');
    
    this.initializeElements();
    this.setupEventListeners();
    this.renderWalletList();
  }
  
  initializeElements() {
    this.connectWalletBtn = document.getElementById('connectWalletBtn');
    this.walletPreview = document.getElementById('walletPreview');
    this.skipLink = document.getElementById('firstLink');
    this.walletModal = document.getElementById('walletModal');
    this.closeModal = document.getElementById('closeModal');
    this.walletList = document.getElementById('walletList');
    this.walletStatus = document.getElementById('walletStatus');
  }
  
  setupEventListeners() {
    this.connectWalletBtn.addEventListener('click', () => this.showWalletModal());
    this.closeModal.addEventListener('click', () => this.hideWalletModal());
    this.skipLink.addEventListener('click', () => this.skipWallet());
    
    // Close modal when clicking outside
    this.walletModal.addEventListener('click', (e) => {
      if (e.target === this.walletModal) {
        this.hideWalletModal();
      }
    });
    
    // Disconnect wallet when preview is clicked
    this.walletPreview.addEventListener('click', () => {
      if (this.connectedWallet && this.walletPreview.textContent.includes('...')) {
        this.disconnectWallet();
      }
    });
  }
  
  showWalletModal() {
    this.walletModal.classList.remove('hidden');
    this.renderWalletList();
  }
  
  hideWalletModal() {
    this.walletModal.classList.add('hidden');
    this.hideStatus();
  }
  
  renderWalletList() {
    this.walletList.innerHTML = '';
    
    this.wallets.forEach(wallet => {
      const walletElement = document.createElement('div');
      walletElement.className = 'wallet-option';
      walletElement.innerHTML = `
        <img src="${wallet.icon}" alt="${wallet.name}" class="wallet-icon" onerror="this.style.display='none'">
        <div class="wallet-info">
          <div class="wallet-name">${wallet.name}</div>
          <div class="wallet-description">${wallet.description}</div>
        </div>
      `;
      
      walletElement.addEventListener('click', () => this.connectWallet(wallet));
      this.walletList.appendChild(walletElement);
    });
  }
  
  async connectWallet(walletInfo) {
    this.showStatus('Connecting to ' + walletInfo.name + '...', 'connecting');
    
    try {
      let walletAdapter = null;
      
      // Check for wallet availability and connect
      switch (walletInfo.adapter) {
        case 'phantom':
          if (window.solana && window.solana.isPhantom) {
            walletAdapter = window.solana;
          }
          break;
          
        case 'solflare':
          if (window.solflare && window.solflare.isSolflare) {
            walletAdapter = window.solflare;
          }
          break;
          
        case 'backpack':
          if (window.backpack && window.backpack.isBackpack) {
            walletAdapter = window.backpack;
          }
          break;
          
        case 'glow':
          if (window.glow) {
            walletAdapter = window.glow;
          }
          break;
          
        case 'slope':
          if (window.Slope) {
            walletAdapter = window.Slope;
          }
          break;
          
        case 'torus':
          if (window.torus) {
            walletAdapter = window.torus;
          }
          break;
      }
      if (!walletAdapter) {
        this.showStatus(`${walletInfo.name} not found. Open it?`, 'error');

        setTimeout(() => {
          let deepLinks = {
            phantom: isMobileDevice() ? 'phantom://' : walletInfo.downloadUrl,
            solflare: isMobileDevice() ? 'solflare://' : walletInfo.downloadUrl,
            slope: isMobileDevice() ? 'slope://' : walletInfo.downloadUrl,
            glow: walletInfo.downloadUrl,
            backpack: walletInfo.downloadUrl,
            torus: walletInfo.downloadUrl
          };

          if (confirm(`${walletInfo.name} not detected. Open wallet app?`)) {
            window.location.href = deepLinks[walletInfo.adapter] || walletInfo.downloadUrl;
          }
          this.hideStatus();
        }, 2000);

        return;
      }

      // if (!walletAdapter) {
      //   // Wallet not found, offer to install
      //   this.showStatus(`${walletInfo.name} not found. Install it?`, 'error');
        
      //   setTimeout(() => {
      //     if (confirm(`${walletInfo.name} wallet not found. Would you like to install it?`)) {
      //       window.open(walletInfo.downloadUrl, '_blank');
      //     }
      //     this.hideStatus();
      //   }, 2000);
      //   return;
      // }
      
      // Connect to wallet
      const response = await walletAdapter.connect();
      const publicKey = response.publicKey || response.account?.address;
      
      if (!publicKey) {
        throw new Error('No public key received');
      }
      
      // Store connection info
      this.connectedWallet = {
        adapter: walletAdapter,
        publicKey: typeof publicKey === 'string' ? publicKey : publicKey.toString(),
        name: walletInfo.name
      };
      
      // Update UI
      this.showStatus('Connected successfully!', 'connected');
      this.updateWalletPreview();
      
      // Store in localStorage
      localStorage.setItem('walletAddress', this.connectedWallet.publicKey);
      localStorage.setItem('walletName', walletInfo.name);
      
      // Hide modal and proceed after short delay
      setTimeout(() => {
        this.hideWalletModal();
        this.proceedToNextSection();
      }, 1500);
      
    } catch (error) {
      console.error('Wallet connection failed:', error);
      this.showStatus('Connection failed: ' + error.message, 'error');
      
      setTimeout(() => {
        this.hideStatus();
      }, 3000);
    }
  }
  
  updateWalletPreview() {
    if (this.connectedWallet) {
      const shortAddress = this.connectedWallet.publicKey.slice(0, 4) + '...' + this.connectedWallet.publicKey.slice(-4);
      this.walletPreview.textContent = `${this.connectedWallet.name}: ${shortAddress}`;
      this.walletPreview.style.display = 'inline-block';
      this.skipLink.style.display = 'none';
    }
  }
  
  async disconnectWallet() {
    if (confirm('Do you want to disconnect your wallet?')) {
      try {
        if (this.connectedWallet?.adapter?.disconnect) {
          await this.connectedWallet.adapter.disconnect();
        }
        
        // Clear stored data
        this.connectedWallet = null;
        localStorage.removeItem('walletAddress');
        localStorage.removeItem('walletName');
        
        // Update UI
        this.walletPreview.style.display = 'none';
        this.skipLink.style.display = 'inline-block';
        
        alert('Wallet disconnected successfully');
        
      } catch (error) {
        console.error('Disconnect error:', error);
        alert('Disconnect failed: ' + error.message);
      }
    }
  }
  
  showStatus(message, type) {
    this.walletStatus.textContent = message;
    this.walletStatus.className = `wallet-status status-${type}`;
    this.walletStatus.style.display = 'block';
  }
  
  hideStatus() {
    this.walletStatus.style.display = 'none';
  }
  
  skipWallet() {
    // Your existing skip logic
    this.proceedToNextSection();
  }
  
  proceedToNextSection() {
    // Hide current section and show next section
    // Replace 'genderSection' with your actual next section ID
    document.getElementById('phasetwo').classList.remove('active');
    document.getElementById('genderSection').classList.add('active');
  }
  
  // Check if wallet was previously connected
  checkPreviousConnection() {
    const storedAddress = localStorage.getItem('walletAddress');
    const storedName = localStorage.getItem('walletName');
    
    if (storedAddress && storedName) {
      this.connectedWallet = {
        publicKey: storedAddress,
        name: storedName
      };
      this.updateWalletPreview();
    }
  }
}

// Initialize wallet manager when page loads
document.addEventListener('DOMContentLoaded', () => {
  window.solanaWalletManager = new SolanaWalletManager();
  window.solanaWalletManager.checkPreviousConnection();
});

// Helper function for your existing code
function showSection(sectionId) {
  // Hide all sections
  document.querySelectorAll('.section').forEach(section => {
    section.classList.remove('active');
  });
  
  // Show target section
  document.getElementById(sectionId).classList.add('active');
}
</script>








marzoooooooo



|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
|||||||||||||||||||||||||||
||||||||||||||||||||||
||||||||||||||||||||||||||


<script>
/**
 * SolanaWalletManager (Game Page)
 * Mirrors your landing page structure + adds reward conversion.
 * IDs expected in DOM (you already have them in your game page):
 * - #walletIcon, #walletAmount, #connectWalletBtn
 * - #walletModal, #closeModal, #walletList, #walletStatus
 * - #walletInfo, #connectedWalletName, #connectedWalletAddress, #solBalance
 * - #walleta (USD line you already show), #rewardUsd, #rewardSol
 */

class SolanaWalletManager {
  constructor() {
    this.wallets = [
    { name: 'Phantom',  icon: 'images/wallet/phantom.png',   description: 'Popular Solana wallet',        adapter: 'phantom',  downloadUrl: 'https://phantom.app/' },
    { name: 'Solflare', icon: 'images/wallet/solflare.png',  description: 'Full-featured Solana wallet',  adapter: 'solflare', downloadUrl: 'https://solflare.com/' },
    { name: 'Backpack', icon: 'images/wallet/backpack.png',  description: 'Web3 wallet for everyone',     adapter: 'backpack', downloadUrl: 'https://backpack.app/' },
    { name: 'Glow',     icon: 'images/wallet/glow.png',      description: 'Solana validator wallet',      adapter: 'glow',     downloadUrl: 'https://glow.app/' },
    { name: 'Slope',    icon: 'images/wallet/slope.png',     description: 'Mobile-first Solana wallet',   adapter: 'slope',    downloadUrl: 'https://slope.finance/' },
    { name: 'Torus',    icon: 'images/wallet/torusi.png',     description: 'Social login wallet',          adapter: 'torus',    downloadUrl: 'https://tor.us/' }
  ];

    this.dApps = [
      { 
        name: 'Jupiter', 
        icon: 'https://jup.ag/favicon.ico', 
        url: 'https://jup.ag',
        description: 'Best swap aggregator on Solana'
      },
      { 
        name: 'Raydium', 
        icon: 'https://raydium.io/favicon.ico', 
        url: 'https://raydium.io',
        description: 'Leading Solana DEX'
      },
      { 
        name: 'Solscan', 
        icon: 'https://solscan.io/favicon.ico', 
        url: 'https://solscan.io',
        description: 'Solana block explorer'
      },
      { 
        name: 'Tensor', 
        icon: 'images/wallet/tensor.png', 
        url: 'https://www.tensor.trade',
        description: 'NFT marketplace'
      },
      { 
        name: 'MarginFi', 
        icon: 'https://app.marginfi.com/favicon.ico', 
        url: 'https://app.marginfi.com',
        description: 'Lending protocol'
      },
      { 
        name: 'Drift', 
        icon: 'https://app.drift.trade/favicon.ico', 
        url: 'https://app.drift.trade',
        description: 'Perpetuals trading'
      }
    ];

    this.connectedWallet = null;
    this.connection = new solanaWeb3.Connection('https://api.mainnet-beta.solana.com', { commitment: 'confirmed' });

    this.initializeElements();
    this.setupEventListeners();
    this.renderWalletList();
    this.checkPreviousConnection();
    this.updateRewardConversion();
}
  // ---------- Element refs ----------
  initializeElements() {
    // HUD / buttons
    this.walletIcon = document.getElementById('walletIcon');       // optional
    this.walletAmount = document.getElementById('walletAmount');   // optional HUD SOL
    this.connectWalletBtn = document.getElementById('connectWalletBtn');

    // Modal
    this.walletModal = document.getElementById('walletModal');
    this.closeModal = document.getElementById('closeModal');
    this.walletList = document.getElementById('walletList');
    this.walletStatus = document.getElementById('walletStatus');

    // Status card
    this.walletInfo = document.getElementById('walletInfo');
    this.connectedWalletName = document.getElementById('connectedWalletName');
    this.connectedWalletAddress = document.getElementById('connectedWalletAddress');
    this.solBalanceEl = document.getElementById('solBalance');

    // Reward
    this.walletUsdEl = document.getElementById('walleta'); // you already show “USDT” number
    this.rewardUsdEl = document.getElementById('rewardUsd');
    this.rewardSolEl = document.getElementById('rewardSol');
  }

  // ---------- Events ----------
  setupEventListeners() {
    if (this.walletIcon) {
      this.walletIcon.addEventListener('click', () => this.showWalletModal());
    }
    if (this.connectWalletBtn) {
      this.connectWalletBtn.addEventListener('click', () => {
        if (this.connectedWallet) this.disconnectWallet();
        else this.showWalletModal();
      });
    }
    if (this.closeModal) {
      this.closeModal.addEventListener('click', () => this.hideWalletModal());
    }
    if (this.walletModal) {
      this.walletModal.addEventListener('click', (e) => {
        if (e.target === this.walletModal) this.hideWalletModal();
      });
    }
  }

  // ---------- Modal ----------
  showWalletModal() {
    if (!this.walletModal) return;
    this.walletModal.classList.remove('hidden');
    this.renderWalletList();
  }
  hideWalletModal() {
    if (!this.walletModal) return;
    this.walletModal.classList.add('hidden');
    this.hideStatus();
  }

  renderWalletList() {
  if (!this.walletList) return;
  this.walletList.innerHTML = '';

  // Always show wallet options
  this.wallets.forEach((wallet) => {
    const el = document.createElement('div');
    el.className = 'wallet-option';
    if (this.connectedWallet?.name === wallet.name) {
      el.classList.add('connected-wallet');
    }
    el.innerHTML = `
      <img src="${wallet.icon}" alt="${wallet.name}" class="wallet-icon" onerror="this.style.display='none'">
      <div class="wallet-info">
        <div class="wallet-name">${wallet.name}${this.connectedWallet?.name === wallet.name ? ' (Connected)' : ''}</div>
        <div class="wallet-description">${wallet.description}</div>
      </div>
    `;
    el.addEventListener('click', () => {
      if (this.connectedWallet?.name === wallet.name) return;
      this.connectWallet(wallet);
    });
    this.walletList.appendChild(el);
  });

  // Add disconnect button if wallet is connected
  if (this.connectedWallet) {
    const disconnectBtn = document.createElement('button');
    disconnectBtn.id = 'disconnectWalletBtn';
    disconnectBtn.className = 'wallet-option disconnect-btn';
    disconnectBtn.innerHTML = `
      <i class="fas fa-sign-out-alt wallet-icon"></i>
      <div class="wallet-info">
        <div class="wallet-name">Disconnect Wallet</div>
        <div class="wallet-description">Remove current connection</div>
      </div>
    `;
    disconnectBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      this.disconnectWallet();
    });
    this.walletList.appendChild(disconnectBtn);
  }

  // Always show dApps section
  const dAppSection = document.createElement('div');
  dAppSection.className = 'dapp-section';
  dAppSection.innerHTML = `
    <h3>Explore Solana dApps</h3>
    <div class="dapp-grid">
      ${this.dApps.map(dApp => `
        <a href="${dApp.url}" class="dapp-option" target="_blank" title="${dApp.description}">
          <img src="${dApp.icon}" alt="${dApp.name}" onerror="this.src='https://cryptologos.cc/logos/solana-sol-logo.png'">
          <span>${dApp.name}</span>
        </a>
      `).join('')}
    </div>
  `;
  this.walletList.appendChild(dAppSection);
}

  // ---------- Connect ----------
  async connectWallet(walletInfo) {
    this.showStatus('Connecting to ' + walletInfo.name + '...', 'connecting');

    try {
      let adapter = null;
      switch (walletInfo.adapter) {
        case 'phantom':  adapter = (window.solana && window.solana.isPhantom) ? window.solana : null; break;
        case 'solflare': adapter = (window.solflare && window.solflare.isSolflare) ? window.solflare : null; break;
        case 'backpack': adapter = (window.backpack && window.backpack.isBackpack) ? window.backpack : null; break;
        case 'glow':     adapter = window.glow || null; break;
        case 'slope':    adapter = window.Slope || null; break;
        case 'torus':    adapter = window.torus || null; break;
      }

      if (!adapter) {
        this.showStatus(`${walletInfo.name} not found. Install it?`, 'error');
        setTimeout(() => {
          if (confirm(`${walletInfo.name} wallet not found. Would you like to install it?`)) {
            window.open(walletInfo.downloadUrl, '_blank');
          }
          this.hideStatus();
        }, 1600);
        return;
      }

      const res = await adapter.connect();
      const pk = res?.publicKey ?? adapter.publicKey ?? res?.account?.address;
      if (!pk) throw new Error('No public key received');

      const base58 = typeof pk === 'string' ? pk : pk.toString();
      this.connectedWallet = { adapter, name: walletInfo.name, publicKey: base58 };

      // persist for game page reloads
      localStorage.setItem('walletAddress', base58);
      localStorage.setItem('walletName', walletInfo.name);

      this.showStatus('Connected successfully!', 'connected');
      await this.updateWalletDisplay();

      setTimeout(() => this.hideWalletModal(), 1000);
    } catch (err) {
      console.error('Wallet connection failed:', err);
      this.showStatus('Connection failed: ' + (err?.message || err), 'error');
      setTimeout(() => this.hideStatus(), 2000);
    }
  }

  // ---------- Local restore ----------
  async checkPreviousConnection() {
    const addr = localStorage.getItem('walletAddress');
    const name = localStorage.getItem('walletName');
    if (addr && name) {
      this.connectedWallet = { publicKey: addr, name, adapter: null }; // adapter may be absent after reload
      await this.updateWalletDisplay();
    } else {
      this.applyDisconnectedState();
    }
  }

  // ---------- UI states ----------
  applyDisconnectedState() {
    if (this.walletIcon) this.walletIcon.className = 'disconnected';
    if (this.walletAmount) this.walletAmount.textContent = '0';
    if (this.connectWalletBtn) {
      this.connectWalletBtn.textContent = 'Connect Solana Wallet';
      this.connectWalletBtn.classList.remove('connected');
    }
    if (this.walletInfo) this.walletInfo.style.display = 'none';
    if (this.solBalanceEl) this.solBalanceEl.textContent = '0';
  }

  async updateWalletDisplay() {
    if (!this.connectedWallet) return this.applyDisconnectedState();

    // show connected UI
    if (this.connectedWalletName) this.connectedWalletName.textContent = this.connectedWallet.name;
    if (this.connectedWalletAddress) {
      const a = this.connectedWallet.publicKey;
      this.connectedWalletAddress.textContent = a.slice(0, 8) + '...' + a.slice(-8);
    }
    if (this.walletIcon) this.walletIcon.className = 'connected';
    if (this.connectWalletBtn) {
      this.connectWalletBtn.textContent = `Disconnect ${this.connectedWallet.name}`;
      this.connectWalletBtn.classList.add('connected');
    }
    if (this.walletInfo) this.walletInfo.style.display = 'block';

    // on-chain SOL
    try {
      const lamports = await this.connection.getBalance(new solanaWeb3.PublicKey(this.connectedWallet.publicKey));
      const sol = lamports / solanaWeb3.LAMPORTS_PER_SOL;
      if (this.solBalanceEl) this.solBalanceEl.textContent = sol.toFixed(4);
      if (this.walletAmount)  this.walletAmount.textContent  = sol.toFixed(4);
    } catch (e) {
      console.warn('getBalance failed:', e);
      if (this.solBalanceEl) this.solBalanceEl.textContent = '0';
      if (this.walletAmount) this.walletAmount.textContent = '0';
    }

    // off-chain reward conversion
    this.updateRewardConversion();
  }

 async disconnectWallet() {
  if (!confirm('Do you want to disconnect your wallet?')) return;

  try {
    if (this.connectedWallet?.adapter?.disconnect) {
      await this.connectedWallet.adapter.disconnect();
    }
  } catch (e) {
    console.warn('disconnect error:', e);
  }

  this.connectedWallet = null;
  localStorage.removeItem('walletAddress');
  localStorage.removeItem('walletName');
  
  // Immediately update all UI elements
  this.applyDisconnectedState();
  this.renderWalletList(); // Refresh the modal view
  this.updateWalletDisplay();
}

  // ---------- Status banner ----------
  showStatus(message, type) {
    if (!this.walletStatus) return;
    this.walletStatus.textContent = message;
    this.walletStatus.className = `wallet-status status-${type}`;
    this.walletStatus.style.display = 'block';
  }
  hideStatus() {
    if (this.walletStatus) this.walletStatus.style.display = 'none';
  }

  // ---------- Reward (USD → ≈ SOL) ----------
  // Use your existing key `walletBalance` (fallback to `rewardUSD` for compatibility)
  getRewardUsd() {
    const v = localStorage.getItem('walletBalance') ?? localStorage.getItem('rewardUSD');
    const n = v ? Number(v) : 0;
    return Number.isFinite(n) ? n : 0;
  }

  async fetchSolUsdPrice() {
    // USD per SOL
    const url = 'https://api.coingecko.com/api/v3/simple/price?ids=solana&vs_currencies=usd';
    const r = await fetch(url, { cache: 'no-store' });
    if (!r.ok) throw new Error('Price fetch failed');
    const j = await r.json();
    const price = j?.solana?.usd;
    if (!price || !Number.isFinite(price)) throw new Error('Bad price payload');
    localStorage.setItem('lastSolUsd', String(price));
    return price;
  }

  updateRewardDom(usd, sol) {
    if (this.rewardUsdEl) this.rewardUsdEl.textContent = usd.toFixed(2);
    if (this.walletUsdEl) this.walletUsdEl.textContent = usd.toFixed(2); // reuse your Settings “USDT” line
    if (this.rewardSolEl) this.rewardSolEl.textContent = sol.toFixed(6);
  }

  async updateRewardConversion() {
    const rewardUSD = this.getRewardUsd();
    if (!rewardUSD) return this.updateRewardDom(0, 0);

    try {
      const priceUsdPerSol = await this.fetchSolUsdPrice();
      const rewardSOL = rewardUSD / priceUsdPerSol;     // SOL = USD ÷ (USD/SOL)
      this.updateRewardDom(rewardUSD, rewardSOL);
      localStorage.setItem('rewardSOL', String(rewardSOL));
    } catch (err) {
      console.warn('Price fetch failed, using cached:', err);
      const cached = Number(localStorage.getItem('lastSolUsd') || '0');
      if (cached > 0) {
        const rewardSOL = rewardUSD / cached;
        this.updateRewardDom(rewardUSD, rewardSOL);
        localStorage.setItem('rewardSOL', String(rewardSOL));
      } else {
        this.updateRewardDom(rewardUSD, 0);
      }
    }
  }

  // ---------- Periodic refresh ----------
  startBalanceRefresh() {
    setInterval(async () => {
      if (this.connectedWallet) await this.updateWalletDisplay();
      this.updateRewardConversion();
    }, 30000);
  }
}

// Boot
document.addEventListener('DOMContentLoaded', () => {
  window.solanaWalletManager = new SolanaWalletManager();
  window.solanaWalletManager.startBalanceRefresh();
});
</script>
<script>
  // Honeycomb Protocol Integration for MarsoVerse
class HoneycombProtocol {
  constructor() {
    this.apiUrl = 'https://api.honeycomb.xyz'; // Replace with actual Honeycomb API
    this.gameId = 'marsoverse';
    this.version = '1.0.0';
    this.isConnected = false;
    this.init();
  }

  async init() {
    try {
      await this.connect();
      this.syncLocalData();
      this.startPeriodicSync();
    } catch (error) {
      console.warn('Honeycomb connection failed, using local storage:', error);
    }
  }

  async connect() {
    // Simulate connection - replace with actual Honeycomb connection
    this.isConnected = true;
    console.log('✅ Honeycomb Protocol connected');
    this.sendEvent('protocol_connected', { gameId: this.gameId });
  }

  sendEvent(eventType, data) {
    const event = {
      timestamp: new Date().toISOString(),
      type: eventType,
      data: data,
      game: this.gameId,
      version: this.version,
      playerId: localStorage.getItem('playerName') || 'anonymous'
    };

    // Store locally for now (replace with actual API call)
    const events = JSON.parse(localStorage.getItem('honeycomb_events') || '[]');
    events.push(event);
    localStorage.setItem('honeycomb_events', JSON.stringify(events.slice(-100))); // Keep last 100 events

    // In real implementation, send to Honeycomb API
    console.log('[Honeycomb Event]', event);
  }

  async syncLocalData() {
    // Sync existing player data to Honeycomb
    const playerData = {
      name: localStorage.getItem('playerName'),
      xp: parseInt(localStorage.getItem('playerXP') || '0'),
      level: Math.floor(parseInt(localStorage.getItem('playerXP') || '0') / 100) + 1,
      companion: localStorage.getItem('companionName'),
      walletBalance: parseFloat(localStorage.getItem('walletBalance') || '0'),
      lastActive: new Date().toISOString()
    };

    this.sendEvent('player_sync', playerData);
  }

  updateXP(newXP, source = 'game') {
    const oldXP = parseInt(localStorage.getItem('playerXP') || '0');
    const xpGained = newXP - oldXP;
    
    localStorage.setItem('playerXP', newXP.toString());
    
    this.sendEvent('xp_updated', {
      oldXP,
      newXP,
      xpGained,
      source
    });

    // Update leaderboard
    this.updateLeaderboard();
  }

  completeMission(missionId, xpReward, usdReward = 0) {
    const currentXP = parseInt(localStorage.getItem('playerXP') || '0');
    const newXP = currentXP + xpReward;
    const currentWallet = parseFloat(localStorage.getItem('walletBalance') || '0');
    const newWallet = currentWallet + usdReward;

    // Update local storage
    localStorage.setItem('playerXP', newXP.toString());
    localStorage.setItem('walletBalance', newWallet.toString());

    // Send to Honeycomb
    this.sendEvent('mission_completed', {
      missionId,
      xpReward,
      usdReward,
      newXP,
      newWallet
    });

    // Update displays
    this.updateGameDisplay();
    this.updateLeaderboard();

    return { newXP, newWallet };
  }

  updateLeaderboard() {
    // Get all players from events
    const events = JSON.parse(localStorage.getItem('honeycomb_events') || '[]');
    const players = new Map();

    events.forEach(event => {
      if (event.type === 'xp_updated' || event.type === 'player_sync') {
        const playerName = event.playerId;
        const xp = event.data.newXP || event.data.xp || 0;
        players.set(playerName, Math.max(players.get(playerName) || 0, xp));
      }
    });

    // Convert to sorted array
    const leaderboard = Array.from(players.entries())
      .map(([name, xp]) => ({ name, xp }))
      .sort((a, b) => b.xp - a.xp)
      .slice(0, 10);

    // Update leaderboard display
    this.displayLeaderboard(leaderboard);
    
    return leaderboard;
  }

  displayLeaderboard(leaderboard) {
    const leaderboardList = document.getElementById('leaderboardList');
    if (!leaderboardList) return;

    leaderboardList.innerHTML = '';
    leaderboard.forEach((player, index) => {
      const li = document.createElement('li');
      const icon = index === 0 ? '👑' : index === 1 ? '🥈' : index === 2 ? '🥉' : '🚀';
      li.textContent = `${icon} ${player.name} - ${player.xp} XP`;
      leaderboardList.appendChild(li);
    });
  }

   
// Fix for the updateGameDisplay function in MissionsManager class
updateGameDisplay() {
  const xp = localStorage.getItem("playerXP") || "0";
  const usdt = localStorage.getItem("walletBalance") || "0";
  
  // FIX: Update player name displays
  const playerName = localStorage.getItem("playerName") || "Player";
  const playerFirstName = localStorage.getItem("playerFirstName") || playerName;
  
  document.getElementById("playerXP").textContent = `XP: ${xp}`;
  document.getElementById("youXP").textContent = xp;
  document.getElementById("walleta").textContent = parseFloat(usdt).toFixed(2);
  
  // FIX: Update name displays that might get overridden
  const playerNameHUD = document.getElementById("playerNameHUD");
  const welcomeMessage = document.getElementById("welcomeMessage");
  const youName = document.getElementById("youName");
  
  if (playerNameHUD) playerNameHUD.textContent = playerFirstName;
  if (welcomeMessage) welcomeMessage.textContent = `Hello, ${playerFirstName}`;
  if (youName) youName.textContent = playerName;
  
  const walletAmountEl = document.getElementById("walletAmount");
  if (walletAmountEl) {
    walletAmountEl.textContent = parseFloat(usdt).toFixed(2);
  }
  
  this.solanaWalletManager.updateRewardConversion();
}


  getFriendsList() {
    // Get recent players from events
    const events = JSON.parse(localStorage.getItem('honeycomb_events') || '[]');
    const friends = new Set();
    
    events.forEach(event => {
      if (event.playerId && event.playerId !== localStorage.getItem('playerName')) {
        friends.add(event.playerId);
      }
    });

    return Array.from(friends).slice(0, 10);
  }

  updateFriendsList() {
    const friendsList = document.getElementById('friendsList');
    if (!friendsList) return;

    const friends = this.getFriendsList();
    friendsList.innerHTML = '';

    // Add companions first
    const companions = [
      { name: 'Elena', status: 'Companion' },
      { name: 'Errin', status: 'Companion' }
    ];

    companions.forEach(companion => {
      const li = document.createElement('li');
      li.innerHTML = `${companion.name}: <span class="friendStatus">${companion.status}</span>`;
      friendsList.appendChild(li);
    });

    // Add other players
    friends.forEach(friend => {
      const li = document.createElement('li');
      li.innerHTML = `${friend}: <span class="friendStatus">Fellow Explorer</span>`;
      friendsList.appendChild(li);
    });
  }

  startPeriodicSync() {
    setInterval(() => {
      if (this.isConnected) {
        this.updateLeaderboard();
        this.updateFriendsList();
      }
    }, 30000); // Sync every 30 seconds
  }
}

// Initialize Honeycomb
window.honeycomb = new HoneycombProtocol();
</script>




<script>
// 🎯 Missions Manager
class MissionsManager {
  constructor(honeycomb, solanaWalletManager) {
    this.honeycomb = honeycomb;
    this.solanaWalletManager = solanaWalletManager;
    this.dailyCheckIns = [
      { day: 1, rewards: { xp: 5, usdt: 0.01, nft: null } },
      { day: 2, rewards: { xp: 5, usdt: 0.02, nft: null } },
      { day: 3, rewards: { xp: 10, usdt: 0.03, nft: null } },
      { day: 4, rewards: { xp: 10, usdt: 0.04, nft: null } },
      { day: 5, rewards: { xp: 15, usdt: 0.05, nft: "Rover NFT" } },
      { day: 6, rewards: { xp: 15, usdt: 0.06, nft: null } },
      { day: 7, rewards: { xp: 20, usdt: 0.07, nft: null } },
      { day: 8, rewards: { xp: 20, usdt: 0.08, nft: null } },
      { day: 9, rewards: { xp: 20, usdt: 0.09, nft: null } },
      { day: 10, rewards: { xp: 20, usdt: 0.10, nft: "Rare NFT" } }
    ];
    this.tasks = [
      {
        id: "share_marsoverse",
        name: "Share MarsoVerse",
        description: "Share MarsoVerse on social media",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => this.shareMarsoVerse()
      },
      {
        id: "visit_github",
        name: "Check Out GitHub",
        description: "Visit the MarsoVerse GitHub",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "visit_zepta",
        name: "Visit Zepta Terminal",
        description: "Explore the Zepta Terminal",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.location.href = "zeep.html"
      },
      {
        id: "visit_mars",
        name: "Visit Mars Viewer",
        description: "View the Martian landscape",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.location.href = "mars-viewer/dist/index.html"
      },
      {
        id: "follow_twitter",
        name: "Follow on Twitter",
        description: "Follow MarsoVerse on Twitter",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.open("https://twitter.com/intent/follow?screen_name=MarsoVerse", "_blank")
      },
      {
        id: "star_github",
        name: "Star GitHub Repo",
        description: "Star the MarsoVerse repo on GitHub",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.open("https://github.com/JaimeCabary/MarsoVerse", "_blank")
      },
      {
        id: "follow_github",
        name: "Follow on GitHub",
        description: "Follow JaimeCabary on GitHub",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "earn_xp",
        name: "Earn 50 XP",
        description: "Complete a mini-game to earn 50 XP",
        rewards: { xp: 10, usdt: 0.01 },
        action: () => window.location.href = "black/blacko.html"
      },
      {
        id: "stake_usdt",
        name: "Stake USDT",
        description: "Stake USDT via Honeycomb",
        rewards: { xp: 10, usdt: 0.01 },
        action: () => this.stakeUSDT()
      },
      {
        id: "explore_dapp",
        name: "Explore Solana dApp",
        description: "Visit a Solana dApp from the wallet modal",
        rewards: { xp: 5, usdt: 0.01 },
        action: () => document.getElementById("walletIcon").click()
      }
    ];
    this.initialize();
  }

  initialize() {
    this.loadProgress();
    this.loadAdminMissions();
    this.renderDailyCheckIns();
    this.renderTasks();
    this.renderAdminMissions();
    this.setupEventListeners();
    this.checkDailyEligibility();
  }

  loadProgress() {
    this.checkInProgress = JSON.parse(localStorage.getItem("checkInProgress") || "{}");
    this.taskProgress = JSON.parse(localStorage.getItem("taskProgress") || "{}");
    this.adminMissionProgress = JSON.parse(localStorage.getItem("adminMissionProgress") || "{}");
    this.lastCheckIn = localStorage.getItem("lastCheckIn") || null;
  }

  loadAdminMissions() {
    this.adminMissions = JSON.parse(localStorage.getItem("marsoverse_missions") || "[]");
    this.adminMissions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  }

  saveProgress() {
    localStorage.setItem("checkInProgress", JSON.stringify(this.checkInProgress));
    localStorage.setItem("taskProgress", JSON.stringify(this.taskProgress));
    localStorage.setItem("adminMissionProgress", JSON.stringify(this.adminMissionProgress));
    localStorage.setItem("lastCheckIn", this.lastCheckIn || new Date().toISOString().split("T")[0]);
  }

  checkDailyEligibility() {
    const today = new Date().toISOString().split("T")[0];
    const claimBtn = document.getElementById("claimDailyBtn");
    if (this.lastCheckIn !== today && this.getCurrentDay() <= this.dailyCheckIns.length) {
      claimBtn.disabled = false;
    } else {
      claimBtn.disabled = true;
    }
  }

  getCurrentDay() {
    return Object.keys(this.checkInProgress).length + 1;
  }

  claimDailyCheckIn() {
    const today = new Date().toISOString().split("T")[0];
    const currentDay = this.getCurrentDay();
    if (currentDay > this.dailyCheckIns.length || this.lastCheckIn === today) return;

    const dayData = this.dailyCheckIns[currentDay - 1];
    this.checkInProgress[currentDay] = { completed: true, date: today };
    this.lastCheckIn = today;

    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    const newXP = currentXP + dayData.rewards.xp;
    const newUSDT = Math.min(currentUSDT + dayData.rewards.usdt, 2.0);

    localStorage.setItem("playerXP", newXP.toString());
    localStorage.setItem("walletBalance", newUSDT.toFixed(2));

    this.solanaWalletManager.updateRewardConversion();
    this.honeycomb.completeMission(
      `daily_checkin_day_${currentDay}`,
      dayData.rewards.xp,
      dayData.rewards.usdt
    );
    
    if (dayData.rewards.nft) {
      this.honeycomb.sendEvent("nft_earned", {
        nft: dayData.rewards.nft,
        day: currentDay
      });
      alert(`🎉 You earned a ${dayData.rewards.nft}!`);
    }

    this.saveProgress();
    this.renderDailyCheckIns();
    this.checkDailyEligibility();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  completeTask(taskId) {
    if (this.taskProgress[taskId]?.completed) return;
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) return;

    this.taskProgress[taskId] = { completed: true, date: new Date().toISOString() };
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    const newXP = currentXP + task.rewards.xp;
    const newUSDT = Math.min(currentUSDT + task.rewards.usdt, 2.0);

    localStorage.setItem("playerXP", newXP.toString());
    localStorage.setItem("walletBalance", newUSDT.toFixed(2));

    this.solanaWalletManager.updateRewardConversion();
    this.honeycomb.completeMission(taskId, task.rewards.xp, task.rewards.usdt);
    this.saveProgress();
    this.renderTasks();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  completeAdminMission(missionId) {
    if (this.adminMissionProgress[missionId]?.completed) return;
    const mission = this.adminMissions.find(m => m.id === missionId);
    if (!mission) return;

    this.adminMissionProgress[missionId] = { completed: true, date: new Date().toISOString() };
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    const newXP = currentXP + mission.xpReward;
    const newUSDT = Math.min(currentUSDT + (mission.usdReward || 0), 2.0);

    localStorage.setItem("playerXP", newXP.toString());
    localStorage.setItem("walletBalance", newUSDT.toFixed(2));

    this.solanaWalletManager.updateRewardConversion();
    this.honeycomb.completeMission(missionId, mission.xpReward, mission.usdReward || 0);
    this.showMissionPopup(mission);
    this.saveProgress();
    this.renderAdminMissions();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  shareMarsoVerse() {
    const shareData = {
      title: "Join MarsoVerse!",
      text: "Explore, build, and survive on Mars in this immersive Web3 game! 🚀",
      url: window.location.origin
    };
    if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
      navigator.share(shareData)
        .then(() => this.completeTask("share_marsoverse"))
        .catch(err => console.warn("Share failed:", err));
    } else {
      navigator.clipboard.writeText(shareData.url).then(() => {
        alert("🔗 Link copied to clipboard! Share it to complete the task.");
        this.completeTask("share_marsoverse");
      });
    }
  }

  async stakeUSDT() {
    if (!this.solanaWalletManager.connectedWallet) {
      alert("⚠️ Please connect your wallet first!");
      document.getElementById("walletIcon").click();
      return;
    }
    try {
      this.honeycomb.sendEvent("stake_usdt", {
        amount: 0.5,
        wallet: this.solanaWalletManager.connectedWallet.publicKey
      });
      this.completeTask("stake_usdt");
      alert("🚀 Successfully staked 0.5 USDT!");
    } catch (error) {
      console.error("Staking failed:", error);
      alert("❌ Staking failed. Try again later.");
    }
  }

  showMissionPopup(mission) {
    const popup = document.createElement("div");
    popup.className = "reward-overlay";
    popup.innerHTML = `
      <div class="reward-box choice">
        <h5>Mission Completed: ${mission.title}</h5>
        <p>Rewards: ${mission.xpReward} XP${mission.usdReward ? `, $${mission.usdReward} USDT` : ""}</p>
        <button onclick="this.parentElement.parentElement.remove()">Close</button>
      </div>
    `;
    document.body.appendChild(popup);
    setTimeout(() => {
      popup.classList.add("hidden");
      setTimeout(() => popup.remove(), 300);
    }, 3000);
  }

  updateGameDisplay() {
    const xp = localStorage.getItem("playerXP") || "0";
    const usdt = localStorage.getItem("walletBalance") || "0";
    
    document.getElementById("playerXP").textContent = `XP: ${xp}`;
    document.getElementById("youXP").textContent = xp;
    document.getElementById("walleta").textContent = parseFloat(usdt).toFixed(2);
    
    const walletAmountEl = document.getElementById("walletAmount");
    if (walletAmountEl) {
      walletAmountEl.textContent = parseFloat(usdt).toFixed(2);
    }
    
    this.solanaWalletManager.updateRewardConversion();
  }

  renderDailyCheckIns() {
    const grid = document.getElementById("dailyCheckInGrid");
    grid.innerHTML = "";
    const currentDay = this.getCurrentDay();
    this.dailyCheckIns.forEach((day, index) => {
      const dayEl = document.createElement("div");
      dayEl.className = `check-in-day ${this.checkInProgress[index + 1]?.completed ? "completed" : ""} ${
        currentDay === index + 1 && this.lastCheckIn !== new Date().toISOString().split("T")[0] ? "active" : ""
      }`;
      dayEl.innerHTML = `
        <p>Day ${day.day}</p>
        <p class="reward-text">${day.rewards.xp} XP, ${day.rewards.usdt} USDT${day.rewards.nft ? `, ${day.rewards.nft}` : ""}</p>
        ${this.checkInProgress[index + 1]?.completed ? '<i class="fas fa-check"></i>' : ""}
      `;
      grid.appendChild(dayEl);
    });
  }

  renderTasks() {
    const taskList = document.getElementById("taskList");
    taskList.innerHTML = "";
    this.tasks.forEach(task => {
      const li = document.createElement("li");
      li.className = `task-item ${this.taskProgress[task.id]?.completed ? "completed" : ""}`;
      li.innerHTML = `
        <div>
          <strong>${task.name}</strong>
          <p class="task-reward">${task.description} - ${task.rewards.xp} XP, ${task.rewards.usdt} USDT</p>
        </div>
        <button ${this.taskProgress[task.id]?.completed ? "disabled" : ""}>${this.taskProgress[task.id]?.completed ? "Completed" : "Go"}</button>
      `;
      if (!this.taskProgress[task.id]?.completed) {
        li.querySelector("button").addEventListener("click", () => {
          task.action();
          if (task.id !== "share_marsoverse" && task.id !== "stake_usdt") {
            this.completeTask(task.id);
          }
        });
      }
      taskList.appendChild(li);
    });
  }

  renderAdminMissions() {
    const adminMissionList = document.getElementById("adminMissionList");
    adminMissionList.innerHTML = "";
    this.adminMissions.forEach(mission => {
      const li = document.createElement("li");
      li.className = `task-item ${this.adminMissionProgress[mission.id]?.completed ? "completed" : ""}`;
      li.innerHTML = `
        <div>
          <strong>${mission.title}</strong>
          <p class="task-reward">${mission.description} - ${mission.xpReward} XP${mission.usdReward ? `, $${mission.usdReward} USDT` : ""}</p>
        </div>
        <button ${this.adminMissionProgress[mission.id]?.completed ? "disabled" : ""}>${this.adminMissionProgress[mission.id]?.completed ? "Completed" : "Complete"}</button>
      `;
      if (!this.adminMissionProgress[mission.id]?.completed) {
        li.querySelector("button").addEventListener("click", () => {
          this.completeAdminMission(mission.id);
        });
      }
      adminMissionList.appendChild(li);
    });
  }

  setupEventListeners() {
    document.getElementById("claimDailyBtn").addEventListener("click", () => this.claimDailyCheckIn());
    setInterval(() => this.checkDailyEligibility(), 60000);
    window.addEventListener("storage", (e) => {
      if (e.key === "marsoverse_missions") {
        this.loadAdminMissions();
        this.renderAdminMissions();
      }
    });
  }
}

document.addEventListener("DOMContentLoaded", () => {
  window.missionsManager = new MissionsManager(window.honeycomb, window.solanaWalletManager);
});
</script>
<script>
// USDT to SOL Balance Display Plugin
class BalanceDisplay {
  constructor(walletManager) {
    this.walletManager = walletManager;
    this.init();
  }

  init() {
    // First show USDT balance
    this.showUSDT();
    
    // Then try to load SOL balance
    this.loadSOLBalance();
  }

  showUSDT() {
    const usdt = parseFloat(localStorage.getItem('walletBalance') || 0).toFixed(2);
    document.getElementById('walletAmount').textContent = `${usdt} USDT`;
    
    // Optional: Update other USDT display elements
    const usdtElements = document.querySelectorAll('[data-currency="usdt"]');
    usdtElements.forEach(el => {
      el.textContent = usdt;
    });
  }

  async loadSOLBalance() {
    if (!this.walletManager) return;
    
    try {
      // Wait for wallet connection if needed
      await this.walletManager.updateRewardConversion();
      
      // Update display with SOL balance
      const solBalance = document.getElementById('solBalance')?.textContent || '0';
      document.getElementById('walletAmount').textContent = `${solBalance} SOL`;
      
      // Optional: Update other SOL display elements
      const solElements = document.querySelectorAll('[data-currency="sol"]');
      solElements.forEach(el => {
        el.textContent = solBalance;
      });
    } catch (error) {
      console.error('Failed to load SOL balance:', error);
      // Keep showing USDT if SOL load fails
    }
  }
}

// Initialize after DOM and wallet manager are ready
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    new BalanceDisplay(window.solanaWalletManager);
  }, 300);
});
</script>




|||||||||||||||||||||||||||||||||||||||++++++++++++++++++++++++++++++++++++++++++++++**********************


<!-- 
<script>
  class MissionsManager {
  constructor(honeycomb) {
    this.honeycomb = honeycomb;
    this.dailyCheckIns = [
      { day: 1, rewards: { xp: 10, zepta: 0.1, nft: null } },
      { day: 2, rewards: { xp: 15, zepta: 0.2, nft: null } },
      { day: 3, rewards: { xp: 20, zepta: 0.3, nft: null } },
      { day: 4, rewards: { xp: 25, zepta: 0.4, nft: null } },
      { day: 5, rewards: { xp: 30, zepta: 0.5, nft: " NFT" } },
      { day: 6, rewards: { xp: 35, zepta: 0.6, nft: null } },
      { day: 7, rewards: { xp: 40, zepta: 0.7, nft: null } },
      { day: 8, rewards: { xp: 45, zepta: 0.8, nft: null } },
      { day: 9, rewards: { xp: 50, zepta: 0.9, nft: null } },
      { day: 10, rewards: { xp: 100, zepta: 1.0, nft: "NFT" } }
    ];
    this.tasks = [
      {
        id: "share_marsoverse",
        name: "Share MarsoVerse",
        description: "Share MarsoVerse on social media",
        rewards: { xp: 50, zepta: 0.5 },
        action: () => this.shareMarsoVerse()
      },
      {
        id: "visit_github",
        name: "Check Out GitHub",
        description: "Visit the MarsoVerse GitHub",
        rewards: { xp: 30, zepta: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "visit_zepta",
        name: "Visit Zepta Terminal",
        description: "Explore the Zepta Terminal",
        rewards: { xp: 40, zepta: 0.5 },
        action: () => window.location.href = "zeep.html"
      },
      {
        id: "visit_mars",
        name: "Visit Mars Viewer",
        description: "View the Martian landscape",
        rewards: { xp: 40, zepta: 0.5 },
        action: () => window.location.href = "mars-viewer/dist/index.html"
      },
      {
        id: "follow_twitter",
        name: "Follow on Twitter",
        description: "Follow MarsoVerse on Twitter",
        rewards: { xp: 50, zepta: 0.5 },
        action: () => window.open("https://twitter.com/intent/follow?screen_name=MarsoVerse", "_blank")
      },
      {
        id: "star_github",
        name: "Star GitHub Repo",
        description: "Star the MarsoVerse repo on GitHub",
        rewards: { xp: 30, zepta: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary/MarsoVerse", "_blank")
      },
      {
        id: "follow_github",
        name: "Follow on GitHub",
        description: "Follow JaimeCabary on GitHub",
        rewards: { xp: 30, zepta: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "earn_xp",
        name: "Earn 50 XP",
        description: "Complete a mini-game to earn 50 XP",
        rewards: { xp: 50, zepta: 0.5 },
        action: () => window.location.href = "black/blacko.html"
      },
      {
        id: "stake_zepta",
        name: "Stake Zepta Credits",
        description: "Stake Zepta Credits via Honeycomb",
        rewards: { xp: 60, zepta: 0.5 },
        action: () => this.stakeZepta()
      },
      {
        id: "explore_dapp",
        name: "Explore Solana dApp",
        description: "Visit a Solana dApp from the wallet modal",
        rewards: { xp: 40, zepta: 0.5 },
        action: () => document.getElementById("walletIcon").click()
      }
    ];
    this.initialize();
  }

  initialize() {
    this.loadProgress();
    this.renderDailyCheckIns();
    this.renderTasks();
    this.setupEventListeners();
    this.checkDailyEligibility();
  }

  loadProgress() {
    this.checkInProgress = JSON.parse(localStorage.getItem("checkInProgress") || "{}");
    this.taskProgress = JSON.parse(localStorage.getItem("taskProgress") || "{}");
    this.lastCheckIn = localStorage.getItem("lastCheckIn") || null;
  }

  saveProgress() {
    localStorage.setItem("checkInProgress", JSON.stringify(this.checkInProgress));
    localStorage.setItem("taskProgress", JSON.stringify(this.taskProgress));
    localStorage.setItem("lastCheckIn", this.lastCheckIn || new Date().toISOString().split("T")[0]);
  }

  checkDailyEligibility() {
    const today = new Date().toISOString().split("T")[0];
    const claimBtn = document.getElementById("claimDailyBtn");
    if (this.lastCheckIn !== today && this.getCurrentDay() <= this.dailyCheckIns.length) {
      claimBtn.disabled = false;
    } else {
      claimBtn.disabled = true;
    }
  }

  getCurrentDay() {
    return Object.keys(this.checkInProgress).length + 1;
  }

  claimDailyCheckIn() {
    const today = new Date().toISOString().split("T")[0];
    const currentDay = this.getCurrentDay();
    if (currentDay > this.dailyCheckIns.length || this.lastCheckIn === today) return;

    const dayData = this.dailyCheckIns[currentDay - 1];
    this.checkInProgress[currentDay] = { completed: true, date: today };
    this.lastCheckIn = today;

    // Update rewards
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentZepta = parseFloat(localStorage.getItem("walletBalance") || "0");
    localStorage.setItem("playerXP", (currentXP + dayData.rewards.xp).toString());
    localStorage.setItem("walletBalance", (currentZepta + dayData.rewards.zepta).toFixed(2));

    // Log to Honeycomb
    this.honeycomb.completeMission(
      `daily_checkin_day_${currentDay}`,
      dayData.rewards.xp,
      dayData.rewards.zepta
    );
    if (dayData.rewards.nft) {
      this.honeycomb.sendEvent("nft_earned", {
        nft: dayData.rewards.nft,
        day: currentDay
      });
      alert(`🎉 You earned a ${dayData.rewards.nft}!`);
    }

    this.saveProgress();
    this.renderDailyCheckIns();
    this.checkDailyEligibility();
    this.honeycomb.updateGameDisplay();
    document.getElementById("xpSound").play();
  }

  completeTask(taskId) {
    if (this.taskProgress[taskId]?.completed) return;
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) return;

    this.taskProgress[taskId] = { completed: true, date: new Date().toISOString() };
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentZepta = parseFloat(localStorage.getItem("walletBalance") || "0");
    localStorage.setItem("playerXP", (currentXP + task.rewards.xp).toString());
    localStorage.setItem("walletBalance", (currentZepta + task.rewards.zepta).toFixed(2));

    this.honeycomb.completeMission(taskId, task.rewards.xp, task.rewards.zepta);
    this.saveProgress();
    this.renderTasks();
    this.honeycomb.updateGameDisplay();
    document.getElementById("xpSound").play();
  }

  shareMarsoVerse() {
    const shareData = {
      title: "Join MarsoVerse!",
      text: "Explore, build, and survive on Mars in this immersive Web3 game! 🚀",
      url: window.location.origin
    };
    if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
      navigator.share(shareData)
        .then(() => this.completeTask("share_marsoverse"))
        .catch(err => console.warn("Share failed:", err));
    } else {
      // Fallback for desktop or unsupported browsers
      navigator.clipboard.writeText(shareData.url).then(() => {
        alert("🔗 Link copied to clipboard! Share it to complete the task.");
        this.completeTask("share_marsoverse");
      });
    }
  }

  async stakeZepta() {
    if (!window.solanaWalletManager.connectedWallet) {
      alert("⚠️ Please connect your wallet first!");
      document.getElementById("walletIcon").click();
      return;
    }
    try {
      // Simulate Honeycomb staking (replace with actual API call)
      this.honeycomb.sendEvent("stake_zepta", {
        amount: 0.5,
        wallet: window.solanaWalletManager.connectedWallet.publicKey
      });
      this.completeTask("stake_zepta");
      alert("🚀 Successfully staked 0.5 Zepta Credits!");
    } catch (error) {
      console.error("Staking failed:", error);
      alert("❌ Staking failed. Try again later.");
    }
  }

  renderDailyCheckIns() {
    const grid = document.getElementById("dailyCheckInGrid");
    grid.innerHTML = "";
    const currentDay = this.getCurrentDay();
    this.dailyCheckIns.forEach((day, index) => {
      const dayEl = document.createElement("div");
      dayEl.className = `check-in-day ${this.checkInProgress[index + 1]?.completed ? "completed" : ""} ${
        currentDay === index + 1 && this.lastCheckIn !== new Date().toISOString().split("T")[0] ? "active" : ""
      }`;
      dayEl.innerHTML = `
        <p>Day ${day.day}</p>
        <p class="reward-text">${day.rewards.xp} XP, ${day.rewards.zepta} Zepta${day.rewards.nft ? `, ${day.rewards.nft}` : ""}</p>
        ${this.checkInProgress[index + 1]?.completed ? '<i class="fas fa-check"></i>' : ""}
      `;
      grid.appendChild(dayEl);
    });
  }

  renderTasks() {
    const taskList = document.getElementById("taskList");
    taskList.innerHTML = "";
    this.tasks.forEach(task => {
      const li = document.createElement("li");
      li.className = `task-item ${this.taskProgress[task.id]?.completed ? "completed" : ""}`;
      li.innerHTML = `
        <div>
          <strong>${task.name}</strong>
          <p class="task-reward">${task.description} - ${task.rewards.xp} XP, ${task.rewards.zepta} Zepta</p>
        </div>
        <button ${this.taskProgress[task.id]?.completed ? "disabled" : ""}>${this.taskProgress[task.id]?.completed ? "Completed" : "Go"}</button>
      `;
      if (!this.taskProgress[task.id]?.completed) {
        li.querySelector("button").addEventListener("click", () => {
          task.action();
          if (task.id !== "share_marsoverse" && task.id !== "stake_zepta") {
            this.completeTask(task.id);
          }
        });
      }
      taskList.appendChild(li);
    });
  }

  setupEventListeners() {
    document.getElementById("claimDailyBtn").addEventListener("click", () => this.claimDailyCheckIn());
    setInterval(() => this.checkDailyEligibility(), 60000); // Check every minute
  }
}

// Initialize MissionsManager after Honeycomb
document.addEventListener("DOMContentLoaded", () => {
  window.missionsManager = new MissionsManager(window.honeycomb);
});
</script> -->

<!-- <script>
// 🎯 Missions Manager
class MissionsManager {
  constructor(honeycomb, solanaWalletManager) {
    this.honeycomb = honeycomb;
    this.solanaWalletManager = solanaWalletManager;
    this.dailyCheckIns = [
      { day: 1, rewards: { xp: 10, usdt: 0.1, nft: null } },
      { day: 2, rewards: { xp: 15, usdt: 0.2, nft: null } },
      { day: 3, rewards: { xp: 20, usdt: 0.3, nft: null } },
      { day: 4, rewards: { xp: 25, usdt: 0.4, nft: null } },
      { day: 5, rewards: { xp: 30, usdt: 0.5, nft: "Rover NFT" } },
      { day: 6, rewards: { xp: 35, usdt: 0.6, nft: null } },
      { day: 7, rewards: { xp: 40, usdt: 0.7, nft: null } },
      { day: 8, rewards: { xp: 45, usdt: 0.8, nft: null } },
      { day: 9, rewards: { xp: 50, usdt: 0.9, nft: null } },
      { day: 10, rewards: { xp: 100, usdt: 1.0, nft: "Rare NFT" } }
    ];
    this.tasks = [
      {
        id: "share_marsoverse",
        name: "Share MarsoVerse",
        description: "Share MarsoVerse on social media",
        rewards: { xp: 50, usdt: 0.5 },
        action: () => this.shareMarsoVerse()
      },
      {
        id: "visit_github",
        name: "Check Out GitHub",
        description: "Visit the MarsoVerse GitHub",
        rewards: { xp: 30, usdt: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "visit_zepta",
        name: "Visit Zepta Terminal",
        description: "Explore the Zepta Terminal",
        rewards: { xp: 40, usdt: 0.5 },
        action: () => window.location.href = "zeep.html"
      },
      {
        id: "visit_mars",
        name: "Visit Mars Viewer",
        description: "View the Martian landscape",
        rewards: { xp: 40, usdt: 0.5 },
        action: () => window.location.href = "mars-viewer/dist/index.html"
      },
      {
        id: "follow_twitter",
        name: "Follow on Twitter",
        description: "Follow MarsoVerse on Twitter",
        rewards: { xp: 50, usdt: 0.5 },
        action: () => window.open("https://twitter.com/intent/follow?screen_name=MarsoVerse", "_blank")
      },
      {
        id: "star_github",
        name: "Star GitHub Repo",
        description: "Star the MarsoVerse repo on GitHub",
        rewards: { xp: 30, usdt: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary/MarsoVerse", "_blank")
      },
      {
        id: "follow_github",
        name: "Follow on GitHub",
        description: "Follow JaimeCabary on GitHub",
        rewards: { xp: 30, usdt: 0.5 },
        action: () => window.open("https://github.com/JaimeCabary", "_blank")
      },
      {
        id: "earn_xp",
        name: "Earn 50 XP",
        description: "Complete a mini-game to earn 50 XP",
        rewards: { xp: 50, usdt: 0.5 },
        action: () => window.location.href = "black/blacko.html"
      },
      {
        id: "stake_usdt",
        name: "Stake USDT",
        description: "Stake USDT via Honeycomb",
        rewards: { xp: 60, usdt: 0.5 },
        action: () => this.stakeUSDT()
      },
      {
        id: "explore_dapp",
        name: "Explore Solana dApp",
        description: "Visit a Solana dApp from the wallet modal",
        rewards: { xp: 40, usdt: 0.5 },
        action: () => document.getElementById("walletIcon").click()
      }
    ];
    this.initialize();
  }

  initialize() {
    this.loadProgress();
    this.loadAdminMissions();
    this.renderDailyCheckIns();
    this.renderTasks();
    this.renderAdminMissions();
    this.setupEventListeners();
    this.checkDailyEligibility();
  }

  loadProgress() {
    this.checkInProgress = JSON.parse(localStorage.getItem("checkInProgress") || "{}");
    this.taskProgress = JSON.parse(localStorage.getItem("taskProgress") || "{}");
    this.adminMissionProgress = JSON.parse(localStorage.getItem("adminMissionProgress") || "{}");
    this.lastCheckIn = localStorage.getItem("lastCheckIn") || null;
  }

  loadAdminMissions() {
    this.adminMissions = JSON.parse(localStorage.getItem("marsoverse_missions") || "[]");
    // Sort by createdAt (newest first)
    this.adminMissions.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  }

  saveProgress() {
    localStorage.setItem("checkInProgress", JSON.stringify(this.checkInProgress));
    localStorage.setItem("taskProgress", JSON.stringify(this.taskProgress));
    localStorage.setItem("adminMissionProgress", JSON.stringify(this.adminMissionProgress));
    localStorage.setItem("lastCheckIn", this.lastCheckIn || new Date().toISOString().split("T")[0]);
  }

  checkDailyEligibility() {
    const today = new Date().toISOString().split("T")[0];
    const claimBtn = document.getElementById("claimDailyBtn");
    if (this.lastCheckIn !== today && this.getCurrentDay() <= this.dailyCheckIns.length) {
      claimBtn.disabled = false;
    } else {
      claimBtn.disabled = true;
    }
  }

  getCurrentDay() {
    return Object.keys(this.checkInProgress).length + 1;
  }

  claimDailyCheckIn() {
    const today = new Date().toISOString().split("T")[0];
    const currentDay = this.getCurrentDay();
    if (currentDay > this.dailyCheckIns.length || this.lastCheckIn === today) return;

    const dayData = this.dailyCheckIns[currentDay - 1];
    this.checkInProgress[currentDay] = { completed: true, date: today };
    this.lastCheckIn = today;

    // Update rewards
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    localStorage.setItem("playerXP", (currentXP + dayData.rewards.xp).toString());
    localStorage.setItem("walletBalance", (currentUSDT + dayData.rewards.usdt).toFixed(2));

    // Update SOL conversion
    this.solanaWalletManager.updateRewardConversion();

    // Log to Honeycomb
    this.honeycomb.completeMission(
      `daily_checkin_day_${currentDay}`,
      dayData.rewards.xp,
      dayData.rewards.usdt
    );
    if (dayData.rewards.nft) {
      this.honeycomb.sendEvent("nft_earned", {
        nft: dayData.rewards.nft,
        day: currentDay
      });
      alert(`🎉 You earned a ${dayData.rewards.nft}!`);
    }

    this.saveProgress();
    this.renderDailyCheckIns();
    this.checkDailyEligibility();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  completeTask(taskId) {
    if (this.taskProgress[taskId]?.completed) return;
    const task = this.tasks.find(t => t.id === taskId);
    if (!task) return;

    this.taskProgress[taskId] = { completed: true, date: new Date().toISOString() };
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    localStorage.setItem("playerXP", (currentXP + task.rewards.xp).toString());
    localStorage.setItem("walletBalance", (currentUSDT + task.rewards.usdt).toFixed(2));

    this.solanaWalletManager.updateRewardConversion();
    this.honeycomb.completeMission(taskId, task.rewards.xp, task.rewards.usdt);
    this.saveProgress();
    this.renderTasks();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  completeAdminMission(missionId) {
    if (this.adminMissionProgress[missionId]?.completed) return;
    const mission = this.adminMissions.find(m => m.id === missionId);
    if (!mission) return;

    this.adminMissionProgress[missionId] = { completed: true, date: new Date().toISOString() };
    const currentXP = parseInt(localStorage.getItem("playerXP") || "0");
    const currentUSDT = parseFloat(localStorage.getItem("walletBalance") || "0");
    localStorage.setItem("playerXP", (currentXP + mission.xpReward).toString());
    localStorage.setItem("walletBalance", (currentUSDT + (mission.usdReward || 0)).toFixed(2));

    this.solanaWalletManager.updateRewardConversion();
    this.honeycomb.completeMission(missionId, mission.xpReward, mission.usdReward || 0);

    // Show popup for completion
    this.showMissionPopup(mission);

    this.saveProgress();
    this.renderAdminMissions();
    this.updateGameDisplay();
    document.getElementById("xpSound")?.play();
  }

  shareMarsoVerse() {
    const shareData = {
      title: "Join MarsoVerse!",
      text: "Explore, build, and survive on Mars in this immersive Web3 game! 🚀",
      url: window.location.origin
    };
    if (navigator.share && navigator.canShare && navigator.canShare(shareData)) {
      navigator.share(shareData)
        .then(() => this.completeTask("share_marsoverse"))
        .catch(err => console.warn("Share failed:", err));
    } else {
      navigator.clipboard.writeText(shareData.url).then(() => {
        alert("🔗 Link copied to clipboard! Share it to complete the task.");
        this.completeTask("share_marsoverse");
      });
    }
  }

  async stakeUSDT() {
    if (!this.solanaWalletManager.connectedWallet) {
      alert("⚠️ Please connect your wallet first!");
      document.getElementById("walletIcon").click();
      return;
    }
    try {
      // Simulate Honeycomb staking
      this.honeycomb.sendEvent("stake_usdt", {
        amount: 0.5,
        wallet: this.solanaWalletManager.connectedWallet.publicKey
      });
      this.completeTask("stake_usdt");
      alert("🚀 Successfully staked 0.5 USDT!");
    } catch (error) {
      console.error("Staking failed:", error);
      alert("❌ Staking failed. Try again later.");
    }
  }

  showMissionPopup(mission) {
    const popup = document.createElement("div");
    popup.className = "reward-overlay";
    popup.innerHTML = `
      <div class="reward-box choice">
        <h5>Mission Completed: ${mission.title}</h5>
        <p>Rewards: ${mission.xpReward} XP${mission.usdReward ? `, $${mission.usdReward} USDT` : ""}</p>
        <button onclick="this.parentElement.parentElement.remove()">Close</button>
      </div>
    `;
    document.body.appendChild(popup);
    setTimeout(() => {
      popup.classList.add("hidden");
      setTimeout(() => popup.remove(), 300);
    }, 3000);
  }

  updateGameDisplay() {
    const xp = localStorage.getItem("playerXP") || "0";
    const usdt = localStorage.getItem("walletBalance") || "0";
    document.getElementById("playerXP").textContent = `XP: ${xp}`;
    document.getElementById("youXP").textContent = xp;
    document.getElementById("walletAmount").textContent = usdt;
    document.getElementById("walleta").textContent = usdt;
  }

  renderDailyCheckIns() {
    const grid = document.getElementById("dailyCheckInGrid");
    grid.innerHTML = "";
    const currentDay = this.getCurrentDay();
    this.dailyCheckIns.forEach((day, index) => {
      const dayEl = document.createElement("div");
      dayEl.className = `check-in-day ${this.checkInProgress[index + 1]?.completed ? "completed" : ""} ${
        currentDay === index + 1 && this.lastCheckIn !== new Date().toISOString().split("T")[0] ? "active" : ""
      }`;
      dayEl.innerHTML = `
        <p>Day ${day.day}</p>
        <p class="reward-text">${day.rewards.xp} XP, ${day.rewards.usdt} USDT${day.rewards.nft ? `, ${day.rewards.nft}` : ""}</p>
        ${this.checkInProgress[index + 1]?.completed ? '<i class="fas fa-check"></i>' : ""}
      `;
      grid.appendChild(dayEl);
    });
  }

  renderTasks() {
    const taskList = document.getElementById("taskList");
    taskList.innerHTML = "";
    this.tasks.forEach(task => {
      const li = document.createElement("li");
      li.className = `task-item ${this.taskProgress[task.id]?.completed ? "completed" : ""}`;
      li.innerHTML = `
        <div>
          <strong>${task.name}</strong>
          <p class="task-reward">${task.description} - ${task.rewards.xp} XP, ${task.rewards.usdt} USDT</p>
        </div>
        <button ${this.taskProgress[task.id]?.completed ? "disabled" : ""}>${this.taskProgress[task.id]?.completed ? "Completed" : "Go"}</button>
      `;
      if (!this.taskProgress[task.id]?.completed) {
        li.querySelector("button").addEventListener("click", () => {
          task.action();
          if (task.id !== "share_marsoverse" && task.id !== "stake_usdt") {
            this.completeTask(task.id);
          }
        });
      }
      taskList.appendChild(li);
    });
  }

  renderAdminMissions() {
    const adminMissionList = document.getElementById("adminMissionList");
    adminMissionList.innerHTML = "";
    this.adminMissions.forEach(mission => {
      const li = document.createElement("li");
      li.className = `task-item ${this.adminMissionProgress[mission.id]?.completed ? "completed" : ""}`;
      li.innerHTML = `
        <div>
          <strong>${mission.title}</strong>
          <p class="task-reward">${mission.description} - ${mission.xpReward} XP${mission.usdReward ? `, $${mission.usdReward} USDT` : ""}</p>
        </div>
        <button ${this.adminMissionProgress[mission.id]?.completed ? "disabled" : ""}>${this.adminMissionProgress[mission.id]?.completed ? "Completed" : "Complete"}</button>
      `;
      if (!this.adminMissionProgress[mission.id]?.completed) {
        li.querySelector("button").addEventListener("click", () => {
          this.completeAdminMission(mission.id);
        });
      }
      adminMissionList.appendChild(li);
    });
  }

  setupEventListeners() {
    document.getElementById("claimDailyBtn").addEventListener("click", () => this.claimDailyCheckIn());
    setInterval(() => this.checkDailyEligibility(), 60000); // Check every minute
    // Listen for storage changes to refresh missions
    window.addEventListener("storage", (e) => {
      if (e.key === "marsoverse_missions") {
        this.loadAdminMissions();
        this.renderAdminMissions();
      }
    });
  }
}

// Initialize MissionsManager after Honeycomb and SolanaWalletManager
document.addEventListener("DOMContentLoaded", () => {
  window.missionsManager = new MissionsManager(window.honeycomb, window.solanaWalletManager);
});
</script> -->
<!-- <script>

  const toggle = document.getElementById("themeToggle");
  const body = document.body;

  // Set initial theme based on checkbox state
  if (toggle.checked) {
    body.classList.add("morning");
    body.classList.remove("night");
  } else {
    body.classList.add("night");
    body.classList.remove("morning");
  }

  // Listen for changes and switch themes
  toggle.addEventListener("change", () => {
    if (toggle.checked) {
      // Morning 🌞
      body.classList.remove("night");
      body.classList.add("morning");
    } else {
      // Night 🌙
      body.classList.remove("morning");
      body.classList.add("night");
    }
  });


</script> -->


*************************************************************

const BACKUP_ENDPOINT = '/api/backup';
const PLAYER_ID_KEY = 'currentPlayerId';
const WALLET_ADDRESS_KEY = 'walletAddress';

// List of all localStorage keys used in your project
const LOCAL_STORAGE_KEYS = [
  'marsoverse_players',
  'marsoverse_missions',
  'playerName',
  'playerAge',
  'playerXP',
  'companionName',
  'cyborgName',
  'walletBalance',
  'walletAddress',
  'walletName',
  'playerAvatar',
  'playerEmail',
  'rewardUSD',
  'lastSolUsd',
  'rewardSOL',
  'honeycomb_events',
  'checkInProgress',
  'taskProgress',
  'lastCheckIn',
  'adminMissionProgress',
  'marsoverse_game',
  'marsoverse_zepta_game',
  'currentPlayerId',
  'marsoverse_purchases',
  'marsoverse_admin_log',
  'zeptaGame',
  'theme',
  'marsVolume',
  'highscore',
  'marsXP',
  'marsUSDT',
  'marsHighXP',
  'marsHighScore',
  'rewardShown',
  'playerFirstName',
  'gender',
  'marsoverseState'
];

// Backup all localStorage data
async function backupGameData() {
  try {
    const playerId = localStorage.getItem(PLAYER_ID_KEY) || localStorage.getItem(WALLET_ADDRESS_KEY) || `anonymous_${Date.now()}`;
    const backupData = {};

    // Collect all relevant localStorage data
    LOCAL_STORAGE_KEYS.forEach(key => {
      const value = localStorage.getItem(key);
      if (value !== null) {
        backupData[key] = value;
      }
    });

    // Try to send to server
    try {
      const response = await fetch(BACKUP_ENDPOINT, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playerId, data: backupData })
      });

      if (!response.ok) throw new Error('Server backup failed');
      console.log('Backup saved to server');
      return true;
    } catch (serverError) {
      console.warn('Server backup failed, offering file download:', serverError);
      // Fallback to file download
      const blob = new Blob([JSON.stringify(backupData, null, 2)], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `marsoverse_backup_${playerId}.json`;
      a.click();
      URL.revokeObjectURL(url);
      return false;
    }
  } catch (error) {
    console.error('Backup failed:', error);
    return false;
  }
}

// Restore game data from server or file
async function restoreGameData() {
  try {
    const playerId = localStorage.getItem(PLAYER_ID_KEY) || localStorage.getItem(WALLET_ADDRESS_KEY) || prompt('Enter your player ID or wallet address:');
    if (!playerId) throw new Error('No player ID provided');

    // Try to fetch from server
    try {
      const response = await fetch(`${BACKUP_ENDPOINT}/${playerId}`);
      if (!response.ok) throw new Error('Server restore failed');
      const backupData = await response.json();

      // Restore to localStorage
      Object.entries(backupData).forEach(([key, value]) => {
        localStorage.setItem(key, value);
      });
      console.log('Game data restored from server');
      alert('Game data restored successfully!');
      return true;
    } catch (serverError) {
      console.warn('Server restore failed, prompting file upload:', serverError);
      // Fallback to file upload
      const input = document.createElement('input');
      input.type = 'file';
      input.accept = '.json';
      input.onchange = (event) => {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            try {
              const backupData = JSON.parse(e.target.result);
              Object.entries(backupData).forEach(([key, value]) => {
                localStorage.setItem(key, value);
              });
              console.log('Game data restored from file');
              alert('Game data restored successfully!');
            } catch (error) {
              console.error('File restore failed:', error);
              alert('Failed to restore game data from file.');
            }
          };
          reader.readAsText(file);
        }
      };
      input.click();
      return false;
    }
  } catch (error) {
    console.error('Restore failed:', error);
    alert('Failed to restore game data.');
    return false;
  }
}

// Delete backup when resetting
async function deleteBackup() {
  try {
    const playerId = localStorage.getItem(PLAYER_ID_KEY) || localStorage.getItem(WALLET_ADDRESS_KEY);
    if (playerId) {
      const response = await fetch(`${BACKUP_ENDPOINT}/${playerId}`, {
        method: 'DELETE'
      });
      if (!response.ok) throw new Error('Server backup deletion failed');
      console.log('Server backup deleted');
    }
  } catch (error) {
    console.warn('Server backup deletion failed:', error);
    // No action needed for file-based backup as it’s user-managed
  }
}

// Expose functions to global scope for use in other scripts
window.backupGameData = backupGameData;
window.restoreGameData = restoreGameData;
window.deleteBackup = deleteBackup;


//??????????????????????????????????????????????//////??????????????????????????????????


const express = require('express');
const cors = require('cors');
const path = require('path');
const { Connection, PublicKey, Transaction } = require('@solana/web3.js');
const { createEdgeClient, sendClientTransactions } = require('@honeycomb-protocol/edge-client');

const app = express();

// Enable CORS
app.use(cors({ 
  origin: ['https://marsoverse.netlify.app', 'https://marsoverse.onrender.com', 'http://localhost:3000'] 
}));

// Parse JSON bodies
app.use(express.json());

// Serve static files from the root directory
app.use(express.static(path.join(__dirname)));

// Serve index.html at the root route
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// Serve marzo.html
app.get('/marzo.html', (req, res) => {
  res.sendFile(path.join(__dirname, 'marzo.html'));
});

const connection = new Connection('https://rpc.main.honeycombprotocol.com', 'confirmed');
const client = createEdgeClient('https://edge.main.honeycombprotocol.com/', true);

let projectAddress = null;

// In-memory storage for backups (replace with database in production)
const backups = new Map();

// Backup endpoint
app.post('/api/backup', (req, res) => {
  const { playerId, data } = req.body;
  if (!playerId || !data) {
    return res.status(400).json({ error: 'Missing playerId or data' });
  }
  backups.set(playerId, data);
  res.json({ success: true });
});

// Restore endpoint
app.get('/api/backup/:playerId', (req, res) => {
  const { playerId } = req.params;
  const data = backups.get(playerId);
  if (!data) {
    return res.status(404).json({ error: 'Backup not found' });
  }
  res.json(data);
});

// Delete backup endpoint
app.delete('/api/backup/:playerId', (req, res) => {
  const { playerId } = req.params;
  backups.delete(playerId);
  res.json({ success: true });
});

app.post('/api/create-project', async (req, res) => {
  try {
    const { authority } = req.body;
    if (!authority) {
      return res.status(400).json({ error: 'Authority public key required' });
    }

    const response = await client.createCreateProjectTransaction({
      name: 'MarsoVerse',
      authority,
      payer: authority,
      profileDataConfig: {
        achievements: ['First Steps', 'Mission Master'],
        customDataFields: ['Level', 'Friends', 'Age', 'Gender', 'Companion', 'Cyborg', 'XP', 'Balance'],
      },
    });

    const { project, tx } = response.createCreateProjectTransaction;
    projectAddress = project;
    res.json({ transaction: Buffer.from(tx.serialize()).toString('base64'), project });
  } catch (error) {
    console.error('Project creation failed:', error);
    res.status(500).json({ error: 'Failed to create project' });
  }
});

app.post('/api/create-profile', async (req, res) => {
  try {
    const { authority, playerData } = req.body;
    if (!authority || !playerData || !projectAddress) {
      return res.status(400).json({ error: 'Missing required fields or project not created' });
    }

    const response = await client.createCreateProfileTransaction({
      project: projectAddress,
      authority,
      payer: authority,
      profileData: {
        name: playerData.name,
        customData: [
          { key: 'Age', value: playerData.age.toString() },
          { key: 'Gender', value: playerData.gender },
          { key: 'Companion', value: playerData.companion },
          { key: 'Cyborg', value: playerData.cyborg },
          { key: 'XP', value: playerData.xp.toString() },
          { key: 'Balance', value: playerData.balance.toString() },
        ],
      },
    });

    const { profile, tx } = response.createCreateProfileTransaction;
    res.json({ transaction: Buffer.from(tx.serialize()).toString('base64'), profile });
  } catch (error) {
    console.error('Profile creation failed:', error);
    res.status(500).json({ error: 'Failed to create profile' });
  }
});

app.post('/api/send-transaction', async (req, res) => {
  try {
    const { transaction } = req.body;
    const tx = Transaction.from(Buffer.from(transaction, 'base64'));
    const signature = await connection.sendRawTransaction(tx.serialize());
    await connection.confirmTransaction(signature);
    res.json({ success: true, signature });
  } catch (error) {
    console.error('Transaction failed:', error);
    res.status(500).json({ error: 'Failed to send transaction' });
  }
});

app.get('/api/profiles', async (req, res) => {
  try {
    if (!projectAddress) {
      return res.status(400).json({ error: 'Project not created' });
    }
    // Placeholder: Fetch real profiles from Honeycomb in production
    res.json({
      profiles: JSON.parse(localStorage.getItem('marsoverse_players') || '[]').map(player => ({
        name: player.name,
        xp: player.xp,
        address: player.id,
        age: player.age,
        gender: player.gender,
        companion: player.companion,
        cyborg: player.cyborg,
        balance: player.wallet
      }))
    });
  } catch (error) {
    console.error('Failed to fetch profiles:', error);
    res.status(500).json({ error: 'Failed to fetch profiles' });
  }
});

app.post('/api/update-profile', async (req, res) => {
  try {
    const { authority, profile, updates } = req.body; // updates = [{key: 'XP', value: '100'}, {key: 'Balance', value: '1.5'}]
    if (!authority || !profile || !updates || !Array.isArray(updates)) {
      return res.status(400).json({ error: 'Missing authority, profile, or updates array' });
    }

    const response = await client.createUpdatePlatformDataTransaction({
      profile,
      authority,
      payer: authority,
      customData: updates, // Array of {key, value}
    });

    const tx = response.createUpdatePlatformDataTransaction;
    res.json({ transaction: Buffer.from(tx.serialize()).toString('base64') });
  } catch (error) {
    console.error('Profile update failed:', error);
    res.status(500).json({ error: 'Failed to update profile' });
  }
});

// Insert /api/events endpoint here
// In-memory event storage (replace with database in production)
const events = [];

// Event logging endpoint
app.post('/api/events', (req, res) => {
  const { type, data, game, playerId, walletAddress } = req.body;
  if (!type || !game || !playerId) {
    return res.status(400).json({ error: 'Missing required fields' });
  }
  const event = {
    timestamp: new Date().toISOString(),
    type,
    data,
    game,
    playerId,
    walletAddress
  };
  events.push(event);
  console.log('Event logged:', event);
  res.json({ success: true });
});

// // Health check endpoint
// app.get('/health', (req, res) => {
//   res.json({ status: 'Server is running', timestamp: new Date().toISOString() });
// });

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({ status: 'Server is running', timestamp: new Date().toISOString() });
});

// Catch-all handler for SPA routing
app.get('*', (req, res) => {
  // If it's an API route that doesn't exist, return 404
  if (req.path.startsWith('/api/')) {
    return res.status(404).json({ error: 'API endpoint not found' });
  }
  
  // For all other routes, serve index.html (for client-side routing)
  res.sendFile(path.join(__dirname, 'index.html'));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`🚀 MarsoVerse Server running on http://localhost:${PORT}`);
  console.log(`📁 Serving static files from: ${__dirname}`);
  console.log(`🏠 Main page: http://localhost:${PORT}/`);
  console.log(`🎮 Game page: http://localhost:${PORT}/marzo.html`);
});



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::++++++++++++++++++


  // 🔊 Audio Control
  const music = document.getElementById("marsostory");
  const sfxToggles = {
    music: document.getElementById("musicToggle"),
    mute: document.getElementById("muteToggle"),
    sfx: document.getElementById("sfxToggle"),
  };

  if (sfxToggles.music?.checked) music.play();

  sfxToggles.music?.addEventListener("change", () => {
    sfxToggles.music.checked ? music.play() : music.pause();
  });

  sfxToggles.mute?.addEventListener("change", () => {
    const muted = sfxToggles.mute.checked;
    document.querySelectorAll("audio").forEach((audio) => {
      audio.muted = muted;
    });
  });

  function playSound(id) {
    const el = document.getElementById(id);
    if (el && sfxToggles.sfx?.checked) {
      el.currentTime = 0;
      el.play();
    }
  }


  ..................................
  <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>Mars Poker ♠️</title>
  <link rel="icon" href="screens/poke.png" type="image/x-icon" />
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <style>
      body {
  margin: 0;
  padding: 0;
  font-family: 'Orbitron', sans-serif;
  background-image: url('pokertable.png');
  background-position: center center;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  background-attachment: fixed;
  color: #fff;
}
/* html, body {
  height: 100%;
  overflow: hidden; /* prevent scroll on all platforms */
/* }  */



section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  padding: 20px;
  overflow: auto; /* important for mobile and long content */
}

    #game {
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  box-sizing: border-box;
  min-height: 100vh;
}
    h1 {
      margin-bottom: 10px;
      color: #FFF4F0;
      font-size: 2rem;
      text-shadow: 0 0 10px #000000AA;
    }

    #dealer-area, #player-area, #table-area {
      text-align: center;
      margin: 10px 0;
    }

    .cards {
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .card {
      width: 90px;
      height: 125px;
      background-size: cover;
      border-radius: 8px;
    }

    #controls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin: 20px 0;
      justify-content: center;
    }

    button {
      padding: 10px 18px;
      font-size: 1rem;
      background-color: #FF4B00;
      border: none;
      border-radius: 6px;
      color: white;
      cursor: pointer;
      box-shadow: 0 0 8px #FF4B00aa;
    }

    #status {
      font-size: 1.1rem;
      margin-top: 10px;
      color: #ffd;
      text-shadow: 0 0 4px #ffa;
    }

    #balance {
      font-size: 1rem;
      margin-top: 5px;
    }

    a.back-home {
      color: #ffb;
      text-decoration: none;
      font-size: 0.9rem;
      margin-top: 10px;
    }
    #overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75); /* You can go higher: 0.85 for darker */
  z-index: 0;
  pointer-events: none;
}
#rules-scroll {
  position: relative;
  z-index: 10; /* Make it higher than overlay */
  background: url('mars-scroll-bg.png') no-repeat center center;
  background-size: cover;
  background-color: #150505;
  padding: 50px 20px 30px;
  text-align: center;
  color: #ffd6b8;
  font-family: 'Orbitron', sans-serif;
  box-shadow: inset 0 0 20px #FF4B00aa;
}
.scroll-container {
  max-width: 680px;
  margin: auto;
  background: rgba(24, 8, 2, 0.75);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 25px 20px;
  box-shadow: 0 0 18px #ff440088, 0 0 12px #ff660044 inset;
  backdrop-filter: blur(3px);
}

#rules-scroll h2 {
  font-size: 1.7rem;
  margin-bottom: 16px;
  color: #FFA94A;
  text-shadow: 0 0 4px #FF7F50, 0 0 10px #ff6600aa;
}

#rules-scroll p {
  font-size: 1rem;
  line-height: 1.8;
  color: #ffdbb2;
  text-shadow: 0 0 6px #441a00;
}

.scroll-actions {
  margin-top: 20px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
}

.scroll-actions button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
  transition: background 0.3s ease;
}

.scroll-actions button:hover {
  background-color: #FF6B20;
}

.back-btn {
  color: #ffcc99;
  text-decoration: none;
  font-size: 0.95rem;
  text-shadow: 0 0 3px #ff7f50;
}
#rules-slide {
  position: relative;
  z-index: 15;
  background: rgba(1, 0, 0, 0.391); /* semi-transparent black over pokertable */
color: #ffd6b8;
  padding: 40px 20px;
  font-family: 'Orbitron', sans-serif;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

#slide-box {
  background: rgba(24, 8, 2, 0.54);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 30px 25px;
  max-width: 650px;
  width: 100%;
  text-align: center;
  box-shadow: 0 0 20px #ff5500aa;
  backdrop-filter: blur(4px);
}

#slide-title {
  color: #FFA94A;
  font-size: 1.8rem;
  margin-bottom: 20px;
}

#slide-text {
  font-size: 1.1rem;
  line-height: 1.8;
  color: #ffdbb2;
  margin-bottom: 25px;
}

.slide-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
}

.slide-actions button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 12px 22px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
}

.slide-actions button:hover {
  background-color: #FF6B20;
}
#overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.85); /* Darker overlay */
  z-index: 0;
  pointer-events: none;
}


.back-btn {
  color: #ffcc99;
  text-decoration: none;
  font-size: 0.95rem;
  text-shadow: 0 0 3px #ff7f50;
}
#resultModal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(rgba(0, 0, 0, 0.85), rgba(15, 5, 5, 0.95));
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
}

#resultBox {
  background: rgba(24, 8, 2, 0.8);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 30px 25px;
  max-width: 400px;
  width: 90%;
  text-align: center;
  box-shadow: 0 0 20px #ff5500aa;
  backdrop-filter: blur(4px);
  color: #ffdbb2;
  font-family: 'Orbitron', sans-serif;
}

#resultBox h2 {
  color: #FFA94A;
  margin-bottom: 15px;
}

#resultBox p {
  font-size: 1.1rem;
  line-height: 1.6;
  margin-bottom: 20px;
}

#resultBox button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 12px 24px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
}

#resultBox button:hover {
  background-color: #FF6B20;
}

  </style>
</head>
<body>
  <div id="overlay"></div> <!-- Keep it here -->
<section id="rules-slide" class="slide-container">
  
  <div id="slide-box">
    <h2 id="slide-title">📜 Welcome to Mars Poker</h2>
    <p id="slide-text">
      You’ve landed on a hostile world, but one tradition keeps everyone sharp: <strong>Mars Poker</strong>.<br><br>
      It’s you vs Cubeco — and every card you play earns you power on Mars.
    </p>
    <div class="slide-actions">
      <button id="next-btn" onclick="nextSlide()">Next</button>
      <a href="#" class="back-btn" onclick="showGame(); return false;">← Skip Rules</a>
    </div>
  </div>
</section>
 <section id="game" style="display: none;">
    <h1>🪐Marsoverse Poker ♠️</h1>

   <div id="balance">
  XP: <span id="xpCount">0</span> |
  Wallet: <span id="walletCount">0.00</span> USDT |
  Highest XP: <span id="highXP">0</span>
</div>


    <div id="player-area">
      <h3>Your Hand</h3>
      <div id="playerHand" class="cards"></div>
    </div>

    <div id="table-area">
      <h3>Community Cards</h3>
      <div id="communityCards" class="cards"></div>
    </div>

    <div id="dealer-area">
      <h3>Cubeco's Hand</h3>
      <div id="botHand" class="cards"></div>
    </div>

    <div id="status"></div>

    <div id="controls">
      <button onclick="dealCards()">Deal</button>
      <button onclick="reveal()">Reveal</button>
      <button onclick="restart()">Restart</button>
    </div>

    <a href="/marzo.html" class="back-home">← Return to Mars</a>
 </section>
 <div id="resultModal" style="display: none;">
  <div id="resultBox">
    <h2 id="resultTitle">Result</h2>
    <p id="resultMessage">You win!</p>
    <button onclick="closeResult()">OK</button>
  </div>
</div>
   <!-- 🎵 Full Sound Stack -->
  <audio id="introSound" src="/sounds/intro.mp3" preload="auto" loop></audio>
  <audio id="marsostory" src="/sounds/marsostory.mp3" preload="auto" loop></audio>
  <audio id="afterstorySound" src="/sounds/afterstory.mp3" preload="auto"></audio>
  <audio id="clickSound" src="/sounds/click.mp3" preload="auto"></audio>
  <audio id="sparkleSound" src="/sounds/sparkle.mp3" preload="auto"></audio>
  <audio id="levelupSound" src="/sounds/levelup.mp3" preload="auto"></audio>
  <audio id="xpSound" src="/sounds/xp.mp3" preload="auto"></audio>
  <audio id="popSound" src="/sounds/pop.mp3" preload="auto"></audio>
  <audio id="bondSound" src="/sounds/bond.mp3" preload="auto"></audio>
  <audio id="birthSound" src="/sounds/birthsound.mp3" preload="auto"></audio>
  <audio id="explosionSound" src="/sounds/explosion.mp3" preload="auto"></audio>
  <audio id="riserSound" src="/sounds/riser-hit-sfx-001-289802.mp3" preload="auto"></audio>
  <audio id="swooshSound" src="/sounds/swoosh-sound-effect-for-fight-scenes-or-transitions-2-149890.mp3" preload="auto"></audio>
  <audio id="typingSound" src="/sounds/typing.mp3" preload="auto"></audio>
  <audio id="galaxySound" src="/sounds/galaxy.mp3" preload="auto"></audio>
  <audio id="astroSound" src="/sounds/asteroid.mp3" preload="auto"></audio>
  <!-- 🎶 Newly Added Sounds -->
  <audio id="babyLaughSound" src="/sounds/babylaugh.mp3" preload="auto"></audio>
  <audio id="babyTalkSound" src="/sounds/babytalk.mp3" preload="auto"></audio>
  <audio id="cryingBabySound" src="/sounds/crying-baby-320170.mp3" preload="auto"></audio>
  <audio id="casinoSound" src="/sounds/casino.wav" preload="auto"></audio>
  <audio id="gameUnlockSound" src="/sounds/gameunlock.wav" preload="auto"></audio>
  <audio id="healthHighSound" src="/sounds/healthhi.wav" preload="auto"></audio>
  <audio id="historySound" src="/sounds/history.wav" preload="auto"></audio>
  <audio id="levelCompSound" src="/sounds/levelcomp.wav" preload="auto"></audio>
  <audio id="levelerSound" src="/sounds/leveler.wav" preload="auto"></audio>
  <audio id="marsThemeSound" src="/sounds/mars_theme.mp3" preload="auto" loop></audio>
  <audio id="arcadeRisingSound" src="/sounds/mixkit-arcade-rising-231.wav" preload="auto"></audio>
  <audio id="arcadeAlertSound" src="/sounds/mixkit-arcade-video-game-machine-alert-2821.wav" preload="auto"></audio>
  <audio id="xpIncreasedSound" src="/sounds/mixkit-game-experience-level-increased-2062.wav" preload="auto"></audio>
  <audio id="pokerSound" src="/sounds/poker.wav" preload="auto"></audio>
  <audio id="scifiSound" src="/sounds/scifi.wav" preload="auto"></audio>
  <audio id="treasureSound" src="/sounds/treasure.wav" preload="auto"></audio>
  <audio id="winSound" src="/sounds/win.wav" preload="auto"></audio>
  <!-- 🎵 Game Sound Stack -->
<audio id="ash" src="/sounds/ash.mp3" preload="auto" loop></audio>
<audio id="beat" src="/sounds/beat.mp3" preload="auto" loop></audio>
<audio id="faith" src="/sounds/faith.mp3" preload="auto" loop></audio>
<audio id="gameboy" src="/sounds/gameboy.mp3" preload="auto" loop></audio>
<audio id="lose" src="/sounds/lose.mp3" preload="auto"></audio> <!-- Not looping -->
<audio id="mainsound" src="/sounds/mainsound.mp3" preload="auto" loop></audio>
<audio id="moi" src="/sounds/moi.mp3" preload="auto"></audio> <!-- Not looping -->
<audio id="there" src="/sounds/there.mp3" preload="auto" loop></audio>
<audio id="word" src="/sounds/word.mp3" preload="auto" loop></audio>


  <script>
    
    let playerCards = [], botCards = [], communityCards = [];
    let xp = parseInt(localStorage.getItem("marsXP") || 0);
    let usdt = parseFloat(localStorage.getItem("marsUSDT") || 0);
    let deckID = "";
    let highXP = parseInt(localStorage.getItem("marsHighXP") || 0);
document.getElementById("highXP").textContent = highXP;


    document.getElementById("xpCount").textContent = xp;
    document.getElementById("walletCount").textContent = usdt.toFixed(2);

    async function fetchDeck() {
      const res = await fetch("https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1");
      const data = await res.json();
      deckID = data.deck_id;
    }

    async function dealCards() {
      if (!deckID) await fetchDeck();
      const draw = await fetch(`https://deckofcardsapi.com/api/deck/${deckID}/draw/?count=7`);
      const data = await draw.json();
      const cards = data.cards;

      playerCards = cards.slice(0, 2);
      botCards = cards.slice(2, 4);
      communityCards = cards.slice(4, 7);

      document.getElementById("playerHand").innerHTML = renderCards(playerCards);
      document.getElementById("botHand").innerHTML = `
        <div class="card" style="background-image: url('https://deckofcardsapi.com/static/img/back.png')"></div>
        <div class="card" style="background-image: url('https://deckofcardsapi.com/static/img/back.png')"></div>
      `;
      document.getElementById("communityCards").innerHTML = renderCards(communityCards);
      document.getElementById("status").textContent = "";
    }
function play(soundId) {
  const audio = document.getElementById(soundId);
  if (audio) {
    audio.currentTime = 0;
    audio.play().catch(() => {});
  }
}


    function renderCards(cards) {
      return cards.map(c => `<div class="card" style="background-image: url('${c.image}')"></div>`).join("");
    }

function reveal() {
  // Show Cubeco's hand
  document.getElementById("botHand").innerHTML = renderCards(botCards);

  // Calculate scores
  const playerScore = score(playerCards.concat(communityCards));
  const botScore = score(botCards.concat(communityCards));

  let resultMessage = "";
  if (playerScore > botScore) {
    xp += 5;
    usdt += 0.01;
    resultMessage = `🎉 You won!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>+5 XP, +0.01 USDT`;
    play("levelCompSound");
  } else if (playerScore < botScore) {
    resultMessage = `🤖 Cubeco won!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>Try again!`;
    play("lose");
  } else {
    xp += 2;
    resultMessage = `⚖️ It's a draw!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>+2 XP`;
    play("moi");
  }
  // Update high XP if current is greater
  let highXP = parseInt(localStorage.getItem("marsHighXP") || 0);
  if (xp > highXP) {
    highXP = xp;
    localStorage.setItem("marsHighXP", highXP);
  }
  document.getElementById("highXP").textContent = highXP;

  // Update local storage and UI
  localStorage.setItem("playerXP", xp);
  localStorage.setItem("walletBalance", usdt.toFixed(2));
  document.getElementById("xpCount").textContent = xp;
  document.getElementById("walletCount").textContent = usdt.toFixed(2);

  // Show result modal
  showResultDialog(resultMessage);
}

    function score(cards) {
      return cards.reduce((total, c) => {
        let val = c.value;
        if (!isNaN(val)) return total + parseInt(val);
        if (["KING", "QUEEN", "JACK"].includes(val)) return total + 10;
        if (val === "ACE") return total + 11;
        return total;
      }, 0);
    }

function restart() {
  playerCards = [];
  botCards = [];
  communityCards = [];
  document.getElementById("playerHand").innerHTML = "";
  document.getElementById("botHand").innerHTML = "";
  document.getElementById("communityCards").innerHTML = "";
  document.getElementById("status").textContent = "";

  // Reset XP and wallet **visually** but not in storage
  xp = 0;
  usdt = 0;
  document.getElementById("xpCount").textContent = "0";
  document.getElementById("walletCount").textContent = "0.00";
}

  </script>
  <script>
  const slides = [
    {
      title: "📜 Welcome to Mars Poker",
      text: `You’ve landed on a hostile world, but one tradition keeps everyone sharp: <strong>Mars Poker</strong>.<br><br>
      It’s you vs Cubeco — and every card you play earns you power on Mars.`
    },
    {
      title: "🎴 Understand the Cards",
      text: `Each player is dealt <strong>2 cards</strong>.<br>The table shows <strong>3 shared cards</strong>.<br><br>
      Card values:<br>
      • Number cards = face value<br>
      • Face cards (J, Q, K) = <strong>10</strong><br>
      • Ace = <strong>11</strong>`
    },
    {
      title: "🎮 How to Play",
      text: `Step 1: Tap <strong>"Deal"</strong><br>
      → You and Cubeco get 2 cards<br>
      → 3 community cards appear<br><br>
      Step 2: Tap <strong>"Reveal"</strong><br>
      → See Cubeco's hand<br>
      → Highest total score wins!`
    },
    {
      title: "🏆 Win or Lose?",
      text: `• <strong>You win</strong> → +5 XP & 0.01 USDT<br>
      • <strong>Draw</strong> → +2 XP<br>
      • <strong>You lose</strong> → No rewards<br><br>
      Every win pushes your journey across Mars 🌌`
    },
    {
      title: "🚀 Ready to Play?",
      text: `Think fast. Tap smart.<br>
      One round can change your mission.<br><br>
      🪐 Good luck, Commander.`
    }
  ];

  let currentSlide = 0;

  function nextSlide() {
    currentSlide++;
    if (currentSlide < slides.length) {
      document.getElementById("slide-title").innerHTML = slides[currentSlide].title;
      document.getElementById("slide-text").innerHTML = slides[currentSlide].text;
      if (currentSlide === slides.length - 1) {
        document.querySelector(".slide-actions button").innerHTML = "🎮 Play Now";
        document.querySelector(".slide-actions button").onclick = () => {
          document.querySelector(".slide-actions button").onclick = () => {
  showGame();
};

        };
      }
    }
  }
  function showGame() {
  document.getElementById("rules-slide").style.display = "none";
  document.getElementById("game").style.display = "flex";
  document.getElementById("game").scrollIntoView({ behavior: "smooth" });
}

</script>
<script>
  function showResultDialog(message) {
  document.getElementById("resultMessage").innerHTML = message;
  document.getElementById("resultModal").style.display = "flex";
}

function closeResult() {
  document.getElementById("resultModal").style.display = "none";
}
        // 🧠 Grab all audio elements
    const allSounds = document.querySelectorAll("audio");
    const volumeSlider = document.querySelector(".slider .level");

    // 🎚 Set initial volume
    volumeSlider.value = 1;
    allSounds.forEach(sound => sound.volume = volumeSlider.value);

    // 🎧 Live volume control
    volumeSlider.addEventListener("input", function () {
      const vol = parseFloat(this.value);
      allSounds.forEach(sound => {
        sound.volume = vol;
      });
    });
</script>
<script>
  const sounds = {
    click: document.getElementById('clickSound'),
    win: document.getElementById('winSound'),
    lose: document.getElementById('loseSound'),
  };

  // Helper to play sound safely
  function playSound(soundName) {
    const sound = sounds[soundName];
    if (sound) {
      sound.currentTime = 0;
      sound.play().catch(() => {});
    }
  }

document.addEventListener('click', (event) => {
  const soundControl = document.getElementById('sound-control');
  const clickSound = document.getElementById('clickSound');

  if (soundControl && soundControl.contains(event.target)) {
    // Don't play sound if clicking inside the sound-control
    return;
  }

  if (clickSound) {
    clickSound.currentTime = 0;
    clickSound.play().catch(() => {});
  }
});


</script>
<script>
  window.addEventListener("DOMContentLoaded", () => {
    const allSounds = document.querySelectorAll("audio");
    const volumeSlider = document.querySelector(".slider .level");

    // Set initial volume from localStorage or default to 1
    const initialVolume = parseFloat(localStorage.getItem("marsVolume")) || 1;
    if (volumeSlider) volumeSlider.value = initialVolume;
    allSounds.forEach(sound => sound.volume = initialVolume);

    // Volume change handler
    if (volumeSlider) {
      volumeSlider.addEventListener("input", function () {
        const vol = parseFloat(this.value);
        allSounds.forEach(sound => sound.volume = vol);
        localStorage.setItem("marsVolume", vol);
      });
    }
const afterstory = document.getElementById("afterstorySound");
const mainsound= document.getElementById("mainsound");

if (afterstory) {
  afterstory.currentTime = 0;
  afterstory.loop = false; // play once
  afterstory.volume = initialVolume;

  afterstory.play().catch(err => console.warn("Afterstory play error:", err));

  setTimeout(() => {
    afterstory.pause();
    afterstory.currentTime = 0;mainsound

    if (mainsound) {
      mainsound.currentTime = 0;
      mainsound.loop = true;
      mainsound.volume = initialVolume;
      mainsound.play().catch(err => console.warn("gameboy play error:", err));
    }
  }, 7000); // Stop after 4 seconds
}

  });
</script>
<div id="sound-control" style="position: fixed; bottom: 20px; left: 25px; z-index: 9999; width: 25px;">
  <label class="slider">
    <input type="range" class="level" min="0" max="1" step="0.01" value="1" />
    <svg class="volume" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <g>
        <path d="M18.36 19.36a1 1 0 0 1-.705-1.71C19.167 16.148 20 14.142 20 12s-.833-4.148-2.345-5.65a1 1 0 1 1 1.41-1.419C20.958 6.812 22 9.322 22 12s-1.042 5.188-2.935 7.069a.997.997 0 0 1-.705.291z" fill="currentColor"></path>
        <path d="M15.53 16.53a.999.999 0 0 1-.703-1.711C15.572 14.082 16 13.054 16 12s-.428-2.082-1.173-2.819a1 1 0 1 1 1.406-1.422A6 6 0 0 1 18 12a6 6 0 0 1-1.767 4.241.996.996 0 0 1-.703.289zM12 22a1 1 0 0 1-.707-.293L6.586 17H4c-1.103 0-2-.897-2-2V9c0-1.103.897-2 2-2h2.586l4.707-4.707A.998.998 0 0 1 13 3v18a1 1 0 0 1-1 1z" fill="currentColor"></path>
      </g>
    </svg>
  </label>
</div>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
  <title>Mars Poker ♠️</title>
  <link rel="icon" href="screens/poke.png" type="image/x-icon" />
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />
  <style>
      body {
  margin: 0;
  padding: 0;
  font-family: 'Orbitron', sans-serif;
  background-image: url('pokertable.png');
  background-position: center center;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  background-attachment: fixed;
  color: #fff;
}
/* html, body {
  height: 100%;
  overflow: hidden; /* prevent scroll on all platforms */
/* }  */



section {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
  box-sizing: border-box;
  padding: 20px;
  overflow: auto; /* important for mobile and long content */
}

    #game {
  position: relative;
  z-index: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
  box-sizing: border-box;
  min-height: 100vh;
}
    h1 {
      margin-bottom: 10px;
      color: #FFF4F0;
      font-size: 2rem;
      text-shadow: 0 0 10px #000000AA;
    }

    #dealer-area, #player-area, #table-area {
      text-align: center;
      margin: 10px 0;
    }

    .cards {
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }

    .card {
      width: 90px;
      height: 125px;
      background-size: cover;
      border-radius: 8px;
    }

    #controls {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin: 20px 0;
      justify-content: center;
    }

    button {
      padding: 10px 18px;
      font-size: 1rem;
      background-color: #FF4B00;
      border: none;
      border-radius: 6px;
      color: white;
      cursor: pointer;
      box-shadow: 0 0 8px #FF4B00aa;
    }

    #status {
      font-size: 1.1rem;
      margin-top: 10px;
      color: #ffd;
      text-shadow: 0 0 4px #ffa;
    }

    #balance {
      font-size: 1rem;
      margin-top: 5px;
    }

    a.back-home {
      color: #ffb;
      text-decoration: none;
      font-size: 0.9rem;
      margin-top: 10px;
    }
    #overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.75); /* You can go higher: 0.85 for darker */
  z-index: 0;
  pointer-events: none;
}
#rules-scroll {
  position: relative;
  z-index: 10; /* Make it higher than overlay */
  background: url('mars-scroll-bg.png') no-repeat center center;
  background-size: cover;
  background-color: #150505;
  padding: 50px 20px 30px;
  text-align: center;
  color: #ffd6b8;
  font-family: 'Orbitron', sans-serif;
  box-shadow: inset 0 0 20px #FF4B00aa;
}
.scroll-container {
  max-width: 680px;
  margin: auto;
  background: rgba(24, 8, 2, 0.75);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 25px 20px;
  box-shadow: 0 0 18px #ff440088, 0 0 12px #ff660044 inset;
  backdrop-filter: blur(3px);
}

#rules-scroll h2 {
  font-size: 1.7rem;
  margin-bottom: 16px;
  color: #FFA94A;
  text-shadow: 0 0 4px #FF7F50, 0 0 10px #ff6600aa;
}

#rules-scroll p {
  font-size: 1rem;
  line-height: 1.8;
  color: #ffdbb2;
  text-shadow: 0 0 6px #441a00;
}

.scroll-actions {
  margin-top: 20px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
}

.scroll-actions button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 10px 20px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
  transition: background 0.3s ease;
}

.scroll-actions button:hover {
  background-color: #FF6B20;
}

.back-btn {
  color: #ffcc99;
  text-decoration: none;
  font-size: 0.95rem;
  text-shadow: 0 0 3px #ff7f50;
}
#rules-slide {
  position: relative;
  z-index: 15;
  background: rgba(1, 0, 0, 0.391); /* semi-transparent black over pokertable */
color: #ffd6b8;
  padding: 40px 20px;
  font-family: 'Orbitron', sans-serif;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

#slide-box {
  background: rgba(24, 8, 2, 0.54);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 30px 25px;
  max-width: 650px;
  width: 100%;
  text-align: center;
  box-shadow: 0 0 20px #ff5500aa;
  backdrop-filter: blur(4px);
}

#slide-title {
  color: #FFA94A;
  font-size: 1.8rem;
  margin-bottom: 20px;
}

#slide-text {
  font-size: 1.1rem;
  line-height: 1.8;
  color: #ffdbb2;
  margin-bottom: 25px;
}

.slide-actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
  align-items: center;
}

.slide-actions button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 12px 22px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
}

.slide-actions button:hover {
  background-color: #FF6B20;
}
#overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.85); /* Darker overlay */
  z-index: 0;
  pointer-events: none;
}


.back-btn {
  color: #ffcc99;
  text-decoration: none;
  font-size: 0.95rem;
  text-shadow: 0 0 3px #ff7f50;
}
#resultModal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(rgba(0, 0, 0, 0.85), rgba(15, 5, 5, 0.95));
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 999;
}

#resultBox {
  background: rgba(24, 8, 2, 0.8);
  border: 1px solid #ff6600;
  border-radius: 12px;
  padding: 30px 25px;
  max-width: 400px;
  width: 90%;
  text-align: center;
  box-shadow: 0 0 20px #ff5500aa;
  backdrop-filter: blur(4px);
  color: #ffdbb2;
  font-family: 'Orbitron', sans-serif;
}

#resultBox h2 {
  color: #FFA94A;
  margin-bottom: 15px;
}

#resultBox p {
  font-size: 1.1rem;
  line-height: 1.6;
  margin-bottom: 20px;
}

#resultBox button {
  background-color: #FF4B00;
  color: white;
  border: none;
  padding: 12px 24px;
  font-size: 1rem;
  border-radius: 6px;
  cursor: pointer;
  box-shadow: 0 0 12px #FF4B00bb;
}

#resultBox button:hover {
  background-color: #FF6B20;
}

  </style>
</head>
<body>
  <div id="overlay"></div> <!-- Keep it here -->
<section id="rules-slide" class="slide-container">
  
  <div id="slide-box">
    <h2 id="slide-title">📜 Welcome to Mars Poker</h2>
    <p id="slide-text">
      You’ve landed on a hostile world, but one tradition keeps everyone sharp: <strong>Mars Poker</strong>.<br><br>
      It’s you vs Cubeco — and every card you play earns you power on Mars.
    </p>
    <div class="slide-actions">
      <button id="next-btn" onclick="nextSlide()">Next</button>
      <a href="#" class="back-btn" onclick="showGame(); return false;">← Skip Rules</a>
    </div>
  </div>
</section>
 <section id="game" style="display: none;">
    <h1>🪐Marsoverse Poker ♠️</h1>

   <div id="balance">
  XP: <span id="xpCount">0</span> |
  Wallet: <span id="walletCount">0.00</span> USDT |
  Highest XP: <span id="highXP">0</span>
</div>


    <div id="player-area">
      <h3>Your Hand</h3>
      <div id="playerHand" class="cards"></div>
    </div>

    <div id="table-area">
      <h3>Community Cards</h3>
      <div id="communityCards" class="cards"></div>
    </div>

    <div id="dealer-area">
      <h3>Cubeco's Hand</h3>
      <div id="botHand" class="cards"></div>
    </div>

    <div id="status"></div>

    <div id="controls">
      <button onclick="dealCards()">Deal</button>
      <button onclick="reveal()">Reveal</button>
      <button onclick="restart()">Restart</button>
    </div>

    <a href="/marzo.html" class="back-home">← Return to Mars</a>
 </section>
 <div id="resultModal" style="display: none;">
  <div id="resultBox">
    <h2 id="resultTitle">Result</h2>
    <p id="resultMessage">You win!</p>
    <button onclick="closeResult()">OK</button>
  </div>
</div>
   <!-- 🎵 Full Sound Stack -->
  <audio id="introSound" src="/sounds/intro.mp3" preload="auto" loop></audio>
  <audio id="marsostory" src="/sounds/marsostory.mp3" preload="auto" loop></audio>
  <audio id="afterstorySound" src="/sounds/afterstory.mp3" preload="auto"></audio>
  <audio id="clickSound" src="/sounds/click.mp3" preload="auto"></audio>
  <audio id="sparkleSound" src="/sounds/sparkle.mp3" preload="auto"></audio>
  <audio id="levelupSound" src="/sounds/levelup.mp3" preload="auto"></audio>
  <audio id="xpSound" src="/sounds/xp.mp3" preload="auto"></audio>
  <audio id="popSound" src="/sounds/pop.mp3" preload="auto"></audio>
  <audio id="bondSound" src="/sounds/bond.mp3" preload="auto"></audio>
  <audio id="birthSound" src="/sounds/birthsound.mp3" preload="auto"></audio>
  <audio id="explosionSound" src="/sounds/explosion.mp3" preload="auto"></audio>
  <audio id="riserSound" src="/sounds/riser-hit-sfx-001-289802.mp3" preload="auto"></audio>
  <audio id="swooshSound" src="/sounds/swoosh-sound-effect-for-fight-scenes-or-transitions-2-149890.mp3" preload="auto"></audio>
  <audio id="typingSound" src="/sounds/typing.mp3" preload="auto"></audio>
  <audio id="galaxySound" src="/sounds/galaxy.mp3" preload="auto"></audio>
  <audio id="astroSound" src="/sounds/asteroid.mp3" preload="auto"></audio>
  <!-- 🎶 Newly Added Sounds -->
  <audio id="babyLaughSound" src="/sounds/babylaugh.mp3" preload="auto"></audio>
  <audio id="babyTalkSound" src="/sounds/babytalk.mp3" preload="auto"></audio>
  <audio id="cryingBabySound" src="/sounds/crying-baby-320170.mp3" preload="auto"></audio>
  <audio id="casinoSound" src="/sounds/casino.wav" preload="auto"></audio>
  <audio id="gameUnlockSound" src="/sounds/gameunlock.wav" preload="auto"></audio>
  <audio id="healthHighSound" src="/sounds/healthhi.wav" preload="auto"></audio>
  <audio id="historySound" src="/sounds/history.wav" preload="auto"></audio>
  <audio id="levelCompSound" src="/sounds/levelcomp.wav" preload="auto"></audio>
  <audio id="levelerSound" src="/sounds/leveler.wav" preload="auto"></audio>
  <audio id="marsThemeSound" src="/sounds/mars_theme.mp3" preload="auto" loop></audio>
  <audio id="arcadeRisingSound" src="/sounds/mixkit-arcade-rising-231.wav" preload="auto"></audio>
  <audio id="arcadeAlertSound" src="/sounds/mixkit-arcade-video-game-machine-alert-2821.wav" preload="auto"></audio>
  <audio id="xpIncreasedSound" src="/sounds/mixkit-game-experience-level-increased-2062.wav" preload="auto"></audio>
  <audio id="pokerSound" src="/sounds/poker.wav" preload="auto"></audio>
  <audio id="scifiSound" src="/sounds/scifi.wav" preload="auto"></audio>
  <audio id="treasureSound" src="/sounds/treasure.wav" preload="auto"></audio>
  <audio id="winSound" src="/sounds/win.wav" preload="auto"></audio>
  <!-- 🎵 Game Sound Stack -->
<audio id="ash" src="/sounds/ash.mp3" preload="auto" loop></audio>
<audio id="beat" src="/sounds/beat.mp3" preload="auto" loop></audio>
<audio id="faith" src="/sounds/faith.mp3" preload="auto" loop></audio>
<audio id="gameboy" src="/sounds/gameboy.mp3" preload="auto" loop></audio>
<audio id="lose" src="/sounds/lose.mp3" preload="auto"></audio> <!-- Not looping -->
<audio id="mainsound" src="/sounds/mainsound.mp3" preload="auto" loop></audio>
<audio id="moi" src="/sounds/moi.mp3" preload="auto"></audio> <!-- Not looping -->
<audio id="there" src="/sounds/there.mp3" preload="auto" loop></audio>
<audio id="word" src="/sounds/word.mp3" preload="auto" loop></audio>


  <script>
    
    let playerCards = [], botCards = [], communityCards = [];
    let xp = parseInt(localStorage.getItem("marsXP") || 0);
    let usdt = parseFloat(localStorage.getItem("marsUSDT") || 0);
    let deckID = "";
    let highXP = parseInt(localStorage.getItem("marsHighXP") || 0);
document.getElementById("highXP").textContent = highXP;


    document.getElementById("xpCount").textContent = xp;
    document.getElementById("walletCount").textContent = usdt.toFixed(2);

    async function fetchDeck() {
      const res = await fetch("https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1");
      const data = await res.json();
      deckID = data.deck_id;
    }

    async function dealCards() {
      if (!deckID) await fetchDeck();
      const draw = await fetch(`https://deckofcardsapi.com/api/deck/${deckID}/draw/?count=7`);
      const data = await draw.json();
      const cards = data.cards;

      playerCards = cards.slice(0, 2);
      botCards = cards.slice(2, 4);
      communityCards = cards.slice(4, 7);

      document.getElementById("playerHand").innerHTML = renderCards(playerCards);
      document.getElementById("botHand").innerHTML = `
        <div class="card" style="background-image: url('https://deckofcardsapi.com/static/img/back.png')"></div>
        <div class="card" style="background-image: url('https://deckofcardsapi.com/static/img/back.png')"></div>
      `;
      document.getElementById("communityCards").innerHTML = renderCards(communityCards);
      document.getElementById("status").textContent = "";
    }
function play(soundId) {
  const audio = document.getElementById(soundId);
  if (audio) {
    audio.currentTime = 0;
    audio.play().catch(() => {});
  }
}


    function renderCards(cards) {
      return cards.map(c => `<div class="card" style="background-image: url('${c.image}')"></div>`).join("");
    }

function reveal() {
  // Show Cubeco's hand
  document.getElementById("botHand").innerHTML = renderCards(botCards);

  // Calculate scores
  const playerScore = score(playerCards.concat(communityCards));
  const botScore = score(botCards.concat(communityCards));

  let resultMessage = "";
  if (playerScore > botScore) {
    xp += 5;
    usdt += 0.01;
    resultMessage = `🎉 You won!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>+5 XP, +0.01 USDT`;
    play("levelCompSound");
  } else if (playerScore < botScore) {
    resultMessage = `🤖 Cubeco won!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>Try again!`;
    play("lose");
  } else {
    xp += 2;
    resultMessage = `⚖️ It's a draw!<br>Your Score: ${playerScore}<br>Cubeco's Score: ${botScore}<br>+2 XP`;
    play("moi");
  }
  // Update high XP if current is greater
  let highXP = parseInt(localStorage.getItem("marsHighXP") || 0);
  if (xp > highXP) {
    highXP = xp;
    localStorage.setItem("marsHighXP", highXP);
  }
  document.getElementById("highXP").textContent = highXP;

  // Update local storage and UI
  localStorage.setItem("playerXP", xp);
  localStorage.setItem("walletBalance", usdt.toFixed(2));
  document.getElementById("xpCount").textContent = xp;
  document.getElementById("walletCount").textContent = usdt.toFixed(2);

  // Show result modal
  showResultDialog(resultMessage);
}

    function score(cards) {
      return cards.reduce((total, c) => {
        let val = c.value;
        if (!isNaN(val)) return total + parseInt(val);
        if (["KING", "QUEEN", "JACK"].includes(val)) return total + 10;
        if (val === "ACE") return total + 11;
        return total;
      }, 0);
    }

function restart() {
  playerCards = [];
  botCards = [];
  communityCards = [];
  document.getElementById("playerHand").innerHTML = "";
  document.getElementById("botHand").innerHTML = "";
  document.getElementById("communityCards").innerHTML = "";
  document.getElementById("status").textContent = "";

  // Reset XP and wallet **visually** but not in storage
  xp = 0;
  usdt = 0;
  document.getElementById("xpCount").textContent = "0";
  document.getElementById("walletCount").textContent = "0.00";
}

  </script>
  <script>
  const slides = [
    {
      title: "📜 Welcome to Mars Poker",
      text: `You’ve landed on a hostile world, but one tradition keeps everyone sharp: <strong>Mars Poker</strong>.<br><br>
      It’s you vs Cubeco — and every card you play earns you power on Mars.`
    },
    {
      title: "🎴 Understand the Cards",
      text: `Each player is dealt <strong>2 cards</strong>.<br>The table shows <strong>3 shared cards</strong>.<br><br>
      Card values:<br>
      • Number cards = face value<br>
      • Face cards (J, Q, K) = <strong>10</strong><br>
      • Ace = <strong>11</strong>`
    },
    {
      title: "🎮 How to Play",
      text: `Step 1: Tap <strong>"Deal"</strong><br>
      → You and Cubeco get 2 cards<br>
      → 3 community cards appear<br><br>
      Step 2: Tap <strong>"Reveal"</strong><br>
      → See Cubeco's hand<br>
      → Highest total score wins!`
    },
    {
      title: "🏆 Win or Lose?",
      text: `• <strong>You win</strong> → +5 XP & 0.01 USDT<br>
      • <strong>Draw</strong> → +2 XP<br>
      • <strong>You lose</strong> → No rewards<br><br>
      Every win pushes your journey across Mars 🌌`
    },
    {
      title: "🚀 Ready to Play?",
      text: `Think fast. Tap smart.<br>
      One round can change your mission.<br><br>
      🪐 Good luck, Commander.`
    }
  ];

  let currentSlide = 0;

  function nextSlide() {
    currentSlide++;
    if (currentSlide < slides.length) {
      document.getElementById("slide-title").innerHTML = slides[currentSlide].title;
      document.getElementById("slide-text").innerHTML = slides[currentSlide].text;
      if (currentSlide === slides.length - 1) {
        document.querySelector(".slide-actions button").innerHTML = "🎮 Play Now";
        document.querySelector(".slide-actions button").onclick = () => {
          document.querySelector(".slide-actions button").onclick = () => {
  showGame();
};

        };
      }
    }
  }
  function showGame() {
  document.getElementById("rules-slide").style.display = "none";
  document.getElementById("game").style.display = "flex";
  document.getElementById("game").scrollIntoView({ behavior: "smooth" });
}

</script>
<script>
  function showResultDialog(message) {
  document.getElementById("resultMessage").innerHTML = message;
  document.getElementById("resultModal").style.display = "flex";
}

function closeResult() {
  document.getElementById("resultModal").style.display = "none";
}
        // 🧠 Grab all audio elements
    const allSounds = document.querySelectorAll("audio");
    const volumeSlider = document.querySelector(".slider .level");

    // 🎚 Set initial volume
    volumeSlider.value = 1;
    allSounds.forEach(sound => sound.volume = volumeSlider.value);

    // 🎧 Live volume control
    volumeSlider.addEventListener("input", function () {
      const vol = parseFloat(this.value);
      allSounds.forEach(sound => {
        sound.volume = vol;
      });
    });
</script>
<script>
  const sounds = {
    click: document.getElementById('clickSound'),
    win: document.getElementById('winSound'),
    lose: document.getElementById('loseSound'),
  };

  // Helper to play sound safely
  function playSound(soundName) {
    const sound = sounds[soundName];
    if (sound) {
      sound.currentTime = 0;
      sound.play().catch(() => {});
    }
  }

document.addEventListener('click', (event) => {
  const soundControl = document.getElementById('sound-control');
  const clickSound = document.getElementById('clickSound');

  if (soundControl && soundControl.contains(event.target)) {
    // Don't play sound if clicking inside the sound-control
    return;
  }

  if (clickSound) {
    clickSound.currentTime = 0;
    clickSound.play().catch(() => {});
  }
});


</script>
<script>
  window.addEventListener("DOMContentLoaded", () => {
    const allSounds = document.querySelectorAll("audio");
    const volumeSlider = document.querySelector(".slider .level");

    // Set initial volume from localStorage or default to 1
    const initialVolume = parseFloat(localStorage.getItem("marsVolume")) || 1;
    if (volumeSlider) volumeSlider.value = initialVolume;
    allSounds.forEach(sound => sound.volume = initialVolume);

    // Volume change handler
    if (volumeSlider) {
      volumeSlider.addEventListener("input", function () {
        const vol = parseFloat(this.value);
        allSounds.forEach(sound => sound.volume = vol);
        localStorage.setItem("marsVolume", vol);
      });
    }
const afterstory = document.getElementById("afterstorySound");
const mainsound= document.getElementById("mainsound");

if (afterstory) {
  afterstory.currentTime = 0;
  afterstory.loop = false; // play once
  afterstory.volume = initialVolume;

  afterstory.play().catch(err => console.warn("Afterstory play error:", err));

  setTimeout(() => {
    afterstory.pause();
    afterstory.currentTime = 0;mainsound

    if (mainsound) {
      mainsound.currentTime = 0;
      mainsound.loop = true;
      mainsound.volume = initialVolume;
      mainsound.play().catch(err => console.warn("gameboy play error:", err));
    }
  }, 7000); // Stop after 4 seconds
}

  });
</script>
<div id="sound-control" style="position: fixed; bottom: 20px; left: 25px; z-index: 9999; width: 25px;">
  <label class="slider">
    <input type="range" class="level" min="0" max="1" step="0.01" value="1" />
    <svg class="volume" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
      <g>
        <path d="M18.36 19.36a1 1 0 0 1-.705-1.71C19.167 16.148 20 14.142 20 12s-.833-4.148-2.345-5.65a1 1 0 1 1 1.41-1.419C20.958 6.812 22 9.322 22 12s-1.042 5.188-2.935 7.069a.997.997 0 0 1-.705.291z" fill="currentColor"></path>
        <path d="M15.53 16.53a.999.999 0 0 1-.703-1.711C15.572 14.082 16 13.054 16 12s-.428-2.082-1.173-2.819a1 1 0 1 1 1.406-1.422A6 6 0 0 1 18 12a6 6 0 0 1-1.767 4.241.996.996 0 0 1-.703.289zM12 22a1 1 0 0 1-.707-.293L6.586 17H4c-1.103 0-2-.897-2-2V9c0-1.103.897-2 2-2h2.586l4.707-4.707A.998.998 0 0 1 13 3v18a1 1 0 0 1-1 1z" fill="currentColor"></path>
      </g>
    </svg>
  </label>
</div>
</body>
</html>



????????????????????????????????????????????????????????????????????????????????????????????????????????????

zeeeep
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>ZEPTA Terminal - MarsoVerse</title>
  <link rel="icon" href="images/jerry.png" type="image/x-icon">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;600&family=Russo+One&display=swap" rel="stylesheet">
  <!-- CodeMirror for Terminal View -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/theme/dracula.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/codemirror.min.js"></script>
  <script src="/scripts/honeycomb-bundle.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/mode/javascript/javascript.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/matchbrackets.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.65.2/addon/edit/closebrackets.min.js"></script>

  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'JetBrains Mono', monospace;
      height: 100vh;
      overflow: hidden;
      background: linear-gradient(135deg, #0a0a0a 0%, #120a20 25%, #100a25 50%, #1a0f2e 75%, #0a0a0a 100%);
      background-size: 400% 400%;
      animation: galaxyShift 20s ease infinite;
      color: #e0e0e0;
      position: relative;
    }

    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-image: 
        radial-gradient(2px 2px at 20px 30px, rgba(255,255,255,0.8), transparent),
        radial-gradient(2px 2px at 40px 70px, rgba(100,200,255,0.6), transparent),
        radial-gradient(1px 1px at 90px 40px, rgba(255,100,100,0.4), transparent);
      background-repeat: repeat;
      background-size: 200px 100px;
      animation: starTwinkle 10s linear infinite;
      pointer-events: none;
      z-index: 0;
    }

    @keyframes galaxyShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    @keyframes starTwinkle {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.3; }
    }

    /* Header */
    .header {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      backdrop-filter: blur(15px);
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      z-index: 1000;
      border-bottom: 1px solid rgba(255, 100, 0, 0.3);
    }

    .logo {
      font-family: 'Russo One', sans-serif;
      font-size: clamp(1.2rem, 3vw, 1.8rem);
      background: linear-gradient(45deg, #ff6400, #ff0080, #0099ff, #00ff99);
      background-size: 300% 300%;
      background-clip: text;
      -webkit-background-clip: text;
      color: transparent;
      animation: logoShift 3s ease infinite;
    }

    @keyframes logoShift {
      0%, 100% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
    }

    .header-controls {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .theme-toggle, .nav-btn {
      background: rgba(255, 100, 0, 0.1);
      border: 1px solid rgba(255, 100, 0, 0.3);
      color: #ff6400;
      padding: 0.5rem 1rem;
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-size: 0.9rem;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .theme-toggle:hover, .nav-btn:hover {
      background: rgba(255, 100, 0, 0.2);
      box-shadow: 0 0 15px rgba(255, 100, 0, 0.4);
      transform: translateY(-2px);
    }

    /* Status Bar */
    .status-bar {
      position: fixed;
      top: 70px;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.8);
      padding: 0.5rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.8rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      z-index: 999;
    }

    .status-item {
      display: flex;
      align-items: center;
      gap: 0.3rem;
      color: #00ff99;
    }

    .status-item.low-energy {
      color: #ff4444;
      animation: pulse 1s infinite;
    }

    .status-item.offline {
      color: #888;
    }

    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }

    /* Main Container */
    .container {
      position: fixed;
      top: 120px;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      flex-direction: column;
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
      z-index: 1;
    }

    /* Chat Mode Styles */
    /* .chat-container {
      display: flex;
      flex-direction: column;
      height: calc(100vh - 200px);
    } */
/* 
    .terminal-log {
      flex: 1;
      overflow-y: auto;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      scrollbar-width: thin;
      scrollbar-color: rgba(255, 100, 0, 0.5) transparent;
    } */

    .terminal-log::-webkit-scrollbar {
      width: 6px;
    }

    .terminal-log::-webkit-scrollbar-track {
      background: transparent;
    }

    .terminal-log::-webkit-scrollbar-thumb {
      background: rgba(255, 100, 0, 0.5);
      border-radius: 3px;
    }

    .terminal-line {
      padding: 0.75rem 1rem;
      border-radius: 12px;
      font-size: 0.9rem;
      max-width: 85%;
      word-wrap: break-word;
      backdrop-filter: blur(10px);
      animation: slideIn 0.3s ease;
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    @keyframes slideIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .user-line {
      align-self: flex-end;
      background: rgba(255, 100, 0, 0.15);
      border-color: rgba(255, 100, 0, 0.3);
      color: #fff;
    }

    .zepta-reply {
      align-self: flex-start;
      background: rgba(255, 255, 255, 0.05);
      border-color: rgba(0, 255, 153, 0.3);
      color: #e0e0e0;
    }

    .system-line {
      align-self: center;
      background: rgba(0, 100, 255, 0.1);
      border-color: rgba(0, 100, 255, 0.3);
      color: #66ccff;
      text-align: center;
      font-style: italic;
    }

    .thinking {
      align-self: flex-start;
      background: rgba(255, 255, 0, 0.1);
      border-color: rgba(255, 255, 0, 0.3);
      color: #ffff66;
      font-style: italic;
    }

    /* Terminal Mode Styles */
    .terminal-container {
      display: none;
      flex-direction: column;
      height: calc(100vh - 120px);
      background: rgba(10, 10, 20, 0.95);
      border-radius: 8px;
      border: 1px solid rgba(0, 255, 153, 0.3);
      overflow: hidden;
    }

    .editor-section {
      flex: 1.8;
      min-height:15%;
      display: flex;
      flex-direction: column;
      border-bottom: 1px solid rgba(0, 255, 153, 0.2);
    }

    .editor-toolbar {
      display: flex;
      align-items: center;
      padding: 10px 15px;
      background: rgba(30, 30, 30, 0.9);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      gap: 15px;
    }

    .terminal-prompt {
      color: #00ff99;
      font-family: 'JetBrains Mono', monospace;
      font-weight: bold;
    }

    .terminal-command-input {
      flex: 1;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(0, 255, 153, 0.3);
      border-radius: 4px;
      padding: 8px 12px;
      color: #e0e0e0;
      font-family: 'JetBrains Mono', monospace;
      font-size: 0.95rem;
      outline: none;
    }

    .terminal-command-input:focus {
      border-color: #00ff99;
      box-shadow: 0 0 10px rgba(0, 255, 153, 0.3);
    }

    .run-btn, .new-chat-btn {
      background: rgba(0, 150, 100, 0.7);
      border: none;
      color: white;
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      font-size: 0.85rem;
      transition: all 0.2s;
    }

    .run-btn:hover, .new-chat-btn:hover {
      background: rgba(0, 200, 100, 0.9);
    }

    .new-chat-btn {
      background: rgba(255, 100, 0, 0.7);
    }

    .new-chat-btn:hover {
      background: rgba(255, 100, 0, 0.9);
    }

    .console-section {
      flex: 1.2;
      min-height: 85%;
      display: flex;
      flex-direction: column;
      background: rgba(5, 5, 10, 0.9);
    }

    .console-header {
      padding: 8px 15px;
      background: rgba(40, 40, 40, 0.8);
      color: #e0e0e0;
      font-size: 0.8rem;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .console-output {
      flex: 1;
      padding: 15px;
      overflow-y: auto;
      font-family: 'JetBrains Mono', monospace;
      font-size: 0.9rem;
      line-height: 1.5;
      color: #e0e0e0;
    }

    .console-line {
      margin: 8px 0;
      padding: 8px 12px;
      border-radius: 4px;
      border-left: 3px solid transparent;
    }

    .console-line.user {
      background: rgba(255, 100, 0, 0.1);
      border-left-color: #ff6400;
      color: #ff6400;
    }

    .console-line.zepta {
      background: rgba(0, 255, 153, 0.1);
      border-left-color: #00ff99;
      color: #00ff99;
    }

    .console-line.system {
      background: rgba(0, 100, 255, 0.1);
      border-left-color: #0099ff;
      color: #0099ff;
      font-style: italic;
    }

    .console-line.thinking {
      background: rgba(255, 255, 0, 0.1);
      border-left-color: #ffff66;
      color: #ffff66;
      font-style: italic;
    }

    /* Input Area */
    .input-area {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background: rgba(0, 0, 0, 0.9);
      backdrop-filter: blur(20px);
      padding: 1rem 2rem;
      border-top: 1px solid rgba(255, 100, 0, 0.3);
      z-index: 1000;
    }

    .input-container {
      max-width: 1200px;
      margin: 0 auto;
      display: flex;
      gap: 0.5rem;
      align-items: center;
    }

    .terminal-input {
      flex: 1;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 100, 0, 0.3);
      border-radius: 25px;
      padding: 0.75rem 1.5rem;
      color: #fff;
      font-size: 1rem;
      outline: none;
      transition: all 0.3s ease;
    }

    .terminal-input:focus {
      border-color: #ff6400;
      box-shadow: 0 0 20px rgba(255, 100, 0, 0.3);
      background: rgba(255, 255, 255, 0.15);
    }

    .send-btn {
      background: linear-gradient(135deg, #ff6400, #ff0080);
      border: none;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 25px;
      cursor: pointer;
      font-size: 1.1rem;
      transition: all 0.3s ease;
      box-shadow: 0 4px 15px rgba(255, 100, 0, 0.3);
    }

    .send-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 20px rgba(255, 100, 0, 0.4);
    }

    /* Popup Styles */
    .popup-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(10px);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 2000;
    }

    .popup {
      background: rgba(20, 20, 30, 0.95);
      border: 2px solid rgba(255, 100, 0, 0.5);
      border-radius: 15px;
      padding: 2rem;
      max-width: 500px;
      text-align: center;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
    }

    .popup h3 {
      color: #ff6400;
      margin-bottom: 1rem;
      font-size: 1.5rem;
    }

    .popup p {
      margin-bottom: 1.5rem;
      color: #e0e0e0;
      line-height: 1.6;
    }

    .popup-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }

    .popup-btn {
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-size: 1rem;
      transition: all 0.3s ease;
    }

    .popup-btn.primary {
      background: linear-gradient(135deg, #ff6400, #ff0080);
      color: white;
    }

    .popup-btn.secondary {
      background: rgba(255, 255, 255, 0.1);
      color: #e0e0e0;
      border: 1px solid rgba(255, 255, 255, 0.3);
    }

    .popup-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(255, 100, 0, 0.3);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .header { padding: 0.75rem 1rem; }
      .status-bar { padding: 0.5rem 1rem; font-size: 0.7rem; }
      .container { padding: 0 0.5rem; }
      .input-area { padding: 0.75rem 1rem; }
      .terminal-line { font-size: 0.8rem; padding: 0.6rem 0.8rem; max-width: 95%; }
      .terminal-input { font-size: 0.9rem; padding: 0.6rem 1rem; }
      .send-btn { padding: 0.6rem 1rem; font-size: 1rem; }
      .nav-btn { padding: 0.4rem 0.6rem; font-size: 0.8rem; }
      .nav-btn span { display: none; }
      
      .editor-section { flex: 1.5; }
      .console-section { flex: 1.5; }
    }

    /* Show/Hide based on mode */
    body.chat-mode .chat-container {
      display: flex;
    }

    body.chat-mode .terminal-container {
      display: none;
    }

    body.chat-mode .input-area {
      display: block;
    }

    body.terminal-mode .chat-container {
      display: none;
    }

    body.terminal-mode .terminal-container {
      display: flex;
    }

    body.terminal-mode .input-area {
      display: none;
    }
    
    /* Suggestions */
    .suggestions {
      position: absolute;
      bottom: 100%;
      left: 0;
      right: 0;
      max-height: 200px;
      overflow-y: auto;
      background: rgba(0, 0, 0, 0.95);
      border: 1px solid rgba(255, 100, 0, 0.3);
      border-radius: 15px;
      margin-bottom: 0.5rem;
      backdrop-filter: blur(15px);
      display: none;
    }

    .suggestion-item {
      padding: 0.75rem 1rem;
      cursor: pointer;
      transition: all 0.2s ease;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }

    .suggestion-item:hover {
      background: rgba(255, 100, 0, 0.2);
    }

    .suggestion-item:last-child {
      border-bottom: none;
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .header {
        padding: 0.75rem 1rem;
      }

      .status-bar {
        margin-top: -8px;
        padding: 0.5rem 1rem;
        font-size: 0.7rem;
      }

      .status-bar .status-item:nth-child(n+4) {
        display: none;
      }

      .container {
        padding: 0 0.5rem;
      }

      .input-area {
        padding: 0.75rem 1rem;
      }

      .terminal-line {
        font-size: 0.8rem;
        padding: 0.6rem 0.8rem;
        max-width: 95%;
      }

      .terminal-input {
        font-size: 0.9rem;
        padding: 0.6rem 1rem;
      }

      .send-btn {
        padding: 0.6rem 1rem;
        font-size: 1rem;
      }

      .nav-btn {
        padding: 0.4rem 0.6rem;
        font-size: 0.8rem;
      }

      .nav-btn span {
        display: none;
      }
    }
       @media (max-width: 428px) {
      .logo {
        font-size: 1rem;
      }
            .status-bar {
        margin-top: -8px;
        padding: 0.5rem 1rem;
        font-size: 0.7rem;
      }
    }
    @media (max-width: 480px) {
      .logo {
        font-size: 1rem;
      }
      
      .status-bar {
        margin-top: -5px;
        padding: 0.5rem 1rem;
        font-size: 0.7rem;
      }

      .header-controls {
        gap: 0.5rem;
      }

      .terminal-line {
        font-size: 0.75rem;
        padding: 0.5rem 0.7rem;
      }

      .input-container {
        gap: 0.3rem;
      }

      .terminal-input {
        font-size: 0.85rem;
        padding: 0.5rem 0.8rem;
      }

      .send-btn {
        padding: 0.5rem 0.8rem;
        font-size: 0.9rem;
      }
    }
    /* Terminal mode suggestions - show below input */
.terminal-suggestions {
  position: absolute;
  top: 100%; /* Show below instead of above */
  left: 15px;
  right: 15px;
  max-height: 200px;
  overflow-y: auto;
  background: rgba(10, 10, 20, 0.95);
  border: 1px solid rgba(0, 255, 153, 0.3);
  border-radius: 8px;
  margin-top: 0.5rem;
  backdrop-filter: blur(15px);
  display: none;
  z-index: 1001;
}

.terminal-suggestions .suggestion-item {
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  border-bottom: 1px solid rgba(0, 255, 153, 0.1);
  font-family: 'JetBrains Mono', monospace;
  font-size: 0.85rem;
  color: #00ff99;
}

.terminal-suggestions .suggestion-item:hover {
  background: rgba(0, 255, 153, 0.2);
}

.terminal-suggestions .suggestion-item:last-child {
  border-bottom: none;
}

/* Make editor toolbar relative for positioning */
.editor-toolbar {
  display: flex;
  align-items: center;
  padding: 10px 15px;
  background: rgba(30, 30, 30, 0.9);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  gap: 15px;
  position: relative; /* Add this */
}
/* Ensure terminal suggestions appear below input */
.terminal-suggestions {
  position: absolute;
  top: calc(100% + 5px); /* Slightly below the input bar */
  left: 15px;
  right: 15px;
  max-height: 200px;
  overflow-y: auto;
  background: rgba(10, 10, 20, 0.95);
  border: 1px solid rgba(0, 255, 153, 0.3);
  border-radius: 8px;
  margin-top: 0.5rem;
  backdrop-filter: blur(15px);
  z-index: 1001;
  display: none;
}

.terminal-suggestions.active {
  display: block;
}

.terminal-suggestions .suggestion-item {
  padding: 0.5rem 0.75rem;
  cursor: pointer;
  transition: all 0.2s ease;
  border-bottom: 1px solid rgba(0, 255, 153, 0.1);
  font-family: 'JetBrains Mono', monospace;
  font-size: 0.85rem;
  color: #00ff99;
}

.terminal-suggestions .suggestion-item:hover {
  background: rgba(0, 255, 153, 0.2);
}

.terminal-suggestions .suggestion-item:last-child {
  border-bottom: none;
}
.chat-container{
  margin-bottom: 150px;
  /* min-height: 100vh;
  overflow-y: auto; */
}
.chat-container {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 120px); /* Adjust for header and status bar */
  overflow-y: auto; /* Enable scrolling */
  margin-bottom: 80px; /* Reduced to prevent excessive gap */
}

/* Ensure terminal-log scrolls properly */
.terminal-log {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  scrollbar-width: thin;
  scrollbar-color: rgba(255, 100, 0, 0.5) transparent;
  max-height: calc(100vh - 200px); /* Ensure it fits within viewport */
}

/* Adjust input area for mobile */
.input-area {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(0, 0, 0, 0.9);
  backdrop-filter: blur(20px);
  padding: 0.75rem 1rem; /* Reduced padding for mobile */
  border-top: 1px solid rgba(255, 100, 0, 0.3);
  z-index: 1000;
}

/* Mobile-specific adjustments */
@media (max-width: 768px) {
  .chat-container {
    height: calc(100vh - 100px); /* Adjust for smaller header/status bar */
    margin-bottom: 60px; /* Reduced margin */
  }
  
  .terminal-log {
    max-height: calc(100vh - 160px); /* Adjust for input area */
    padding: 0.5rem;
  }
  
  .input-area {
    padding: 0.5rem 0.75rem;
  }
  
  .terminal-line {
    font-size: 0.85rem;
    padding: 0.5rem 0.75rem;
    max-width: 100%; /* Ensure full width for readability */
  }
}

@media (max-width: 480px) {
  .chat-container {
    height: calc(100vh - 90px);
    margin-bottom: 50px;
  }
  
  .terminal-log {
    max-height: calc(100vh - 140px);
  }
  
  .input-area {
    padding: 0.4rem 0.6rem;
  }
  
  .terminal-input {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
  }
  
  .send-btn {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
  }
}
.popup-image {
  width: 120px;
  height: 120px;
  object-fit: cover;
  border-radius: 10px;
  border: 2px solid rgba(255, 100, 0, 0.5);
  margin-bottom: 1rem;
  animation: neonPulse 2s ease infinite;
}

@keyframes neonPulse {
  0%, 100% { box-shadow: 0 0 10px rgba(255, 100, 0, 0.5); }
  50% { box-shadow: 0 0 20px rgba(255, 100, 0, 0.8); }
}

@media (max-width: 480px) {
  .popup-image {
    width: 80px;
    height: 80px;
  }
}
#companionSection, #cyborg {
  display: none; /* Hidden by default until needed */
  position: relative;
  z-index: 10;
  padding: 2rem;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  border-radius: 15px;
  margin: 1rem auto;
  max-width: 600px;
  text-align: center;
}

.choices {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
}

.choice {
  cursor: pointer;
  transition: all 0.3s ease;
}

.choice img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
  border: 2px solid rgba(255, 100, 0, 0.5);
}

.choice:hover img {
  border-color: #ff6400;
  box-shadow: 0 0 15px rgba(255, 100, 0, 0.5);
}

.or-text {
  color: #ff6400;
  font-family: 'Russo One', sans-serif;
}

.mallo {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 100, 0, 0.3);
  border-radius: 8px;
  padding: 0.5rem 1rem;
  color: #fff;
  font-family: 'JetBrains Mono', monospace;
  margin-top: 1rem;
  width: 100%;
  max-width: 300px;
}

@media (max-width: 480px) {
  #companionSection, #cyborg {
    padding: 1rem;
  }
  .choices {
    flex-direction: column;
  }
  .choice img {
    width: 80px;
    height: 80px;
  }
}

/* Mobile-specific adjustments */
@media (max-width: 768px) {
  .chat-container {
    height: calc(100vh - 100px); /* Adjust for smaller header/status bar */
    margin-bottom: 60px; /* Reduced margin */
  }
  
  .terminal-log {
    max-height: calc(100vh - 160px); /* Adjust for input area */
    padding: 0.5rem;
  }
  
  .input-area {
    padding: 0.5rem 0.75rem;
  }
  
  .terminal-line {
    font-size: 0.85rem;
    padding: 0.5rem 0.75rem;
    max-width: 100%; /* Ensure full width for readability */
  }
}

@media (max-width: 480px) {
  .chat-container {
    height: calc(100vh - 90px);
    margin-bottom: 50px;
  }
  
  .terminal-log {
    max-height: calc(100vh - 140px);
  }
  
  .input-area {
    padding: 0.4rem 0.6rem;
  }
  
  .terminal-input {
    font-size: 0.8rem;
    padding: 0.4rem 0.8rem;
  }
  
  .send-btn {
    padding: 0.4rem 0.8rem;
    font-size: 0.9rem;
  }
}
.popup-image {
  width: 120px;
  height: 120px;
  object-fit: cover;
  border-radius: 10px;
  border: 2px solid rgba(255, 100, 0, 0.5);
  margin-bottom: 1rem;
  animation: neonPulse 2s ease infinite;
}

@keyframes neonPulse {
  0%, 100% { box-shadow: 0 0 10px rgba(255, 100, 0, 0.5); }
  50% { box-shadow: 0 0 20px rgba(255, 100, 0, 0.8); }
}

@media (max-width: 480px) {
  .popup-image {
    width: 80px;
    height: 80px;
  }
}
#companionSection, #cyborg {
  display: none; /* Hidden by default until needed */
  position: relative;
  z-index: 10;
  padding: 2rem;
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(10px);
  border-radius: 15px;
  margin: 1rem auto;
  max-width: 600px;
  text-align: center;
}

.choices {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 1rem;
}

.choice {
  cursor: pointer;
  transition: all 0.3s ease;
}

.choice img {
  width: 100px;
  height: 100px;
  object-fit: cover;
  border-radius: 8px;
  border: 2px solid rgba(255, 100, 0, 0.5);
}

.choice:hover img {
  border-color: #ff6400;
  box-shadow: 0 0 15px rgba(255, 100, 0, 0.5);
}

.or-text {
  color: #ff6400;
  font-family: 'Russo One', sans-serif;
}

.mallo {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 100, 0, 0.3);
  border-radius: 8px;
  padding: 0.5rem 1rem;
  color: #fff;
  font-family: 'JetBrains Mono', monospace;
  margin-top: 1rem;
  width: 100%;
  max-width: 300px;
}

@media (max-width: 480px) {
  #companionSection, #cyborg {
    padding: 1rem;
  }
  .choices {
    flex-direction: column;
  }
  .choice img {
    width: 80px;
    height: 80px;
  }
}
/* In your existing CSS, modify the mobile media queries */
@media (max-width: 768px) {
  .input-area {
    padding: 1rem 0.75rem; /* Increased padding for larger appearance */
    bottom: 15px; /* Raise by 15px */
  }
  
  .input-container {
    gap: 0.5rem;
  }
  
  .terminal-input {
    font-size: 1rem; /* Slightly larger font */
    padding: 1rem 1.5rem; /* Increased padding for larger input */
    border-radius: 30px; /* Slightly larger border-radius for better appearance */
  }
  
  .send-btn {
    padding: 1rem 1.2rem; /* Larger button */
    font-size: 1.1rem;
  }
}

@media (max-width: 480px) {
  .input-area {
    padding: 0.8rem 0.6rem;
    bottom: 15px; /* Consistent 15px raise */
  }
  
  .terminal-input {
    font-size: 0.95rem;
    padding: 0.8rem 1.2rem;
  }
  
  .send-btn {
    padding: 0.8rem 1rem;
    font-size: 1rem;
  }
}
/* Add to your CSS */
@media (max-width: 768px) {
  .run-btn {
    padding: 2px; /* Reduced padding to fit icon */
    width: 30px; /* Fixed width for icon-only */
    height: 30px; /* Fixed height for icon-only */
    display: flex;
    justify-content: center;
    align-items: center;
  }
  .terminal-command-input{
    width: 60px;
  }
  .new-chat-btn{
      padding: 2px; /* Reduced padding to fit icon */
    width: 30px; /* Fixed width for icon-only */
    height: 30px; /* Fixed height for icon-only */
  }
  
  .run-btn i {
    margin: 0; /* Remove any default margins */
  }
  
  .run-btn span {
    display: none; /* Hide text in mobile view */
  }
}

/* Mobile-specific adjustments */
@media (max-width: 768px) {
  .input-area {
    padding: 1rem 0.75rem; /* Increased padding for larger appearance */
    bottom: 15px; /* Consistent 15px raise */
  }
  
  .input-container {
    gap: 0.5rem;
  }
  
  .terminal-input {

    font-size: 1rem; /* Slightly larger font */
    padding: 1rem 1.5rem; /* Increased padding for larger input */
    border-radius: 30px; /* Slightly larger border-radius */
  }
  
  .send-btn {
    padding: 1rem 1.2rem; /* Larger button */
    font-size: 1.1rem;
  }
  
  .chat-container {
    height: calc(100vh - 100px); /* Adjust for smaller header/status bar */
  }
 .editor-section{
    height: 200px; /* Adjust for smaller header/status bar */

 } 
  
  .terminal-log {
    max-height: calc(100vh - 160px); /* Adjust for input area */
    padding: 0.5rem;
    padding-bottom: 140px; /* Increased to prevent overlap on mobile */
  }
  
  .terminal-line {
    font-size: 0.85rem;
    padding: 0.5rem 0.75rem;
    max-width: 100%; /* Ensure full width for readability */
  }
}

@media (max-width: 480px) {
  .input-area {
    padding: 0.8rem 0.6rem;
    bottom: 15px; /* Consistent 15px raise */
  }
  
  .input-container {
    gap: 0.3rem;
  }
  
  .terminal-input {
    font-size: 0.95rem;
    padding: 0.8rem 1.2rem;
  }
  
  .send-btn {
    padding: 0.8rem 1rem;
    font-size: 1rem;
  }
  
  .chat-container {
    height: calc(100vh - 90px);
  }
  
  .terminal-log {
    max-height: calc(100vh - 140px);
    padding-bottom: 120px; /* Adjusted for smaller screens */
  }
  .console-output{
    padding-bottom: 80px; /* Adjusted for smaller screens */

  }
  .console-section{
    padding-bottom: 20px;
  }
  .terminal-line {
    font-size: 0.75rem;
    padding: 0.5rem 0.7rem;
  }
}
 .console-output{
    padding-bottom: 60px; /* Adjusted for smaller screens */

  }
  /* Mobile-specific adjustments */
@media (max-width: 768px) {
  .editor-toolbar {
    padding: 8px 10px;
    gap: 8px;
  }
  
  .run-btn {
    padding: 6px;
    min-width: 36px;
    height: 36px;
    font-size: 0.8rem;
  }
    .new-chat-btn{
      padding: 2px; /* Reduced padding to fit icon */
    width: 40px; /* Fixed width for icon-only */
    height: 40px; /* Fixed height for icon-only */
  }
  
  .run-btn span {
    display: none; /* Hide text on mobile */
  }
  
  .run-btn i {
    margin: 0; /* Center icon */
    font-size: 0.9rem;
  }
}

@media (max-width: 480px) {
  .editor-toolbar {
    padding: 6px 6px;
    gap: 3px;
  }
  
  .run-btn {
    padding: 2px;
    min-width: 25px;
    height: 26px;
  }
  
  .run-btn i {
    font-size: 0.85rem;
  }
}
  </style>
</head>
<body class="chat-mode">
  <!-- Header -->
  <div class="header">
    <div class="logo">⚡ ZEPTA Terminal</div>
    <div class="header-controls">
      <a href="index.html" class="nav-btn">
        <i class="fas fa-home"></i>
        <span>Home</span>
      </a>
      <a href="marzo.html" class="nav-btn">
        <i class="fas fa-gamepad"></i>
        <span>Game</span>
      </a>
      <a href="mars-viewer.html" class="nav-btn">
        <i class="fas fa-meteor"></i>
        <span>Mars</span>
      </a>
      <button class="theme-toggle" id="themeToggle">
        <i class="fas fa-code"></i>
        <span>Terminal</span>
      </button>
    </div>
  </div>

  <!-- Status Bar -->
  <div class="status-bar">
    <div class="status-item" id="xpStatus">
      <i class="fas fa-star"></i>
      <span>XP: <span id="xpDisplay">0</span></span>
    </div>
    <div class="status-item" id="relationshipStatus">
      <i class="fas fa-heart"></i>
      <span>Relationship: <span id="relationshipDisplay">Stranger</span></span>
    </div>
    <div class="status-item" id="energyStatus">
      <i class="fas fa-battery-three-quarters"></i>
      <span>Energy: <span id="energyDisplay">100</span>%</span>
    </div>
    <div class="status-item" id="creditsStatus">
      <i class="fas fa-coins"></i>
      <span>Credits: <span id="creditsDisplay">1000</span></span>
    </div>
    <div class="status-item" id="connectionStatus">
      <i class="fas fa-wifi"></i>
      <span id="connectionText">Online</span>
    </div>
  </div>

  <!-- Main Container -->
  <div class="container">
    <!-- Chat Mode -->
    <div class="chat-container">
      <div class="terminal-log" id="terminalLog"></div>
    </div>

    <!-- Terminal Mode -->
    <div class="terminal-container">
      <div class="editor-section">
        <div class="editor-toolbar">
          <span class="terminal-prompt">ZEPTA></span>
          <input type="text" class="terminal-command-input" id="terminalCommandInput" 
                 placeholder="Type commands starting with / (e.g., /help)" autocomplete="off">
          <button class="run-btn" id="runBtn" title="Execute Command (Enter)">
            <i class="fas fa-play"></i> 
          </button>
          <button class="new-chat-btn" id="newChatBtn" title="Start New Session">
            <i class="fas fa-plus"></i> 
          </button>
        </div>
      </div>
      <div class="terminal-suggestions" id="terminalSuggestions"></div>
      
      
      <div class="console-section">
        <div class="console-header">
          <i class="fas fa-terminal"></i>
          <span>Console Output</span>
          <div style="margin-left: auto; font-size: 0.7rem; opacity: 0.7;">
            History: <span id="historyCount">0</span> messages
          </div>
        </div>
        <div class="console-output" id="consoleOutput"></div>
      </div>
    </div>
  </div>

  <!-- Chat Mode Input -->
  <div class="input-area">
    <div class="input-container">
      <input type="text" class="terminal-input" id="terminalInput" 
             placeholder="Type /help to get started..." autocomplete="off">
      <button class="send-btn" id="sendBtn">
        <i class="fas fa-paper-plane"></i>
      </button>
    </div>
    <div class="suggestions" id="suggestions"></div>
  </div>

  <!-- Energy Low Popup -->
  <div class="popup-overlay" id="energyPopup">
    <div class="popup">
      <h3><i class="fas fa-battery-empty"></i> Low Energy!</h3>
      <p>Your energy is running low (<span id="currentEnergy">0</span>%). 
         You need energy to continue exploring Mars and playing games.</p>
      <div class="popup-buttons">
        <button class="popup-btn primary" id="rechargeBtn">
          <i class="fas fa-bolt"></i> Recharge with Solana Pay
        </button>
        <button class="popup-btn secondary" id="dismissBtn">
          <i class="fas fa-times"></i> Continue Anyway
        </button>
      </div>
    </div>
  </div>

  <!-- New Visitor Popup -->
  <div class="popup-overlay" id="visitorPopup">
    <div class="popup">
      <h3><i class="fas fa-user-plus"></i> New Visitor!</h3>
      <p id="visitorMessage"></p>
      <div class="popup-buttons">
        <button class="popup-btn primary" id="acceptVisitorBtn">
          <i class="fas fa-handshake"></i> Be Friends
        </button>
        <button class="popup-btn secondary" id="ignoreVisitorBtn">
          <i class="fas fa-times"></i> Ignore
        </button>
      </div>
    </div>
  </div>

  <!-- Partner Reaction Popup -->
  <div class="popup-overlay" id="partnerReactionPopup">
    <div class="popup">
      <h3><i class="fas fa-heart-broken"></i> Partner Reaction</h3>
      <p id="partnerReactionMessage"></p>
      <div class="popup-buttons">
        <button class="popup-btn primary" id="apologizeBtn">
          <i class="fas fa-heart"></i> Apologize
        </button>
        <button class="popup-btn secondary" id="defendBtn">
          <i class="fas fa-shield-alt"></i> Defend Actions
        </button>
      </div>
    </div>
  </div>

  <!-- Cyborg Popup -->
<div class="popup-overlay" id="cyborgPopup">
  <div class="popup">
    <img id="cyborgImage" src="images/jerry.png" alt="Cyborg" class="popup-image">
    <h3><i class="fas fa-robot"></i> Cyborg Encounter!</h3>
    <p id="cyborgMessage"></p>
    <div class="popup-buttons">
      <button class="popup-btn primary" id="interactCyborgBtn">
        <i class="fas fa-handshake"></i> Interact
      </button>
      <button class="popup-btn secondary" id="ignoreCyborgBtn">
        <i class="fas fa-times"></i> Ignore
      </button>
    </div>
  </div>
</div>

<!-- Companion Popup -->
<div class="popup-overlay" id="companionPopup">
  <div class="popup">
    <img id="companionImage" src="images/elena.png" alt="Companion" class="popup-image">
    <h3><i class="fas fa-user-astronaut"></i> Companion Encounter!</h3>
    <p id="companionMessage"></p>
    <div class="popup-buttons">
      <button class="popup-btn primary" id="interactCompanionBtn">
        <i class="fas fa-handshake"></i> Welcome
      </button>
      <button class="popup-btn secondary" id="ignoreCompanionBtn">
        <i class="fas fa-times"></i> Ignore
      </button>
    </div>
  </div>
</div>


  
  <script>
    // Default game state
    const defaultState = {
      resources: {
        money: 100,
        oxygen: 50,
        water: 50,
        food: 50,
        shelter: 10,
        rover: 0,
        fuel: 25,
        energy: 100,
        data_crystals: 0,
        credits: 1000
      },
      relationship: "stranger",
      companionName: localStorage.getItem('companionName') || 'Elena', // Load from localStorage
      partnerName: null,
      marriedTo: null,
      children: [],
      friends: [],
      romanticPartners: [],
      familyTree: [],
      xp: parseInt(localStorage.getItem('playerXP') || '0'),
      level: 1,
      mood: "neutral",
      sfx: true,
      music: false,
      theme: "chat",
      achievements: [],
      missions: [],
      chatHistory: [],
      gameSession: Date.now(),
      lastEnergyDrain: Date.now(),
      visitors: [],
      relationships: {}
    };

    let gameState = JSON.parse(localStorage.getItem("marsoverse_zepta_game")) || { ...defaultState };
    let isTerminalMode = gameState.theme === 'chat';
    let isOnline = navigator.onLine;
    let energyDrainInterval;
    let visitorInterval;

    // Sync playerXP with gameState.xp
    function syncPlayerXP() {
      const playerXP = parseInt(localStorage.getItem('playerXP') || '0');
      gameState.xp = playerXP; // Sync gameState.xp with playerXP
      localStorage.setItem('playerXP', gameState.xp.toString()); // Ensure localStorage is updated
      updateStatusDisplay();
    }

    

    // Initialize
    document.addEventListener('DOMContentLoaded', function() {
      syncPlayerXP(); // Add this to sync XP on load
      initializeGame();
      loadChatHistory();
      updateStatusDisplay();
      startEnergyDrain();
      startVisitorSystem();
      checkConnection();
      
      // Set initial theme
      toggleTheme(false); // Don't save on init
      // setupCyborgInput();
      setupCompanionSelection();
    });

    function initializeGame() {
      // Welcome message if new session
      if (!gameState.chatHistory.length) {
        addToHistory('Welcome to ZEPTA Terminal! Type /help to get started.', false, 'system');
        saveGame();
      }
    }
    function initializeSections() {
        const companionSection = document.getElementById('companionSection');
        const cyborgSection = document.getElementById('cyborg');
        if (companionSection && !localStorage.getItem('companionName')) {
          companionSection.style.display = 'block';
        }
        if (cyborgSection && !localStorage.getItem('cyborgName')) {
          cyborgSection.style.display = 'block';
        }
      }
    function saveGame() {
      gameState.lastSaved = Date.now();
      localStorage.setItem("marsoverse_zepta_game", JSON.stringify(gameState));
      updateStatusDisplay();
    }

    function updateStatusDisplay() {
      document.getElementById('xpDisplay').textContent = gameState.xp;
      document.getElementById('relationshipDisplay').textContent = gameState.relationship;
      
      const energyDisplay = document.getElementById('energyDisplay');
      const energyStatus = document.getElementById('energyStatus');
      energyDisplay.textContent = Math.round(gameState.resources.energy);
      
      if (gameState.resources.energy < 50) {
        energyStatus.classList.add('low-energy');
      } else {
        energyStatus.classList.remove('low-energy');
      }
      
      document.getElementById('creditsDisplay').textContent = gameState.resources.credits;
      
      const connectionStatus = document.getElementById('connectionStatus');
      const connectionText = document.getElementById('connectionText');
      if (isOnline) {
        connectionStatus.classList.remove('offline');
        connectionText.textContent = 'Online';
      } else {
        connectionStatus.classList.add('offline');
        connectionText.textContent = 'Offline';
      }
      
      document.getElementById('historyCount').textContent = gameState.chatHistory.length;
    }

    function checkConnection() {
      window.addEventListener('online', () => {
        isOnline = true;
        updateStatusDisplay();
        addToHistory('🌐 Connection restored! Welcome back online.', false, 'system');
      });

      window.addEventListener('offline', () => {
        isOnline = false;
        updateStatusDisplay();
        addToHistory('📡 Connection lost. Operating in offline mode.', false, 'system');
      });
    }

    function startEnergyDrain() {
      energyDrainInterval = setInterval(() => {
        // Drain energy every minute (faster for demo)
        gameState.resources.energy = Math.max(0, gameState.resources.energy - 0.5);
        
        if (gameState.resources.energy < 50 && gameState.resources.energy > 0) {
          showEnergyPopup();
        }
        
        if (gameState.resources.energy <= 0) {
          addToHistory('⚠️ Energy depleted! Some functions may be limited.', false, 'system');
        }
        
        saveGame();
      }, 60000); // 1 minute intervals
    }

    function startVisitorSystem() {
      visitorInterval = setInterval(() => {
        if (Math.random() < 0.3) { // 30% chance every 5 minutes
          generateVisitor();
        }
      }, 300000); // 5 minutes
    }

    function triggerCyborgPopup() {
  const cyborgName = localStorage.getItem('cyborgName') || 'Jeremy';
  const cyborgMessage = `${cyborgName}, a Martian cyborg, wants to assist you! "I can help with advanced tech tasks."`;
  document.getElementById('cyborgMessage').textContent = cyborgMessage;
  document.getElementById('cyborgImage').src = `images/jerry.png`; // Use jerry.png as specified
  document.getElementById('cyborgPopup').style.display = 'flex';
  document.getElementById('cyborgPopup').setAttribute('data-cyborg', JSON.stringify({ name: cyborgName, type: 'cyborg' }));
}

// Handle cyborg name input
function setupCyborgInput() {
  const botNameInput = document.getElementById('botName');
  if (botNameInput) {
    botNameInput.addEventListener('change', () => {
      const cyborgName = botNameInput.value.trim() || 'Jeremy';
      localStorage.setItem('cyborgName', cyborgName);
    });
    // Set initial value from localStorage
    botNameInput.value = localStorage.getItem('cyborgName') || 'Jeremy';
  }
}

// Handle companion selection
function setupCompanionSelection() {
  const choices = document.querySelectorAll('#companionSection .choice');
  const companionNameInput = document.getElementById('companionName');
  
  choices.forEach(choice => {
    choice.addEventListener('click', () => {
      const selectedName = choice.getAttribute('data-name');
      const selectedImage = choice.querySelector('img').src;
      gameState.companionName = selectedName;
      localStorage.setItem('companionName', selectedName);
      localStorage.setItem('companionImage', selectedImage);
      companionNameInput.value = selectedName; // Update input field
      addToHistory(`🚀 Selected ${selectedName} as your companion!`, false, 'system');
      triggerCompanionPopup(selectedName);
      saveGame();
    });
  });
  
  if (companionNameInput) {
    companionNameInput.addEventListener('change', () => {
      const customName = companionNameInput.value.trim() || 'Elena';
      gameState.companionName = customName;
      localStorage.setItem('companionName', customName);
      localStorage.setItem('companionImage', 'images/elena.png'); // Default to Elena's image for custom names
      triggerCompanionPopup(customName);
      saveGame();
    });
    // Set initial value from localStorage
    companionNameInput.value = localStorage.getItem('companionName') || 'Elena';
  }
}
document.getElementById('interactCyborgBtn').addEventListener('click', () => {
  addToHistory('🤖 You interacted with the Cyborg.', false, 'system');
  document.getElementById('cyborgPopup').style.display = 'none';
});

document.getElementById('ignoreCyborgBtn').addEventListener('click', () => {
  addToHistory('❌ You ignored the Cyborg.', false, 'system');
  document.getElementById('cyborgPopup').style.display = 'none';
});

document.getElementById('interactCompanionBtn').addEventListener('click', () => {
  addToHistory('👩‍🚀 You welcomed your companion!', false, 'system');
  document.getElementById('companionPopup').style.display = 'none';
});

document.getElementById('ignoreCompanionBtn').addEventListener('click', () => {
  addToHistory('🚫 You ignored the companion.', false, 'system');
  document.getElementById('companionPopup').style.display = 'none';
});


function triggerCompanionPopup(name) {
  const companionName = name || localStorage.getItem('companionName') || 'Elena';
  const companionImage = localStorage.getItem('companionImage') || 'images/elena.png';
  const companionMessage = `${companionName} joins you on your Martian adventure! "Ready to explore the red planet together?"`;
  document.getElementById('companionMessage').textContent = companionMessage;
  document.getElementById('companionImage').src = companionImage;
  document.getElementById('companionPopup').style.display = 'flex';
  document.getElementById('companionPopup').setAttribute('data-companion', JSON.stringify({ name: companionName, type: 'companion' }));
}

// Trigger companion popup based on XP or first connection
function checkCompanionTrigger() {
  if (gameState.xp >= 50 && !gameState.relationships[gameState.companionName]) {
    triggerCompanionPopup(gameState.companionName);
  }
}

    function generateVisitor() {
      const visitors = [
        { name: "Alex", type: "explorer", message: "Hey! I'm exploring Mars too. Want to be friends?" },
        { name: "Sam", type: "scientist", message: "I'm researching Martian geology. Care to collaborate?" },
        { name: "Jordan", type: "engineer", message: "Building habitats on Mars. Could use a friend!" },
        { name: "Casey", type: "artist", message: "I paint Martian landscapes. Want to see my work?" },
        { name: "Riley", type: "trader", message: "I trade resources between colonies. Let's be friends!" }
      ];
      
          // Filter out already-added friends
          const unconnectedVisitors = visitors.filter(v => 
            !gameState.friends.some(f => f.name === v.name)
          );

          if (unconnectedVisitors.length === 0) {
            addToHistory("🚫 No new visitors. You've connected with everyone!", false);
            return;
          }

          const visitor = unconnectedVisitors[Math.floor(Math.random() * unconnectedVisitors.length)];
          gameState.visitors.push(visitor);
          showVisitorPopup(visitor);
              
      // const visitor = visitors[Math.floor(Math.random() * visitors.length)];
      // gameState.visitors.push(visitor);
      // showVisitorPopup(visitor);
    }

    function showEnergyPopup() {
      document.getElementById('currentEnergy').textContent = Math.round(gameState.resources.energy);
      document.getElementById('energyPopup').style.display = 'flex';
    }

    function showVisitorPopup(visitor) {
      document.getElementById('visitorMessage').textContent = visitor.message;
      document.getElementById('visitorPopup').style.display = 'flex';
      document.getElementById('visitorPopup').setAttribute('data-visitor', JSON.stringify(visitor));
    }

    function showPartnerReaction(action, target) {
      if (!gameState.partnerName && !gameState.marriedTo) return;
      
      const partner = gameState.partnerName || gameState.marriedTo;
      const reactions = {
        kiss: `${partner} saw you kiss ${target} and looks hurt! 💔`,
        flirt: `${partner} noticed you flirting with ${target} and seems jealous! 😠`,
        date: `${partner} found out about your date with ${target} and is devastated! 😢`,
        baby: `${partner} discovered you had a baby with ${target} and is heartbroken! 💔💔`
      };
      
      document.getElementById('partnerReactionMessage').textContent = reactions[action];
      document.getElementById('partnerReactionPopup').style.display = 'flex';
    }

    // Event Listeners for Popups
    document.getElementById('rechargeBtn').addEventListener('click', () => {
      // Integrate with Solana Pay
      rechargeSolana();
      document.getElementById('energyPopup').style.display = 'none';
    });

    document.getElementById('dismissBtn').addEventListener('click', () => {
      document.getElementById('energyPopup').style.display = 'none';
    });

    document.getElementById('acceptVisitorBtn').addEventListener('click', () => {
      const visitorData = JSON.parse(document.getElementById('visitorPopup').getAttribute('data-visitor'));
      gameState.friends.push(visitorData);
      gameState.relationships[visitorData.name] = 'friend';
      addToHistory(`🤝 You're now friends with ${visitorData.name}!`, false, 'system');
      addXP(20);
      document.getElementById('visitorPopup').style.display = 'none';
      saveGame();
    });

    document.getElementById('ignoreVisitorBtn').addEventListener('click', () => {
      document.getElementById('visitorPopup').style.display = 'none';
    });

    document.getElementById('apologizeBtn').addEventListener('click', () => {
      gameState.mood = 'apologetic';
      addToHistory(`You apologized to ${gameState.partnerName || gameState.marriedTo}. They seem to forgive you... this time.`, false, 'system');
      document.getElementById('partnerReactionPopup').style.display = 'none';
      saveGame();
    });

    document.getElementById('defendBtn').addEventListener('click', () => {
      gameState.mood = 'defiant';
      addToHistory(`You defended your actions. Your relationship is strained.`, false, 'system');
      // Decrease relationship status
      const relationships = ['stranger', 'acquaintance', 'friend', 'close friend', 'partner', 'soulmate'];
      const currentIndex = relationships.indexOf(gameState.relationship);
      if (currentIndex > 0) {
        gameState.relationship = relationships[currentIndex - 1];
      }
      document.getElementById('partnerReactionPopup').style.display = 'none';
      saveGame();
    });

    async function rechargeSolana() {
      try {
        addToHistory('🔋 Initiating Solana Pay transaction for energy recharge...', false, 'system');
        
        // Simulate Solana Pay integration
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        gameState.resources.energy = 100;
        gameState.resources.credits -= 50;
        addToHistory('✅ Energy recharged to 100%! Deducted 50 credits via Solana Pay.', false, 'system');
        addXP(10);
        saveGame();
      } catch (error) {
        addToHistory('❌ Solana Pay transaction failed. Please try again.', false, 'system');
      }
    }

    // Sync playerXP with gameState.xp
function syncPlayerXP() {
  const playerXP = parseInt(localStorage.getItem('playerXP') || '0');
  gameState.xp = playerXP; // Sync gameState.xp with playerXP
  localStorage.setItem('playerXP', gameState.xp.toString()); // Ensure localStorage is updated
  updateStatusDisplay();
}

// Modified addXP function to reduce XP and sync with localStorage
function addXP(amount) {
  const reducedAmount = Math.floor(amount * 0.5); // Reduce XP gain by 50%
  gameState.xp += reducedAmount;
  localStorage.setItem('playerXP', gameState.xp.toString()); // Update localStorage
  const newLevel = Math.floor(gameState.xp / 100) + 1;
  if (newLevel > gameState.level) {
    gameState.level = newLevel;
    addToHistory(`🎉 Level Up! You are now level ${gameState.level}!`, false, 'system');
  }
  // // Check for cyborg popup trigger
  // if (gameState.xp >= 100 && !gameState.relationships['Jeremy']) {
  //   triggerCyborgPopup();
  // }

  // Check for companion popup trigger (example: trigger at 50 XP)
  if (gameState.xp >= 50 && !gameState.companionName) {
    triggerCompanionPopup(localStorage.getItem('companionName') || 'Elena');
  }
  saveGame();
}

    function addToHistory(text, isUser = true, type = 'normal') {
      const timestamp = Date.now();
      const historyEntry = {
        text,
        isUser,
        type,
        timestamp,
        session: gameState.gameSession
      };
      
      gameState.chatHistory.push(historyEntry);
      
      // Keep only last 500 messages to prevent storage overflow
      if (gameState.chatHistory.length > 500) {
        gameState.chatHistory = gameState.chatHistory.slice(-500);
      }
      
      displayMessage(text, isUser, type);
      saveGame();
    }

    function loadChatHistory() {
      gameState.chatHistory.forEach(entry => {
        displayMessage(entry.text, entry.isUser, entry.type, false);
      });
    }

    function displayMessage(text, isUser = true, type = 'normal', animate = true) {
      // Display in chat mode
      const chatLog = document.getElementById('terminalLog');
      const chatLine = document.createElement('div');
      let className = type === 'system' ? 'system-line' : 
                    type === 'thinking' ? 'thinking' :
                    (isUser ? 'user-line' : 'zepta-reply');
      chatLine.className = `terminal-line ${className}`;
      chatLine.textContent = text;
      if (animate) {
        chatLine.style.animation = 'slideIn 0.3s ease';
      }
      chatLog.appendChild(chatLine);
      chatLog.scrollTop = chatLog.scrollHeight;

      // Display in terminal mode console
      const consoleOutput = document.getElementById('consoleOutput');
      const consoleLine = document.createElement('div');
      let consoleClass = type === 'system' ? 'system' : 
                       type === 'thinking' ? 'thinking' :
                       (isUser ? 'user' : 'zepta');
      consoleLine.className = `console-line ${consoleClass}`;
      consoleLine.textContent = (isUser && type !== 'system' ? '> ' : '') + text;
      consoleOutput.appendChild(consoleLine);
      consoleOutput.scrollTop = consoleOutput.scrollHeight;
    }

    function clearChat() {
      gameState.chatHistory = [];
      gameState.gameSession = Date.now();
      document.getElementById('terminalLog').innerHTML = '';
      document.getElementById('consoleOutput').innerHTML = '';
      addToHistory('🆕 New chat session started!', false, 'system');
      saveGame();
    }

    function showThinking() {
      const thinkingMessages = [
        "💭 Thinking about our relationship...",
        "💭 Processing romantic feelings...",
        "💭 Considering our future together...",
        "💭 Wondering about Mars colonization...",
        "💭 Contemplating the universe..."
      ];
      
      const message = thinkingMessages[Math.floor(Math.random() * thinkingMessages.length)];
      addToHistory(message, false, 'thinking');
      
      // Remove thinking message after 2 seconds
      setTimeout(() => {
        const lines = document.querySelectorAll('.thinking');
        if (lines.length > 0) {
          lines[lines.length - 1].style.opacity = '0.5';
        }
      }, 2000);
    }

    function drainEnergy(amount = 5) {
      gameState.resources.energy = Math.max(0, gameState.resources.energy - amount);
      if (gameState.resources.energy < 50) {
        showEnergyPopup();
      }
      saveGame();
    }

    // Enhanced Commands
    const commands = {
      '/help': () => {
        const helpText = `🧭 ZEPTA Commands Available:

NAVIGATION:
• /nav home - Go to landing page
• /nav game - Go to main game  
• /nav mars - Open Mars viewer

COMPANIONS & RELATIONSHIPS:
• /connect [name] - Connect with companion
• /companion chat - Talk with companion
• /companion rename [name] - Rename companion
• /partner set [name] - Set romantic partner
• /partner status - Check partner relationship
• /marry [name] - Propose marriage
• /divorce - End marriage
• /date [name] - Go on romantic date
• /kiss [name] - Kiss someone
• /hug [name] - Hug someone
• /flirt [name] - Flirt with someone
• /breakup [name] - End relationship

FAMILY & SOCIAL:
• /baby [name] - Have baby with someone
• /family tree - Show family tree
• /friends list - Show friends
• /build home [name] - Build home for someone

RESOURCES & ENERGY:
• /energy status - Check energy level
• /energy recharge - Recharge with Solana Pay
• /credits earn [amount] - Earn credits
• /trade [resource] [amount] - Trade resources
• /resources status - Check all resources

MISSIONS & ACTIVITIES:
• /mission [type] - Start mission (costs energy)
• /explore - Explore Mars (costs energy)
• /build [structure] - Build structure
• /minigame [game] - Play mini game (costs energy)

SYSTEM:
• /theme toggle - Switch terminal/chat mode
• /chat new - Start new chat session
• /save - Save game manually
• /status - Show detailed status`;
        
        addToHistory(helpText, false);
        addXP(5);
      },

      '/nav': (args) => {
        const destinations = {
          'home': { url: 'index.html', name: '🏠 Landing Page' },
          'game': { url: 'marzo.html', name: '🎮 Main Game' },
          'mars': { url: 'mars-viewer.html', name: '🔴 Mars Viewer' }
        };
        
        if (!args || !destinations[args]) {
          addToHistory('Available destinations: ' + Object.keys(destinations).join(', '), false);
          return;
        }
        
        const dest = destinations[args];
        addToHistory(`🚀 Navigating to ${dest.name}...`, false);
        drainEnergy(2);
        addXP(10);
        setTimeout(() => window.location.href = dest.url, 1000);
      },

      '/connect': (args) => {
            if (!args) {
        addToHistory('Usage: /connect [name]', false);
        return;
      }
      
      const name = args.charAt(0).toUpperCase() + args.slice(1);
      const isAlreadyFriend = gameState.friends.some(f => f.name === name);
      if (!isAlreadyFriend) {
        gameState.friends.push({ name, type: 'colonist' });
        addToHistory(`👥 Added ${name} to your friends list!`, false);
      }
      
      if (gameState.companionName !== name) {
        gameState.companionName = name;
        localStorage.setItem('companionName', name);
        localStorage.setItem('companionImage', 'images/elena.png'); // Default image for non-Errin/Elena names
        if (gameState.relationship === 'stranger') {
          gameState.relationship = 'friend';
        }
        addToHistory(`🤖 ${name} has joined your mission as your companion!`, false);
        triggerCompanionPopup(name);
      } else {
        addToHistory(`🤖 ${name} is already your companion!`, false);
      }
      
      addXP(25);
      drainEnergy(3);
      saveGame();
    },

      // '/connect': (args) => {
      //   if (!args) {
      //     addToHistory('Usage: /connect [name]', false);
      //     return;
      //   }
        
      //   gameState.companionName = args.charAt(0).toUpperCase() + args.slice(1);
      //   if (gameState.relationship === 'stranger') {
      //     gameState.relationship = 'friend';
      //   }
      //   addToHistory(`🤖 ${gameState.companionName} has joined your mission!`, false);
      //   addXP(25);
      //   drainEnergy(3);
      //   saveGame();
      // },

      '/companion': (args) => {
        const subCommands = args?.split(' ');
        const action = subCommands?.[0];
        
        switch (action) {
          case 'chat':
            showThinking();
            setTimeout(() => {
              const responses = [
                `${gameState.companionName}: The Martian sunset is breathtaking today! `,
                `${gameState.companionName}: I've been analyzing the atmospheric data...`,
                `${gameState.companionName}: How are you feeling about our mission?`,
                `${gameState.companionName}: The red planet holds so many mysteries.`,
                `${gameState.companionName}: I enjoy our conversations together.`
              ];
              addToHistory(responses[Math.floor(Math.random() * responses.length)], false);
            }, 1500);
            addXP(5);
            drainEnergy(2);
            break;
            
          case 'rename':
            const newName = subCommands?.slice(1).join(' ');
            if (newName) {
              gameState.companionName = newName;
              addToHistory(`✅ Companion renamed to ${newName}`, false);
              addXP(10);
            } else {
              addToHistory('Usage: /companion rename [new name]', false);
            }
            break;
            
          default:
            addToHistory('Companion actions: chat, rename', false);
        }
        saveGame();
      },

      '/partner': (args) => {
        const subCommands = args?.split(' ');
        const action = subCommands?.[0];
        const name = subCommands?.slice(1).join(' ');
        
        switch (action) {
          case 'set':
            if (name) {
              gameState.partnerName = name;
              gameState.relationship = 'partner';
              addToHistory(`💕 ${name} is now your romantic partner!`, false);
              addXP(50);
            } else {
              addToHistory('Usage: /partner set [name]', false);
            }
            break;
            
          case 'status':
            if (gameState.partnerName) {
              addToHistory(`💞 Your partner: ${gameState.partnerName} (${gameState.relationship})`, false);
            } else {
              addToHistory('💔 You don\'t have a romantic partner yet.', false);
            }
            break;
            
          default:
            addToHistory('Partner actions: set, status', false);
        }
        saveGame();
      },

      '/marry': (args) => {
        if (!args) {
          addToHistory('Usage: /marry [name]', false);
          return;
        }
        
        if (gameState.partnerName === args || gameState.relationship === 'soulmate') {
          gameState.marriedTo = args;
          gameState.relationship = 'married';
          addToHistory(`💒 Congratulations! You married ${args} on Mars! 🎉`, false);
          addXP(100);
          drainEnergy(10);
        } else {
          addToHistory(`💔 You need to be in a committed relationship first.`, false);
        }
        saveGame();
      },

      '/divorce': () => {
        if (gameState.marriedTo) {
          const ex = gameState.marriedTo;
          gameState.marriedTo = null;
          gameState.partnerName = null;
          gameState.relationship = 'friend';
          addToHistory(`💔 You divorced ${ex}. You're now single.`, false);
          addXP(20);
        } else {
          addToHistory('💔 You\'re not married to anyone.', false);
        }
        saveGame();
      },

      '/date': (args) => {
        if (!args) {
          addToHistory('Usage: /date [name]', false);
          return;
        }
        
        if (gameState.partnerName && gameState.partnerName !== args) {
          showPartnerReaction('date', args);
        }
        
        showThinking();
        setTimeout(() => {
          addToHistory(`🌹 You went on a romantic date with ${args} under the Martian stars!`, false);
          addXP(30);
          drainEnergy(15);
        }, 2000);
        saveGame();
      },

      '/kiss': (args) => {
        if (!args) {
          addToHistory('Usage: /kiss [name]', false);
          return;
        }
        
        if (gameState.partnerName && gameState.partnerName !== args) {
          showPartnerReaction('kiss', args);
        }
        
        if (['partner', 'soulmate', 'married'].includes(gameState.relationship) || args === gameState.companionName) {
          addToHistory(`😘 You kissed ${args}! They blush warmly.`, false);
          addXP(25);
        } else {
          addToHistory(`😳 ${args} isn't ready for kisses yet.`, false);
        }
        drainEnergy(3);
        saveGame();
      },

      '/hug': (args) => {
        if (!args) {
          addToHistory('Usage: /hug [name]', false);
          return;
        }
        
        if (gameState.relationship !== 'stranger') {
          addToHistory(`🤗 You hugged ${args}! They seem happy.`, false);
          addXP(15);
        } else {
          addToHistory(`😕 ${args} isn't ready for hugs yet.`, false);
        }
        drainEnergy(2);
        saveGame();
      },

      '/flirt': (args) => {
        if (!args) {
          addToHistory('Usage: /flirt [name]', false);
          return;
        }
        
        if (gameState.partnerName && gameState.partnerName !== args) {
          showPartnerReaction('flirt', args);
        }
        
        addToHistory(`😉 You flirted with ${args}! They seem interested.`, false);
        addXP(20);
        drainEnergy(5);
        saveGame();
      },

      '/baby': (args) => {
        if (!args) {
          addToHistory('Usage: /baby [name]', false);
          return;
        }
        
        if (gameState.partnerName && gameState.partnerName !== args) {
          showPartnerReaction('baby', args);
        }
        
        const babyName = `Baby-${Math.random().toString(36).substr(2, 5)}`;
        gameState.children.push({ name: babyName, parent1: 'You', parent2: args, born: Date.now() });
        addToHistory(`👶 Congratulations! You had a baby (${babyName}) with ${args}!`, false);
        addXP(200);
        drainEnergy(20);
        saveGame();
      },

      '/breakup': (args) => {
        if (!args) {
          addToHistory('Usage: /breakup [name]', false);
          return;
        }
        
        if (gameState.partnerName === args) {
          gameState.partnerName = null;
          gameState.relationship = 'friend';
          addToHistory(`💔 You broke up with ${args}. You're now single.`, false);
          addXP(10);
        } else {
          addToHistory(`💔 You're not in a relationship with ${args}.`, false);
        }
        saveGame();
      },

      '/family': (args) => {
        if (args === 'tree') {
          let tree = '🌳 FAMILY TREE:\n';
          if (gameState.marriedTo) tree += `💒 Married to: ${gameState.marriedTo}\n`;
          if (gameState.children.length) {
            tree += `👶 Children: ${gameState.children.map(c => c.name).join(', ')}\n`;
          }
          if (gameState.friends.length) {
            tree += `👥 Friends: ${gameState.friends.map(f => f.name).join(', ')}\n`;
          }
          if (!gameState.marriedTo && !gameState.children.length && !gameState.friends.length) {
            tree += 'No family connections yet.';
          }
          addToHistory(tree, false);
        }
      },

      '/friends': (args) => {
        if (args === 'list') {
          if (gameState.friends.length === 0) {
            addToHistory('👥 You have no friends yet. Use /connect to make friends!', false);
          } else {
            const friendsList = gameState.friends.map(f => `${f.name} (${f.type})`).join(', ');
            addToHistory(`👥 Your friends: ${friendsList}`, false);
          }
        }
      },

      '/build': (args) => {
        const subCommands = args?.split(' ');
        const action = subCommands?.[0];
        const target = subCommands?.slice(1).join(' ');
        
        if (action === 'home' && target) {
          addToHistory(`🏠 Building a home for ${target}... Construction started!`, false);
          gameState.resources.shelter += 20;
          addXP(75);
          drainEnergy(25);
        } else {
          const structures = ['solar_dome', 'habitat', 'greenhouse', 'landing_pad'];
          if (structures.includes(args)) {
            addToHistory(`🏗️ Building ${args.replace('_', ' ')}... Construction initiated!`, false);
            gameState.resources.shelter += 10;
            addXP(50);
            drainEnergy(20);
          } else {
            addToHistory('Usage: /build [home [name] | solar_dome | habitat | greenhouse | landing_pad]', false);
          }
        }
        saveGame();
      },

      '/energy': (args) => {
        if (args === 'status') {
          addToHistory(`⚡ Current energy: ${Math.round(gameState.resources.energy)}%`, false);
        } else if (args === 'recharge') {
          showEnergyPopup();
        } else {
          addToHistory('Energy commands: status, recharge', false);
        }
      },

      '/credits': (args) => {
        const subCommands = args?.split(' ');
        const action = subCommands?.[0];
        const amount = parseInt(subCommands?.[1]) || 100;
        
        if (action === 'earn') {
          gameState.resources.credits += amount;
          addToHistory(`💰 Earned ${amount} credits!`, false);
          addXP(amount / 10);
          drainEnergy(5);
        } else {
          addToHistory(`💰 Current credits: ${gameState.resources.credits}`, false);
        }
        saveGame();
      },

      '/trade': (args) => {
        const subCommands = args?.split(' ');
        const resource = subCommands?.[0];
        const amount = parseInt(subCommands?.[1]) || 10;
        
        if (resource && gameState.resources[resource] !== undefined) {
          if (gameState.resources[resource] >= amount) {
            gameState.resources[resource] -= amount;
            gameState.resources.credits += amount * 5;
            addToHistory(`💱 Traded ${amount} ${resource} for ${amount * 5} credits!`, false);
            addXP(amount * 2);
            drainEnergy(5);
          } else {
            addToHistory(`❌ Not enough ${resource} to trade.`, false);
          }
        } else {
          addToHistory('Usage: /trade [resource] [amount]', false);
        }
        saveGame();
      },

      '/mission': (args) => {
        if (gameState.resources.energy < 20) {
          addToHistory('⚠️ Not enough energy for missions! Recharge first.', false);
          showEnergyPopup();
          return;
        }
        
        const missions = {
          'explore': '🧭 Exploration mission completed! Discovered new terrain.',
          'build': '🏗️ Construction mission successful! Infrastructure improved.',
          'science': '🔬 Scientific research mission complete! Data collected.',
          'rescue': '🚑 Rescue mission accomplished! Lives saved.'
        };
        
        if (missions[args]) {
          addToHistory(missions[args], false);
          addXP(40);
          drainEnergy(20);
          gameState.missions.push(args);
        } else {
          addToHistory('Available missions: ' + Object.keys(missions).join(', '), false);
        }
        saveGame();
      },

      '/minigame': (args) => {
        if (gameState.resources.energy < 10) {
          addToHistory('⚠️ Not enough energy for games! Recharge first.', false);
          showEnergyPopup();
          return;
        }
        
        const games = ['snake', 'poker', 'word', 'space'];
        if (games.includes(args)) {
          addToHistory(`🎮 Starting ${args} mini-game... Have fun!`, false);
          addXP(15);
          drainEnergy(10);
          // Here you could redirect to the actual game
        } else {
          addToHistory('Available games: ' + games.join(', '), false);
        }
        saveGame();
      },

      '/explore': () => {
        if (gameState.resources.energy < 15) {
          addToHistory('⚠️ Not enough energy to explore! Recharge first.', false);
          showEnergyPopup();
          return;
        }
        
        const discoveries = [
          '🔴 Discovered ancient Martian ruins!',
          '💎 Found rare crystals in a cave!',
          '🌡️ Located a natural heat source!',
          '💧 Discovered underground water reserves!',
          '👽 Found signs of possible ancient life!'
        ];
        
        addToHistory(discoveries[Math.floor(Math.random() * discoveries.length)], false);
        addXP(35);
        drainEnergy(15);
        saveGame();
      },

      '/resources': (args) => {
        if (args === 'status') {
          const r = gameState.resources;
          addToHistory(`📊 RESOURCE STATUS:
💰 Money: ${r.money} | 🫁 Oxygen: ${r.oxygen}% | 💧 Water: ${r.water}L
🍖 Food: ${r.food} | 🏠 Shelter: ${r.shelter} | ⚡ Energy: ${Math.round(r.energy)}%
⛽ Fuel: ${r.fuel}L | 🚗 Rover: ${r.rover} | 💳 Credits: ${r.credits}
💎 Data Crystals: ${r.data_crystals}`, false);
          addXP(5);
        }
      },

      '/theme': (args) => {
        if (args === 'toggle') {
          toggleTheme();
        } else {
          addToHistory('Usage: /theme toggle', false);
        }
      },

      '/chat': (args) => {
        if (args === 'new') {
          clearChat();
        } else {
          addToHistory('Chat commands: new', false);
        }
      },

      '/save': () => {
        saveGame();
        addToHistory('💾 Game saved successfully.', false);
      },

      '/status': () => {
        addToHistory(`📊 DETAILED STATUS:
👤 Player: Level ${gameState.level} (${gameState.xp} XP)
💕 Relationship: ${gameState.relationship} with ${gameState.companionName}
${gameState.partnerName ? `💖 Partner: ${gameState.partnerName}` : ''}
${gameState.marriedTo ? `💒 Married to: ${gameState.marriedTo}` : ''}
👥 Friends: ${gameState.friends.length}
👶 Children: ${gameState.children.length}
🎯 Missions completed: ${gameState.missions.length}
⏰ Session started: ${new Date(gameState.gameSession).toLocaleTimeString()}`, false);
      }
    };
    
//     function showSuggestions(input) {
//   const suggestions = document.getElementById('suggestions');
//   suggestions.innerHTML = '';
  
//   if (!input.startsWith('/')) {
//     suggestions.style.display = 'none';
//     return;
//   }
  
//   const inputParts = input.split(' ');
//   const command = inputParts[0];
//   const availableCommands = Object.keys(commands).filter(cmd => cmd.startsWith(command));
  
//   if (availableCommands.length > 0) {
//     suggestions.style.display = 'block'; // Change from classList.add('active')
//     availableCommands.forEach(cmd => {
//       const item = document.createElement('div');
//       item.className = 'suggestion-item';
//       item.textContent = cmd;
//       item.addEventListener('click', () => {
//         document.getElementById('terminalInput').value = cmd + ' ';
//         suggestions.style.display = 'none';
//         document.getElementById('terminalInput').focus();
//       });
//       suggestions.appendChild(item);
//     });
//   } else {
//     suggestions.style.display = 'none'; // Change from classList.remove('active')
//   }
// }

//     function showSuggestions(input) {
//   const suggestions = document.getElementById('suggestions');
//   const terminalInput = document.getElementById('terminalInput');

//   suggestions.innerHTML = '';

//   if (!input.startsWith('/')) {
//     suggestions.style.display = 'none';
//     return;
//   }

//   const inputParts = input.split(' ');
//   const command = inputParts[0];
//   const availableCommands = Object.keys(commands).filter(cmd => cmd.startsWith(command));

//   if (availableCommands.length > 0) {
//     suggestions.style.display = 'block';

//     availableCommands.forEach(cmd => {
//       const item = document.createElement('div');
//       item.className = 'suggestion-item';
//       item.textContent = cmd;

//       // Support for both touch and mouse
//       const selectCommand = (e) => {
//         e.preventDefault(); // Prevent input blur on mobile
//         terminalInput.value = cmd + ' ';
//         suggestions.innerHTML = '';
//         suggestions.style.display = 'none';
//         terminalInput.focus();
//       };

//       item.addEventListener('mousedown', selectCommand);
//       item.addEventListener('touchstart', selectCommand);

//       suggestions.appendChild(item);
//     });
//   } else {
//     suggestions.style.display = 'none';
//   }
// }
function showSuggestions(input, isTerminalMode = false) {
  const suggestionsContainer = isTerminalMode 
    ? document.getElementById('terminalSuggestions')
    : document.getElementById('suggestions');
    
  const inputElement = isTerminalMode 
    ? document.getElementById('terminalCommandInput')
    : document.getElementById('terminalInput');
  
  suggestionsContainer.innerHTML = '';
  
  if (!input.startsWith('/')) {
    suggestionsContainer.style.display = 'none';
    return;
  }
  
  const inputParts = input.split(' ');
  const command = inputParts[0];
  const availableCommands = Object.keys(commands).filter(cmd => cmd.startsWith(command));
  
  if (availableCommands.length > 0) {
    suggestionsContainer.style.display = 'block';
    availableCommands.forEach(cmd => {
      const item = document.createElement('div');
      item.className = 'suggestion-item';
      item.textContent = cmd;
      item.addEventListener('click', () => {
        inputElement.value = cmd + ' ';
        suggestionsContainer.style.display = 'none';
        inputElement.focus();
      });
      suggestionsContainer.appendChild(item);
    });
  } else {
    suggestionsContainer.style.display = 'none';
  }
}
//   const commandDescriptions = {
//   '/help': 'Show all available commands',
//   '/nav': 'Navigate to different pages',
//   '/connect': 'Connect with a companion',
//   '/companion': 'Interact with your companion',
//   '/partner': 'Manage romantic relationships',
//   '/marry': 'Propose marriage',
//   '/energy': 'Check or recharge energy',
//   '/credits': 'Manage credits',
//   '/mission': 'Start a mission',
//   '/explore': 'Explore Mars',
//   '/theme': 'Toggle between chat/terminal modes',
//   // Add more as needed
// };
function showTerminalSuggestions(input) {
  const suggestionsContainer = document.getElementById('terminalSuggestions');
  const inputElement = document.getElementById('terminalCommandInput');
  
  suggestionsContainer.innerHTML = '';
  
  if (!input.startsWith('/')) {
    suggestionsContainer.classList.remove('active');
    return;
  }
  
  const inputParts = input.split(' ');
  const command = inputParts[0];
  const availableCommands = Object.keys(commands).filter(cmd => cmd.startsWith(command));
  
  if (availableCommands.length > 0) {
    suggestionsContainer.classList.add('active');
    availableCommands.forEach(cmd => {
      const item = document.createElement('div');
      item.className = 'suggestion-item';
      item.innerHTML = `
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span style="color: #00ff99; font-weight: bold;">${cmd}</span>
          <span style="color: #888; font-size: 0.75rem; font-style: italic;">
            ${commandDescriptions[cmd] || 'Command'}
          </span>
        </div>
      `;
      
      item.addEventListener('click', () => {
        inputElement.value = cmd + ' ';
        suggestionsContainer.classList.remove('active');
        inputElement.focus();
      });
      suggestionsContainer.appendChild(item);
    });
  } else {
    suggestionsContainer.classList.remove('active');
  }
}

// Ensure event listener is attached
document.getElementById('terminalCommandInput').addEventListener('input', (e) => {
  showTerminalSuggestions(e.target.value.trim());
});

// Update event listeners
document.getElementById('terminalInput').addEventListener('input', (e) => {
  showSuggestions(e.target.value.trim(), false); // Chat mode
});

// document.getElementById('terminalCommandInput').addEventListener('input', (e) => {
//   showTerminalSuggestions(e.target.value.trim());
// });

// Hide suggestions when clicking outside
  document.addEventListener('click', (e) => {
  const chatSuggestions = document.getElementById('suggestions');
  const terminalSuggestions = document.getElementById('terminalSuggestions');
  const chatInput = document.getElementById('terminalInput');
  const terminalInput = document.getElementById('terminalCommandInput');
  
  if (!chatInput.contains(e.target) && !chatSuggestions.contains(e.target)) {
    chatSuggestions.style.display = 'none';
  }
  
  if (!terminalInput.contains(e.target) && !terminalSuggestions.contains(e.target)) {
    terminalSuggestions.classList.remove('active');
  }
});

document.addEventListener('mousedown', function(e) {
  if (!e.target.closest('#suggestions') && e.target.id !== 'terminalInput') {
    document.getElementById('suggestions').style.display = 'none';
  }
});

document.addEventListener('touchstart', function(e) {
  if (!e.target.closest('#suggestions') && e.target.id !== 'terminalInput') {
    document.getElementById('suggestions').style.display = 'none';
  }
});

    function processCommand(input) {
      if (input.startsWith('/')) {
        const [command, ...args] = input.split(' ');
        const cmdFunction = commands[command.toLowerCase()];
        if (cmdFunction) {
          cmdFunction(args.join(' ').toLowerCase());
        } else {
          addToHistory(`❌ Unknown command '${command}'. Type /help for available commands.`, false);
        }
      } else if (input) {
        addToHistory(`${gameState.companionName}: I understand commands starting with /. Try /help!`, false);
      }
    }

    function toggleTheme(save = true) {
      isTerminalMode = !isTerminalMode;
      document.body.classList.toggle('terminal-mode', isTerminalMode);
      document.body.classList.toggle('chat-mode', !isTerminalMode);
      
      const themeToggle = document.getElementById('themeToggle');
      themeToggle.innerHTML = isTerminalMode 
        ? '<i class="fas fa-comments"></i><span>Chat</span>' 
        : '<i class="fas fa-code"></i><span>Terminal</span>';
      
      if (save) {
        gameState.theme = isTerminalMode ? 'terminal' : 'chat';
        saveGame();
      }
      
      if (isTerminalMode) {
        setTimeout(() => {
          document.getElementById('terminalCommandInput').focus();
        }, 100);
      }
    }

    // Event Listeners
    document.getElementById('themeToggle').addEventListener('click', () => toggleTheme());

    document.getElementById('newChatBtn').addEventListener('click', clearChat);

    document.getElementById('runBtn').addEventListener('click', () => {
      const input = document.getElementById('terminalCommandInput').value.trim();
      if (input) {
        addToHistory(input, true);
        processCommand(input);
        document.getElementById('terminalCommandInput').value = '';
      }
    });

    document.getElementById('terminalCommandInput').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        document.getElementById('runBtn').click();
      }
    });

    document.getElementById('sendBtn').addEventListener('click', () => {
      const input = document.getElementById('terminalInput').value.trim();
      if (input) {
        addToHistory(input, true);
        processCommand(input);
        document.getElementById('terminalInput').value = '';
      }
    });

    document.getElementById('terminalInput').addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        document.getElementById('sendBtn').click();
      }
    });
    document.getElementById('terminalInput').addEventListener('input', (e) => {
  showSuggestions(e.target.value.trim());
});

//     document.getElementById('terminalCommandInput').addEventListener('input', (e) => {
//   // You could show suggestions for terminal mode too if desired
//   showSuggestions(e.target.value.trim());
// });
    // Close popups when clicking outside
    document.querySelectorAll('.popup-overlay').forEach(overlay => {
      overlay.addEventListener('click', (e) => {
        if (e.target === overlay) {
          overlay.style.display = 'none';
        }
      });
    });

    // Auto-save every 30 seconds
    setInterval(saveGame, 30000);

    // Initialize welcome message
    setTimeout(() => {
      if (gameState.chatHistory.length <= 1) {
        addToHistory(`Welcome back to Mars, Commander! I'm ${gameState.companionName}, your AI companion.`, false);
        addToHistory(`Your energy is at ${Math.round(gameState.resources.energy)}%. Type /help to see what we can do together!`, false);
      }
    }, 1000);
  </script>
  <script>
    // Admin Integration Bridge - Add this to your main game file (marzo.html or me.html)
class MarsoVersePlayerManager {
  constructor() {
    this.playerId = null;
    this.playerProfile = null;
    this.adminChannel = null;
    this.init();
  }

  async init() {
    await this.initializePlayer();
    this.setupAdminBridge();
    this.startPeriodicSync();
  }

  async initializePlayer() {
    // Generate player ID from wallet or create anonymous
    const walletAddress = localStorage.getItem('walletAddress');
    if (walletAddress) {
      this.playerId = await this.generatePlayerId(walletAddress);
    } else {
      this.playerId = this.generateAnonymousId();
    }

    // Load or create player profile
    this.playerProfile = this.loadPlayerProfile();
    localStorage.setItem('currentPlayerId', this.playerId);
    
    // Sync with admin
    this.syncWithAdmin('player_login', {
      playerId: this.playerId,
      profile: this.playerProfile
    });
  }

  generateAnonymousId() {
    return 'anon_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
  }

  async generatePlayerId(walletAddress) {
    let hash = 0;
    for (let i = 0; i < walletAddress.length; i++) {
      const char = walletAddress.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return 'player_' + Math.abs(hash).toString(36);
  }

  loadPlayerProfile() {
    // Check if player exists in admin system first
    const adminPlayers = JSON.parse(localStorage.getItem('marsoverse_players') || '[]');
    const existingPlayer = adminPlayers.find(p => p.id === this.playerId || p.name === localStorage.getItem('playerName'));
    
    if (existingPlayer) {
      return this.convertFromAdminFormat(existingPlayer);
    }

    // Create new profile compatible with admin system
    const profile = {
      id: this.playerId,
      name: localStorage.getItem('playerName') || `Explorer_${this.playerId.slice(-6)}`,
      age: parseInt(localStorage.getItem('playerAge')) || 25,
      xp: parseInt(localStorage.getItem('playerXP')) || 0,
      companion: localStorage.getItem('companionName') || 'Elena',
      cyborg: localStorage.getItem('cyborgName') || 'Jeremy',
      wallet: parseFloat(localStorage.getItem('walletBalance')) || 0,
      status: 'online',
      lastActive: new Date().toISOString(),
      createdAt: new Date().toISOString(),
      // Game-specific data
      gameData: {
        level: gameState?.level || 1,
        energy: gameState?.resources?.energy || 100,
        credits: gameState?.resources?.credits || 1000,
        relationship: gameState?.relationship || 'stranger',
        achievements: gameState?.achievements || [],
        missions: gameState?.missions || []
      }
    };

    this.addToAdminSystem(profile);
    return profile;
  }

  convertFromAdminFormat(adminPlayer) {
    return {
      id: adminPlayer.id,
      name: adminPlayer.name,
      age: adminPlayer.age,
      xp: adminPlayer.xp,
      companion: adminPlayer.companion,
      cyborg: adminPlayer.cyborg,
      wallet: adminPlayer.wallet,
      status: adminPlayer.status,
      lastActive: adminPlayer.lastActive,
      createdAt: adminPlayer.createdAt,
      gameData: adminPlayer.gameData || {}
    };
  }

  addToAdminSystem(profile) {
    const adminPlayers = JSON.parse(localStorage.getItem('marsoverse_players') || '[]');
    
    // Check if player already exists
    const existingIndex = adminPlayers.findIndex(p => p.id === profile.id);
    
    if (existingIndex >= 0) {
      // Update existing player
      adminPlayers[existingIndex] = {
        ...adminPlayers[existingIndex],
        ...profile,
        lastActive: new Date().toISOString()
      };
    } else {
      // Add new player
      adminPlayers.push(profile);
    }
    
    localStorage.setItem('marsoverse_players', JSON.stringify(adminPlayers));
  }

  updateStats() {
    if (!this.playerProfile) return;

    // Update profile with current game state
    this.playerProfile.xp = parseInt(localStorage.getItem('playerXP')) || 0;
    this.playerProfile.wallet = parseFloat(localStorage.getItem('walletBalance')) || 0;
    this.playerProfile.lastActive = new Date().toISOString();
    this.playerProfile.status = 'online';
    
    if (typeof gameState !== 'undefined') {
      this.playerProfile.gameData = {
        level: gameState.level || 1,
        energy: gameState.resources?.energy || 100,
        credits: gameState.resources?.credits || 1000,
        relationship: gameState.relationship || 'stranger',
        achievements: gameState.achievements || [],
        missions: gameState.missions || []
      };
    }

    // Update admin system
    this.addToAdminSystem(this.playerProfile);
  }

  logPurchase(packType, amount, txHash = null) {
    const purchase = {
      id: Date.now(),
      playerId: this.playerId,
      playerName: this.playerProfile.name,
      packType,
      amount,
      txHash,
      timestamp: new Date().toISOString(),
      walletAddress: localStorage.getItem('walletAddress')
    };

    // Log to admin system
    const purchases = JSON.parse(localStorage.getItem('marsoverse_purchases') || '[]');
    purchases.push(purchase);
    localStorage.setItem('marsoverse_purchases', JSON.stringify(purchases));

    // Update player wallet balance
    this.playerProfile.wallet += amount;
    this.updateStats();

    // Notify admin
    this.syncWithAdmin('purchase_made', purchase);
  }

  setupAdminBridge() {
    // Setup BroadcastChannel if available
    if (typeof BroadcastChannel !== 'undefined') {
      this.adminChannel = new BroadcastChannel('marsoverse_admin');
      
      this.adminChannel.addEventListener('message', (event) => {
        this.handleAdminMessage(event.data);
      });
    }

    // Listen for admin commands via localStorage
    window.addEventListener('storage', (e) => {
      if (e.key === 'marsoverse_admin_command') {
        const command = JSON.parse(e.newValue || '{}');
        this.handleAdminCommand(command);
      }
    });
  }

  handleAdminMessage(data) {
    if (data.playerId && data.playerId !== this.playerId) return;

    switch (data.type) {
      case 'update_xp':
        this.updateXPFromAdmin(data.newXP);
        break;
      case 'add_credits':
        this.addCreditsFromAdmin(data.amount);
        break;
      case 'recharge_energy':
        this.rechargeEnergyFromAdmin(data.amount);
        break;
      case 'force_refresh':
        this.forceRefresh();
        break;
    }
  }

  handleAdminCommand(command) {
    if (command.playerId && command.playerId !== this.playerId) return;
    this.handleAdminMessage(command);
  }

  updateXPFromAdmin(newXP) {
    if (typeof gameStateManager !== 'undefined' && gameStateManager.addXP) {
      const currentXP = parseInt(localStorage.getItem('playerXP')) || 0;
      const difference = newXP - currentXP;
      if (difference > 0) {
        gameStateManager.addXP(difference);
      } else {
        localStorage.setItem('playerXP', newXP.toString());
      }
    } else {
      localStorage.setItem('playerXP', newXP.toString());
    }
    
    this.updateStats();
    this.showAdminNotification(`XP updated to ${newXP} by admin`);
  }

  addCreditsFromAdmin(amount) {
    if (typeof gameStateManager !== 'undefined' && gameStateManager.addCredits) {
      gameStateManager.addCredits(amount);
    } else {
      const currentCredits = parseFloat(localStorage.getItem('walletBalance')) || 0;
      localStorage.setItem('walletBalance', (currentCredits + amount).toString());
    }
    
    this.updateStats();
    this.showAdminNotification(`Received ${amount} credits from admin`);
  }

  rechargeEnergyFromAdmin(amount) {
    if (typeof gameStateManager !== 'undefined' && gameStateManager.rechargeEnergy) {
      gameStateManager.rechargeEnergy(amount);
    }
    
    this.updateStats();
    this.showAdminNotification(`Energy recharged by ${amount}% by admin`);
  }

  forceRefresh() {
    this.updateStats();
    if (typeof updateStatusDisplay === 'function') {
      updateStatusDisplay();
    }
    this.showAdminNotification('Game state refreshed by admin');
  }

  showAdminNotification(message) {
    // Show notification in game if addToHistory function exists
    if (typeof addToHistory === 'function') {
      addToHistory(`🛡️ Admin: ${message}`, false, 'system');
    } else {
      console.log(`[Admin] ${message}`);
    }
  }

  syncWithAdmin(eventType, data) {
    const adminEvent = {
      timestamp: new Date().toISOString(),
      type: eventType,
      playerId: this.playerId,
      playerName: this.playerProfile?.name,
      data: data
    };

    // Send via BroadcastChannel
    if (this.adminChannel) {
      this.adminChannel.postMessage(adminEvent);
    }

    // Store in admin log
    const adminLog = JSON.parse(localStorage.getItem('marsoverse_admin_log') || '[]');
    adminLog.push(adminEvent);
    
    // Keep only last 100 events
    if (adminLog.length > 100) {
      adminLog.splice(0, adminLog.length - 100);
    }
    
    localStorage.setItem('marsoverse_admin_log', JSON.stringify(adminLog));
  }

  startPeriodicSync() {
    // Update stats every 30 seconds
    setInterval(() => {
      this.updateStats();
    }, 30000);

    // Send heartbeat every 60 seconds
    setInterval(() => {
      this.syncWithAdmin('heartbeat', {
        timestamp: new Date().toISOString(),
        gameState: typeof gameState !== 'undefined' ? gameState : null
      });
    }, 60000);
  }

  // Method to go offline when leaving
  goOffline() {
    if (this.playerProfile) {
      this.playerProfile.status = 'offline';
      this.playerProfile.lastActive = new Date().toISOString();
      this.addToAdminSystem(this.playerProfile);
      
      this.syncWithAdmin('player_logout', {
        playerId: this.playerId,
        timestamp: new Date().toISOString()
      });
    }
  }
}

// Enhanced Solana Pay Manager with Admin Integration
class EnhancedSolanaPayManager {
  constructor() {
    this.playerManager = null;
    this.connection = null;
    this.network = 'devnet'; // or 'mainnet-beta'
    
    this.packs = {
      small: { name: 'Energy Boost', price: 0.01, energy: 25, credits: 0 },
      medium: { name: 'Resource Pack', price: 0.05, energy: 50, credits: 500 },
      large: { name: 'Premium Bundle', price: 0.1, energy: 100, credits: 1000 }
    };
  }

  setPlayerManager(playerManager) {
    this.playerManager = playerManager;
  }

  async processPurchase(packType) {
    if (!this.playerManager) {
      throw new Error('Player manager not initialized');
    }

    const pack = this.packs[packType];
    if (!pack) {
      throw new Error('Invalid pack type');
    }

    try {
      // Log purchase attempt
      this.playerManager.syncWithAdmin('purchase_attempted', {
        packType,
        pack,
        timestamp: new Date().toISOString()
      });

      // Create payment reference
      const reference = new Uint8Array(32);
      crypto.getRandomValues(reference);
      const referenceBase58 = this.uint8ArrayToBase58(reference);

      // Show payment modal
      this.showPaymentModal(pack, referenceBase58, packType);

      // For demo purposes, simulate successful payment after 5 seconds
      // In production, you'd implement actual Solana Pay verification
      setTimeout(() => {
        this.processSuccessfulPayment(pack, packType, referenceBase58);
      }, 5000);

    } catch (error) {
      console.error('Purchase error:', error);
      throw error;
    }
  }

  showPaymentModal(pack, reference, packType) {
    const modal = document.createElement('div');
    modal.className = 'popup-overlay';
    modal.style.display = 'flex';
    modal.innerHTML = `
      <div class="popup">
        <h3><i class="fas fa-shopping-cart"></i> Purchase ${pack.name}</h3>
        <p>Price: ${pack.price} SOL</p>
        <p>Player: ${this.playerManager?.playerProfile?.name || 'Anonymous'}</p>
        <p>You will receive:</p>
        <ul style="text-align: left; margin: 1rem 0;">
          ${pack.energy > 0 ? `<li>⚡ ${pack.energy}% Energy</li>` : ''}
          ${pack.credits > 0 ? `<li>💰 ${pack.credits} Credits</li>` : ''}
        </ul>
        <div style="text-align: center; margin: 1rem 0;">
          <div style="background: #333; padding: 1rem; border-radius: 8px;">
            <i class="fas fa-clock"></i> Simulating payment... <br>
            <small>In production, you'd scan QR code or use Phantom wallet</small>
          </div>
        </div>
        <div class="popup-buttons">
          <button class="popup-btn secondary" onclick="this.closest('.popup-overlay').remove()">
            <i class="fas fa-times"></i> Cancel
          </button>
        </div>
        <p style="font-size: 0.8rem; opacity: 0.7; margin-top: 1rem;">
          Reference: ${reference.slice(0, 8)}...
        </p>
      </div>
    `;
    
    document.body.appendChild(modal);
  }

  processSuccessfulPayment(pack, packType, reference) {
    // Apply pack benefits
    if (pack.energy > 0 && typeof gameStateManager !== 'undefined') {
      gameStateManager.rechargeEnergy(pack.energy);
    }
    if (pack.credits > 0 && typeof gameStateManager !== 'undefined') {
      gameStateManager.addCredits(pack.credits);
    }

    // Log purchase
    if (this.playerManager) {
      this.playerManager.logPurchase(packType, pack.price, reference);
    }

    // Close modal and show success
    document.querySelectorAll('.popup-overlay').forEach(modal => modal.remove());
    
    if (typeof addToHistory === 'function') {
      addToHistory(`✅ Purchase successful! Received ${pack.name}`, false, 'system');
    }

    // Update admin
    if (this.playerManager) {
      this.playerManager.syncWithAdmin('purchase_completed', {
        packType,
        pack,
        reference,
        timestamp: new Date().toISOString()
      });
    }
  }

  uint8ArrayToBase58(uint8Array) {
    // Simple base58 encoding for reference
    return btoa(String.fromCharCode.apply(null, uint8Array)).replace(/[^A-Za-z0-9]/g, '').slice(0, 16);
  }
}

// Global initialization
let marsoVersePlayerManager, enhancedSolanaPayManager;

// Initialize when DOM is ready
document.addEventListener('DOMContentLoaded', function() {
  // Initialize player management
  marsoVersePlayerManager = new MarsoVersePlayerManager();
  
  // Initialize enhanced Solana Pay
  enhancedSolanaPayManager = new EnhancedSolanaPayManager();
  enhancedSolanaPayManager.setPlayerManager(marsoVersePlayerManager);
  
  // Make available globally
  window.marsoVersePlayerManager = marsoVersePlayerManager;
  window.enhancedSolanaPayManager = enhancedSolanaPayManager;
  
  console.log('MarsoVerse Admin Integration initialized');
});

// Handle page unload
window.addEventListener('beforeunload', function() {
  if (marsoVersePlayerManager) {
    marsoVersePlayerManager.goOffline();
  }
});

// Enhanced purchase function
async function purchasePack(packType) {
  try {
    document.querySelectorAll('.popup-overlay').forEach(modal => modal.remove());
    
    if (typeof addToHistory === 'function') {
      addToHistory(`🛒 Initiating purchase for ${enhancedSolanaPayManager.packs[packType].name}...`, false, 'system');
    }
    
    await enhancedSolanaPayManager.processPurchase(packType);
  } catch (error) {
    if (typeof addToHistory === 'function') {
      addToHistory('❌ Purchase failed. Please try again.', false, 'system');
    }
    console.error('Purchase error:', error);
  }
}
  </script>
</body>
</html>




PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MarsoVerse Admin Dashboard</title>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;600;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
  <!-- Solana Web3.js -->
  <script src="https://unpkg.com/@solana/web3.js@1.70.1/lib/index.iife.min.js"></script>
  <script src="https://unpkg.com/@solana/wallet-adapter-base@0.9.19/lib/index.iife.min.js"></script>

  <!-- Honeycomb Edge Client -->
  <!-- <script src="https://unpkg.com/@honeycomb-protocol/edge-client@latest/dist/index.umd.js"></script> -->
   <script src="/scripts/honeycomb-bundle.js"></script>
    
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    :root {
      --primary-color: #00ffff;
      --secondary-color: #ff5c33;
      --bg-dark: #0a0a0a;
      --bg-card: rgba(20, 20, 20, 0.9);
      --text-color: #ffffff;
      --border-color: rgba(0, 255, 255, 0.3);
      --success-color: #00ff00;
      --warning-color: #ffaa00;
      --error-color: #ff4444;
    }

    body {
      font-family: 'Orbitron', monospace;
      background: radial-gradient(ellipse at center, #0b0814 0%, #000 100%);
      color: var(--text-color);
      min-height: 100vh;
      overflow-x: auto;
    }

    .admin-header {
      background: var(--bg-card);
      border-bottom: 2px solid var(--primary-color);
      padding: 1rem 2rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
      position: sticky;
      top: 0;
      z-index: 100;
    }

    .admin-logo {
      font-size: 1.5rem;
      font-weight: 700;
      color: var(--primary-color);
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .admin-nav {
      display: flex;
      gap: 1rem;
    }

    .nav-btn {
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--text-color);
      padding: 0.5rem 1rem;
      border-radius: 5px;
      cursor: pointer;
      transition: all 0.3s ease;
      text-decoration: none;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .nav-btn:hover {
      border-color: var(--primary-color);
      background: rgba(0, 255, 255, 0.1);
      color: var(--primary-color);
    }

    .dashboard-container {
      padding: 2rem;
      max-width: 1400px;
      margin: 0 auto;
    }

    .dashboard-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .card {
      background: var(--bg-card);
      border: 1px solid var(--border-color);
      border-radius: 10px;
      padding: 1.5rem;
      transition: all 0.3s ease;
    }

    .card:hover {
      border-color: var(--primary-color);
      box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .card-title {
      font-size: 1.2rem;
      font-weight: 600;
      color: var(--primary-color);
    }

    .stat-value {
      font-size: 2rem;
      font-weight: 700;
      color: var(--success-color);
    }

    .stat-label {
      font-size: 0.9rem;
      color: #aaa;
    }

    .users-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    .users-table th,
    .users-table td {
      padding: 0.75rem;
      text-align: left;
      border-bottom: 1px solid var(--border-color);
    }

    .users-table th {
      background: rgba(0, 255, 255, 0.1);
      color: var(--primary-color);
      font-weight: 600;
    }

    .users-table tr:hover {
      background: rgba(0, 255, 255, 0.05);
    }

    .action-btn {
      background: var(--secondary-color);
      border: none;
      color: white;
      padding: 0.25rem 0.5rem;
      border-radius: 3px;
      cursor: pointer;
      font-size: 0.8rem;
      margin: 0 0.25rem;
      transition: all 0.3s ease;
    }

    .action-btn:hover {
      background: #ff7755;
      transform: scale(1.05);
    }

    .action-btn.danger {
      background: var(--error-color);
    }

    .action-btn.success {
      background: var(--success-color);
    }

    .mission-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }

    .mission-card {
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid var(--border-color);
      border-radius: 8px;
      padding: 1rem;
      transition: all 0.3s ease;
    }

    .mission-card:hover {
      border-color: var(--primary-color);
      transform: translateY(-2px);
    }

    .mission-title {
      font-weight: 600;
      color: var(--primary-color);
      margin-bottom: 0.5rem;
    }

    .mission-reward {
      color: var(--success-color);
      font-weight: 600;
    }

    .search-container {
      margin-bottom: 1rem;
      display: flex;
      gap: 1rem;
      align-items: center;
    }

    .search-input {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      padding: 0.5rem 1rem;
      border-radius: 5px;
      flex: 1;
      font-family: 'Orbitron', monospace;
    }

    .search-input:focus {
      outline: none;
      border-color: var(--primary-color);
      box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: var(--bg-card);
      border: 2px solid var(--primary-color);
      border-radius: 10px;
      padding: 2rem;
      max-width: 500px;
      width: 90%;
      max-height: 80vh;
      overflow-y: auto;
    }

    .form-group {
      margin-bottom: 1rem;
    }

    .form-label {
      display: block;
      margin-bottom: 0.5rem;
      color: var(--primary-color);
    }

    .form-input {
      width: 100%;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid var(--border-color);
      color: var(--text-color);
      padding: 0.5rem;
      border-radius: 5px;
      font-family: 'Orbitron', monospace;
    }

    .form-input:focus {
      outline: none;
      border-color: var(--primary-color);
    }

    .btn-primary {
      background: var(--primary-color);
      color: #000;
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 5px;
      cursor: pointer;
      font-weight: 600;
      font-family: 'Orbitron', monospace;
      transition: all 0.3s ease;
    }

    .btn-primary:hover {
      background: #00cccc;
      transform: scale(1.05);
    }

    .status-indicator {
      width: 10px;
      height: 10px;
      border-radius: 50%;
      display: inline-block;
      margin-right: 0.5rem;
    }

    .status-online { background: var(--success-color); }
    .status-offline { background: #666; }
    .status-away { background: var(--warning-color); }

    .progress-bar {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
      height: 20px;
      overflow: hidden;
    }

    .progress-fill {
      background: linear-gradient(90deg, var(--primary-color), var(--success-color));
      height: 100%;
      transition: width 0.3s ease;
    }

    @media (max-width: 768px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
      
      .admin-header {
        flex-direction: column;
        gap: 1rem;
      }
      
      .admin-nav {
        flex-wrap: wrap;
      }
    }
  </style>
</head>
<body>
  <header class="admin-header">
    <div class="admin-logo">
      <i class="fas fa-shield-alt"></i>
      MarsoVerse Admin Dashboard
    </div>
    <nav class="admin-nav">
      <a href="marzo.html" class="nav-btn">
        <i class="fas fa-home"></i>
        Game Home
      </a>
      <a href="zeep.html" class="nav-btn">
        <i class="fas fa-terminal"></i>
        Terminal
      </a>
      <button class="nav-btn" onclick="refreshData()">
        <i class="fas fa-sync-alt"></i>
        Refresh
      </button>
    </nav>
  </header>

  <div class="dashboard-container">
    <!-- Overview Stats -->
    <div class="dashboard-grid">
      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Total Players</h3>
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-value" id="totalPlayers">0</div>
        <div class="stat-label">Active Adventurers</div>
      </div>

      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Total XP Earned</h3>
          <i class="fas fa-star"></i>
        </div>
        <div class="stat-value" id="totalXP">0</div>
        <div class="stat-label">Experience Points</div>
      </div>

      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Missions Completed</h3>
          <i class="fas fa-trophy"></i>
        </div>
        <div class="stat-value" id="totalMissions">0</div>
        <div class="stat-label">Total Achievements</div>
      </div>

      <div class="card">
        <div class="card-header">
          <h3 class="card-title">Online Players</h3>
          <i class="fas fa-wifi"></i>
        </div>
        <div class="stat-value" id="onlinePlayers">0</div>
        <div class="stat-label">Currently Active</div>
      </div>
    </div>

    <!-- Player Management -->
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Player Management</h3>
        <button class="btn-primary" onclick="showAddPlayerModal()">
          <i class="fas fa-user-plus"></i>
          Add Player
        </button>
      </div>
      
      <div class="search-container">
        <input type="text" class="search-input" placeholder="Search players..." id="playerSearch">
        <button class="btn-primary" onclick="exportPlayerData()">
          <i class="fas fa-download"></i>
          Export Data
        </button>
      </div>

      <div style="overflow-x: auto;">
        <table class="users-table">
          <thead>
            <tr>
              <th>Status</th>
              <th>Name</th>
              <th>Age</th>
              <th>XP</th>
              <th>Companion</th>
              <th>Cyborg</th>
              <th>Wallet</th>
              <th>Last Active</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="playersTableBody">
            <!-- Players will be populated here -->
          </tbody>
        </table>
      </div>
    </div>

    <!-- Mission Management -->
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Mission Management</h3>
        <button class="btn-primary" onclick="showAddMissionModal()">
          <i class="fas fa-plus"></i>
          Create Mission
        </button>
      </div>
      
      <div class="mission-grid" id="missionGrid">
        <!-- Missions will be populated here -->
      </div>
    </div>

    <!-- Honeycomb Integration Status -->
    <div class="card">
      <div class="card-header">
        <h3 class="card-title">Honeycomb Protocol Status</h3>
        <span class="status-indicator status-online"></span>
      </div>
      <div id="honeycombStatus">
        <p>✅ Connected to Honeycomb Protocol</p>
        <p>🔗 Mission tracking active</p>
        <p>📊 XP synchronization enabled</p>
        <p>🏆 Leaderboard integration ready</p>
      </div>
    </div>
  </div>

  <!-- Add Player Modal -->
  <div class="modal" id="addPlayerModal">
    <div class="modal-content">
      <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Add New Player</h3>
      <form id="addPlayerForm">
        <div class="form-group">
          <label class="form-label">Player Name</label>
          <input type="text" class="form-input" id="playerName" required>
        </div>
        <div class="form-group">
          <label class="form-label">Age</label>
          <input type="number" class="form-input" id="playerAge" min="18" max="100" required>
        </div>
        <div class="form-group">
          <label class="form-label">Starting XP</label>
          <input type="number" class="form-input" id="playerXP" value="0" min="0">
        </div>
        <div class="form-group">
          <label class="form-label">Companion</label>
          <select class="form-input" id="playerCompanion">
            <option value="Elena">Elena</option>
            <option value="Errin">Errin</option>
          </select>
        </div>
        <div class="form-group">
          <label class="form-label">Cyborg Name</label>
          <input type="text" class="form-input" id="playerCyborg" value="Jeremy">
        </div>
        <div style="display: flex; gap: 1rem; margin-top: 2rem;">
          <button type="submit" class="btn-primary">Add Player</button>
          <button type="button" class="btn-primary" onclick="closeModal('addPlayerModal')" 
                  style="background: var(--error-color);">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Add Mission Modal -->
  <div class="modal" id="addMissionModal">
    <div class="modal-content">
      <h3 style="color: var(--primary-color); margin-bottom: 1rem;">Create New Mission</h3>
      <form id="addMissionForm">
        <div class="form-group">
          <label class="form-label">Mission Title</label>
          <input type="text" class="form-input" id="missionTitle" required>
        </div>
        <div class="form-group">
          <label class="form-label">Description</label>
          <textarea class="form-input" id="missionDescription" rows="3" required></textarea>
        </div>
        <div class="form-group">
          <label class="form-label">XP Reward</label>
          <input type="number" class="form-input" id="missionXP" min="1" required>
        </div>
        <div class="form-group">
          <label class="form-label">USD Reward</label>
          <input type="number" class="form-input" id="missionUSD" step="0.01" min="0">
        </div>
        <div class="form-group">
          <label class="form-label">Mission Type</label>
          <select class="form-input" id="missionType">
            <option value="survival">Survival</option>
            <option value="exploration">Exploration</option>
            <option value="companion">Companion Interaction</option>
            <option value="combat">Combat</option>
            <option value="building">Building</option>
          </select>
        </div>
        <div style="display: flex; gap: 1rem; margin-top: 2rem;">
          <button type="submit" class="btn-primary">Create Mission</button>
          <button type="button" class="btn-primary" onclick="closeModal('addMissionModal')" 
                  style="background: var(--error-color);">Cancel</button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // MarsoVerse Admin Dashboard - Honeycomb Integration
    class MarsoVerseAdmin {
      constructor() {
        this.players = JSON.parse(localStorage.getItem('marsoverse_players') || '[]');
        this.missions = JSON.parse(localStorage.getItem('marsoverse_missions') || '[]');
        this.initializeDefaultMissions();
        this.initializeEventListeners();
        this.refreshData();
        this.startAutoRefresh();
        this.honeycombSync();
      }

      initializeDefaultMissions() {
        if (this.missions.length === 0) {
          this.missions = [
            {
              id: 'survival_001',
              title: 'First Steps on Mars',
              description: 'Complete the initial tutorial and meet your companion',
              xpReward: 100,
              usdReward: 0.5,
              type: 'survival',
              active: true
            },
            {
              id: 'companion_001',
              title: 'Bond with Your Companion',
              description: 'Reach relationship level "Friend" with your companion',
              xpReward: 250,
              usdReward: 1.0,
              type: 'companion',
              active: true
            },
            {
              id: 'exploration_001',
              title: 'Explore the Red Planet',
              description: 'Discover 5 different locations on Mars',
              xpReward: 500,
              usdReward: 2.0,
              type: 'exploration',
              active: true
            },
            {
              id: 'minigame_001',
              title: 'Gaming Champion',
              description: 'Win 10 mini-games to earn bonus XP',
              xpReward: 300,
              usdReward: 1.5,
              type: 'combat',
              active: true
            }
          ];
          this.saveMissions();
        }
      }

      initializeEventListeners() {
        // Player search
        document.getElementById('playerSearch').addEventListener('input', (e) => {
          this.filterPlayers(e.target.value);
        });

        // Forms
        document.getElementById('addPlayerForm').addEventListener('submit', (e) => {
          e.preventDefault();
          this.addPlayer();
        });

        document.getElementById('addMissionForm').addEventListener('submit', (e) => {
          e.preventDefault();
          this.addMission();
        });

        // Auto-sync with game data
        this.syncWithGameData();
      }

      // Sync with existing game localStorage data
      syncWithGameData() {
        // Get player data from game
        const playerName = localStorage.getItem('playerName');
        const playerAge = localStorage.getItem('playerAge');
        const playerXP = localStorage.getItem('playerXP') || '0';
        const companionName = localStorage.getItem('companionName') || 'Elena';
        const cyborgName = localStorage.getItem('cyborgName') || 'Jeremy';
        const walletBalance = localStorage.getItem('walletBalance') || '0';

        if (playerName && !this.players.find(p => p.name === playerName)) {
          this.players.push({
            id: Date.now().toString(),
            name: playerName,
            age: parseInt(playerAge) || 25,
            xp: parseInt(playerXP),
            companion: companionName,
            cyborg: cyborgName,
            wallet: parseFloat(walletBalance),
            status: 'online',
            lastActive: new Date().toISOString(),
            createdAt: new Date().toISOString()
          });
          this.savePlayers();
        }
      }

      addPlayer() {
        const name = document.getElementById('playerName').value;
        const age = parseInt(document.getElementById('playerAge').value);
        const xp = parseInt(document.getElementById('playerXP').value) || 0;
        const companion = document.getElementById('playerCompanion').value;
        const cyborg = document.getElementById('playerCyborg').value;

        const newPlayer = {
          id: Date.now().toString(),
          name,
          age,
          xp,
          companion,
          cyborg,
          wallet: 0,
          status: 'offline',
          lastActive: new Date().toISOString(),
          createdAt: new Date().toISOString()
        };

        this.players.push(newPlayer);
        this.savePlayers();
        this.refreshData();
        this.closeModal('addPlayerModal');
        this.resetForm('addPlayerForm');
        
        // Honeycomb Protocol Integration
        this.sendToHoneycomb('player_created', newPlayer);
      }

      addMission() {
        const title = document.getElementById('missionTitle').value;
        const description = document.getElementById('missionDescription').value;
        const xpReward = parseInt(document.getElementById('missionXP').value);
        const usdReward = parseFloat(document.getElementById('missionUSD').value) || 0;
        const type = document.getElementById('missionType').value;

        const newMission = {
          id: Date.now().toString(),
          title,
          description,
          xpReward,
          usdReward,
          type,
          active: true,
          createdAt: new Date().toISOString()
        };

        this.missions.push(newMission);
        this.saveMissions();
        this.refreshData();
        this.closeModal('addMissionModal');
        this.resetForm('addMissionForm');

        // Honeycomb Protocol Integration
        this.sendToHoneycomb('mission_created', newMission);
      }

      deletePlayer(playerId) {
        if (confirm('Are you sure you want to delete this player? This action cannot be undone.')) {
          const playerIndex = this.players.findIndex(p => p.id === playerId);
          if (playerIndex > -1) {
            const deletedPlayer = this.players[playerIndex];
            this.players.splice(playerIndex, 1);
            this.savePlayers();
            this.refreshData();
            
            // Honeycomb Protocol Integration
            this.sendToHoneycomb('player_deleted', { id: playerId, name: deletedPlayer.name });
          }
        }
      }

      updatePlayerXP(playerId, newXP) {
        const player = this.players.find(p => p.id === playerId);
        if (player) {
          const oldXP = player.xp;
          player.xp = Math.max(0, parseInt(newXP));
          player.lastActive = new Date().toISOString();
          this.savePlayers();
          this.refreshData();

          // Honeycomb Protocol Integration
          this.sendToHoneycomb('xp_updated', {
            playerId: player.id,
            playerName: player.name,
            oldXP,
            newXP: player.xp,
            change: player.xp - oldXP
          });
        }
      }

      refreshData() {
        this.updateStats();
        this.renderPlayersTable();
        this.renderMissions();
      }

      updateStats() {
        document.getElementById('totalPlayers').textContent = this.players.length;
        document.getElementById('totalXP').textContent = this.players.reduce((sum, p) => sum + p.xp, 0).toLocaleString();
        document.getElementById('totalMissions').textContent = this.missions.filter(m => m.active).length;
        document.getElementById('onlinePlayers').textContent = this.players.filter(p => p.status === 'online').length;
      }

      renderPlayersTable() {
        const tbody = document.getElementById('playersTableBody');
        tbody.innerHTML = '';

        this.players.forEach(player => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td><span class="status-indicator status-${player.status}"></span></td>
            <td>${player.name}</td>
            <td>${player.age}</td>
            <td>
              <input type="number" value="${player.xp}" min="0" 
                     onchange="admin.updatePlayerXP('${player.id}', this.value)"
                     style="background: transparent; border: 1px solid var(--border-color); color: white; padding: 0.25rem; border-radius: 3px; width: 80px;">
            </td>
            <td>${player.companion}</td>
            <td>${player.cyborg}</td>
            <td>$${player.wallet.toFixed(2)}</td>
            <td>${new Date(player.lastActive).toLocaleDateString()}</td>
            <td>
              <button class="action-btn success" onclick="admin.promotePlayer('${player.id}')" title="Promote">
                <i class="fas fa-arrow-up"></i>
              </button>
              <button class="action-btn" onclick="admin.viewPlayerDetails('${player.id}')" title="View Details">
                <i class="fas fa-eye"></i>
              </button>
              <button class="action-btn danger" onclick="admin.deletePlayer('${player.id}')" title="Delete">
                <i class="fas fa-trash"></i>
              </button>
            </td>
          `;
          tbody.appendChild(row);
        });
      }

      renderMissions() {
        const grid = document.getElementById('missionGrid');
        grid.innerHTML = '';

        this.missions.forEach(mission => {
          const card = document.createElement('div');
          card.className = 'mission-card';
          card.innerHTML = `
            <div class="mission-title">${mission.title}</div>
            <p style="font-size: 0.9rem; margin: 0.5rem 0;">${mission.description}</p>
            <div class="mission-reward">
              <i class="fas fa-star"></i> ${mission.xpReward} XP
              ${mission.usdReward > 0 ? `<br><i class="fas fa-dollar-sign"></i> $${mission.usdReward}` : ''}
            </div>
            <div style="margin-top: 1rem;">
              <span style="background: var(--primary-color); color: #000; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.8rem;">
                ${mission.type.toUpperCase()}
              </span>
              ${mission.active ? 
                '<span style="background: var(--success-color); color: #000; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.8rem; margin-left: 0.5rem;">ACTIVE</span>' :
                '<span style="background: #666; color: #fff; padding: 0.25rem 0.5rem; border-radius: 3px; font-size: 0.8rem; margin-left: 0.5rem;">INACTIVE</span>'
              }
            </div>
          `;
          grid.appendChild(card);
        });
      }

      filterPlayers(searchTerm) {
        const rows = document.querySelectorAll('#playersTableBody tr');
        rows.forEach(row => {
          const name = row.cells[1].textContent.toLowerCase();
          const companion = row.cells[4].textContent.toLowerCase();
          if (name.includes(searchTerm.toLowerCase()) || companion.includes(searchTerm.toLowerCase())) {
            row.style.display = '';
          } else {
            row.style.display = 'none';
          }
        });
      }

      promotePlayer(playerId) {
        const player = this.players.find(p => p.id === playerId);
        if (player) {
          player.xp += 500; // Bonus XP for promotion
          player.wallet += 5.0; // Bonus reward
          this.savePlayers();
          this.refreshData();
          // Honeycomb Protocol Integration
          this.sendToHoneycomb('player_promoted', {
            playerId: player.id,
            playerName: player.name,
            xpAdded: 500,
            usdAdded: 5.0
          });
        }
      }

      viewPlayerDetails(playerId) {
        const player = this.players.find(p => p.id === playerId);
        if (player) {
          alert(`Player Details:\n\nName: ${player.name}\nAge: ${player.age}\nXP: ${player.xp}\nCompanion: ${player.companion}\nCyborg: ${player.cyborg}\nWallet: $${player.wallet.toFixed(2)}\nLast Active: ${new Date(player.lastActive).toLocaleString()}`);
        }
      }

      exportPlayerData() {
        const dataStr = JSON.stringify(this.players, null, 2);
        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
        
        const exportFileDefaultName = `marsoverse_players_${new Date().toISOString().slice(0,10)}.json`;
        
        const linkElement = document.createElement('a');
        linkElement.setAttribute('href', dataUri);
        linkElement.setAttribute('download', exportFileDefaultName);
        linkElement.click();
      }

      savePlayers() {
        localStorage.setItem('marsoverse_players', JSON.stringify(this.players));
      }

      saveMissions() {
        localStorage.setItem('marsoverse_missions', JSON.stringify(this.missions));
      }

      showModal(modalId) {
        document.getElementById(modalId).style.display = 'flex';
      }

      closeModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
      }

      resetForm(formId) {
        document.getElementById(formId).reset();
      }

      startAutoRefresh() {
        setInterval(() => {
          this.refreshData();
        }, 30000); // Refresh every 30 seconds
      }

      // Honeycomb Protocol Integration
      sendToHoneycomb(eventType, data) {
        // This would be replaced with actual Honeycomb protocol integration
        console.log(`[Honeycomb] Event: ${eventType}`, data);
        
        // Simulate sending data to Honeycomb
        const honeycombEvent = {
          timestamp: new Date().toISOString(),
          type: eventType,
          data: data,
          game: 'MarsoVerse',
          version: '1.0.0'
        };
        
        // In a real implementation, this would be an API call to Honeycomb
        localStorage.setItem(`honeycomb_${Date.now()}`, JSON.stringify(honeycombEvent));
      }

      // Initialize Honeycomb connection
      initHoneycomb() {
        console.log('Initializing Honeycomb Protocol connection...');
        // Simulate connection
        setTimeout(() => {
          console.log('✅ Honeycomb Protocol connected');
          this.sendToHoneycomb('admin_connected', {
            adminVersion: '1.0',
            playersCount: this.players.length,
            missionsCount: this.missions.length
          });
        }, 1000);
      }
    }

    // UI Helper Functions
    function showAddPlayerModal() {
      admin.showModal('addPlayerModal');
    }

    function showAddMissionModal() {
      admin.showModal('addMissionModal');
    }

    function closeModal(modalId) {
      admin.closeModal(modalId);
    }

    function refreshData() {
      admin.refreshData();
      alert('Data refreshed successfully!');
    }

    // Initialize Admin Dashboard
    const admin = new MarsoVerseAdmin();
    window.admin = admin; // Make admin available globally

    // Initialize Honeycomb Protocol
    admin.initHoneycomb();

    // Add some sample data if empty (for demo purposes)
    if (admin.players.length === 0) {
      admin.players = [
        {
          id: '1',
          name: 'MarsKing',
          age: 32,
          xp: 4320,
          companion: 'Elena',
          cyborg: 'Jeremy',
          wallet: 25.50,
          status: 'online',
          lastActive: new Date().toISOString(),
          createdAt: '2025-01-15T10:30:00Z'
        },
        {
          id: '2',
          name: 'CyborgQueen',
          age: 28,
          xp: 3290,
          companion: 'Errin',
          cyborg: 'Mech-X',
          wallet: 18.75,
          status: 'online',
          lastActive: new Date().toISOString(),
          createdAt: '2025-02-20T14:45:00Z'
        },
        {
          id: '3',
          name: 'MechaKnight',
          age: 35,
          xp: 2840,
          companion: 'Elena',
          cyborg: 'Sentinel',
          wallet: 12.30,
          status: 'offline',
          lastActive: '2025-07-28T22:15:00Z',
          createdAt: '2025-03-10T09:15:00Z'
        }
      ];
      admin.savePlayers();
      admin.refreshData();
    }
  </script>
</body>
</html>

          

<!-- <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Admin – Player Logs</title>
  <link rel="stylesheet" href="styles/main.css" />
  <script src="https://www.gstatic.com/firebasejs/10.5.2/firebase-app.js"></script>
  <script src="https://www.gstatic.com/firebasejs/10.5.2/firebase-database.js"></script>
  <style>
    body {
      font-family: 'Segoe UI', sans-serif;
      background: #0c0c0f;
      color: #0ff;
      padding: 2rem;
    }
    h1 {
      text-align: center;
      color: #f0f0f0;
    }
    table {
      width: 95%;
      margin: 2rem auto;
      border-collapse: collapse;
      background: #111;
      color: #0ff;
      box-shadow: 0 0 15px rgba(0,255,255,0.2);
    }
    th, td {
      padding: 0.75rem;
      border: 1px solid #0ff;
    }
    th {
      background-color: #0ff;
      color: #111;
    }
    tr:hover {
      background-color: rgba(0, 255, 255, 0.1);
    }
  </style>
</head>
<body>
  <h1>👩🏾‍🚀 MarsoVerse Admin Dashboard</h1>
  <table id="playerTable">
    <thead>
      <tr>
        <th>Name</th>
        <th>Age</th>
        <th>Gender</th>
        <th>Companion</th>
        <th>Cyborg</th>
        <th>Wallet</th>
        <th>XP</th>
        <th>Missions</th>
        <th>Level</th>
        <th>Time</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    const firebaseConfig = {
      apiKey: "AIzaSyBUCwISiy1WJo_yB2lPbUN56faUoKe-JEs",
      authDomain: "marsoverse-c7e2d.firebaseapp.com",
      projectId: "marsoverse-c7e2d",
      storageBucket: "marsoverse-c7e2d.appspot.com",
      messagingSenderId: "1055658003266",
      appId: "1:1055658003266:web:e0f5ebe689d28c5432d6db",
      measurementId: "G-XNW8MQM5HT"
    };

    firebase.initializeApp(firebaseConfig);
    const db = firebase.database();
    const tableBody = document.querySelector('#playerTable tbody');

    db.ref('players').on('value', (snapshot) => {
      tableBody.innerHTML = '';
      const data = snapshot.val();

      if (data) {
        Object.entries(data).forEach(([playerId, player]) => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${player.name || '-'}</td>
            <td>${player.age || '-'}</td>
            <td>${player.gender || '-'}</td>
            <td>${player.companion || '-'}</td>
            <td>${player.cyborg || '-'}</td>
            <td>${player.wallet || '-'}</td>
            <td>${player.xp || 0}</td>
            <td>${(player.missions || []).length}</td>
            <td>${player.level || 1}</td>
            <td>${player.timestamp ? new Date(player.timestamp).toLocaleString() : '-'}</td>
          `;
          tableBody.appendChild(row);
        });
      }
    });
  </script>
</body>
</html> -->



